{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/air.png","path":"img/air.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/cherry.jpg","path":"img/cherry.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/chrome1.png","path":"img/chrome1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/chrome2.png","path":"img/chrome2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/chrome3.png","path":"img/chrome3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/defer.png","path":"img/defer.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/debugger.png","path":"img/debugger.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/f.jpg","path":"img/f.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/git.jpg","path":"img/git.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http.webp","path":"img/http.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http2.jpg","path":"img/http2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http3.jpg","path":"img/http3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http4.jpg","path":"img/http4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http5.jpg","path":"img/http5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http6.webp","path":"img/http6.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http7.jpg","path":"img/http7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/http8.jpg","path":"img/http8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/ladder.webp","path":"img/ladder.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/layout.jpeg","path":"img/layout.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/layout.webp","path":"img/layout.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/p.jpg","path":"img/p.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/p2.webp","path":"img/p2.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/rrick.jpg","path":"img/rrick.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/tra.jpg","path":"img/tra.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/你知道的太多了.jpg","path":"img/你知道的太多了.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Git亲妈级教程.md","hash":"abdfba8529928b77a79eca262165d97b41fa4c96","modified":1691377902085},{"_id":"source/_posts/HTTP版本演进：第一回.md","hash":"50d9bab7277e23119e809ff51c1255f3f5996ba1","modified":1691115317843},{"_id":"source/_posts/HTTP版本演进：第二回.md","hash":"6f069206665da204113198d47ee80057b59c504c","modified":1691115317844},{"_id":"source/_posts/HTTP版本演进：第三回.md","hash":"f8c3fe176667282c33b7065ea9ad43b5df725144","modified":1691115317843},{"_id":"source/_posts/JS类型详论.md","hash":"ecde4bb032bb602158a57b6f664dd71b5d48533d","modified":1691377892488},{"_id":"source/_posts/Webkit系列：第一回.md","hash":"4b83e18ed4c474b8cd77ee874a096cb76a95621d","modified":1691115317844},{"_id":"source/_posts/Webpack系列：第三回.md","hash":"598dafb28e844ef715761ff5b34e3117a99b9fc4","modified":1691030652869},{"_id":"source/_posts/Webpack系列：第一回.md","hash":"65c591a02518acd1b679a173cfb47a61a8883f61","modified":1690943028495},{"_id":"source/_posts/Webpack系列：第二回.md","hash":"e56bc1f289e47e616ab6dd2668399810914e0e35","modified":1690943028495},{"_id":"source/_posts/Webpack系列：第四回.md","hash":"2749775a6d536340f7f274a0ba1c806efadf6b28","modified":1690943028496},{"_id":"source/_posts/down视频资源时的偶然发现.md","hash":"5ceb8d75e0d0e3740a75ddba2c98d3a41fdeff93","modified":1691373763811},{"_id":"source/_posts/js的上古规则-原型链那些事儿.md","hash":"e9d02816a82b180dd3efdd312f8bd69bc0860355","modified":1691377884541},{"_id":"source/_posts/《万神殿》-上载智能.md","hash":"a29d9d0ad23d9fc358be79a65a902d848b49631e","modified":1691070183412},{"_id":"source/_posts/关于所谓的“梯子”的实现逻辑.md","hash":"aec148d80dc6d4219639e01e6ddbeff8843d51bf","modified":1691031058600},{"_id":"source/_posts/做好预备动作.md","hash":"642e7e22b50f1de1e98827d19ef188c0cf6d774c","modified":1691069894605},{"_id":"source/_posts/四轴无人机研究：第一回.md","hash":"3abbb70e9d0ccece4d0f0bb5ee3bf15eb32aeed5","modified":1691031143854},{"_id":"source/_posts/性能的考量：第一回.md","hash":"cddc2df7c0e650df506c9111efd932f287b86003","modified":1691066055083},{"_id":"source/_posts/性能的考量：第三回.md","hash":"cb20810855543db03d7403b0cee02322be20adc3","modified":1691373772458},{"_id":"source/_posts/性能的考量：第二回.md","hash":"c453f935f78b0981651aa7483531eb9a68bd6ad4","modified":1691066550534},{"_id":"source/_posts/性能的考量：第四回.md","hash":"533304058d1ca552d3cf799fb3f8aec03999c932","modified":1691069327735},{"_id":"source/_posts/谷歌插件流程：第一回.md","hash":"aa5574ab0289025bc6f4b398798a85b93f45e63a","modified":1691377826630},{"_id":"source/_posts/设计模式：单例模式.md","hash":"2f4e7bf447fedf05524b7497c1784a140f7354be","modified":1691377874659},{"_id":"themes/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/README.md","hash":"df8de03d6695a73beaf54f35491fcd16c3cce3e9","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/README_CN.md","hash":"f35e3841643ffa641895e2dfeaa8f5dd4b178b9f","modified":1690943028500},{"_id":"themes/hexo-theme-butterfly/_config.yml","hash":"a83905f97af84773e5ec6c34146f445a5f8aa253","modified":1691068283163},{"_id":"themes/hexo-theme-butterfly/package.json","hash":"1646604798f745ef068852772eb22239985ba731","modified":1690943028532},{"_id":"themes/hexo-theme-butterfly/plugins.yml","hash":"52cd80df42f07dd1c611651d706a6b1317dd33ae","modified":1690943028532},{"_id":"themes/hexo-theme-butterfly/languages/default.yml","hash":"a194caf032fa2c9a73e2fcbc3b0e9b8217176034","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/languages/en.yml","hash":"a8c7e4ad260d345adf3917af4aeabe972a1d8c15","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/languages/zh-CN.yml","hash":"9f886e3c91bac473a7ca36290622a2cfac9fccfd","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/languages/zh-TW.yml","hash":"2db89dd2899841d6d02b36a2cb042942e4aa7172","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1690943028502},{"_id":"themes/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1690943028502},{"_id":"themes/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1690943028531},{"_id":"themes/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1690943028531},{"_id":"themes/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1690943028531},{"_id":"themes/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1690943028532},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1690943028498},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1690943028498},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1690943028498},{"_id":"themes/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1690943028502},{"_id":"themes/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1690943028507},{"_id":"themes/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1690943028511},{"_id":"themes/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1690943028511},{"_id":"themes/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1690943028533},{"_id":"themes/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1690943028533},{"_id":"themes/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1690943028535},{"_id":"themes/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1690943028535},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1690943028537},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1690943028537},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1690943028537},{"_id":"themes/hexo-theme-butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"6e0a80231f42a4d8e40e8360639e8a8f121721cb","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1690943028540},{"_id":"themes/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"ddd750a83e9eeb29ea691fea68a21cc6b04c2ea4","modified":1690943028540},{"_id":"themes/hexo-theme-butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1690943028540},{"_id":"themes/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1690943028541},{"_id":"themes/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1690943028554},{"_id":"themes/hexo-theme-butterfly/source/css/var.styl","hash":"87b52816632399b81918f22e582fe08df8a09ea8","modified":1691068283756},{"_id":"themes/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690943028554},{"_id":"themes/hexo-theme-butterfly/source/img/cherry.jpg","hash":"44021a61fc08a9503fe4c0a07e04b28fd7af6246","modified":1691043630556},{"_id":"themes/hexo-theme-butterfly/source/img/chrome1.png","hash":"b8cecdb5c18ea4f288136bacac28644d1e5df570","modified":1691129572630},{"_id":"themes/hexo-theme-butterfly/source/img/chrome2.png","hash":"18fe14d0daf545860bb0985b8182a39753253ead","modified":1691377569500},{"_id":"themes/hexo-theme-butterfly/source/img/defer.png","hash":"a14e47a4bbf3bad8533764b6efc1de502ad67b71","modified":1691064940508},{"_id":"themes/hexo-theme-butterfly/source/img/debugger.png","hash":"d31afdf7697916bf0829d662d3a325ea477873ff","modified":1691029809946},{"_id":"themes/hexo-theme-butterfly/source/img/f.jpg","hash":"63e6faf361c4544360213f43418ca8993c25f4c4","modified":1690943028558},{"_id":"themes/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690943028559},{"_id":"themes/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690943028560},{"_id":"themes/hexo-theme-butterfly/source/img/git.jpg","hash":"02f9c6c86ee87148781dfa3f978a034b20f40309","modified":1691033026325},{"_id":"themes/hexo-theme-butterfly/source/img/http.webp","hash":"048494ed0b7ae060e26b98c3204f8c7813b59027","modified":1691115317845},{"_id":"themes/hexo-theme-butterfly/source/img/http3.jpg","hash":"c144b5bcaae5a82e84494a8cfc0697bce80e593f","modified":1691115317847},{"_id":"themes/hexo-theme-butterfly/source/img/http5.jpg","hash":"b6f0da80a04fd80bc2dcbcd479b8166a86a889ac","modified":1691115317848},{"_id":"themes/hexo-theme-butterfly/source/img/http6.webp","hash":"68c8fd7a1d3e98ffc6271af8410cfbddbcc6bd94","modified":1691115317849},{"_id":"themes/hexo-theme-butterfly/source/img/http8.jpg","hash":"8e6362a91f26fd11301d72dbb1fc5beff13cf2fd","modified":1691115317850},{"_id":"themes/hexo-theme-butterfly/source/img/ladder.webp","hash":"f90b7e15e28dd74927d11d0c4b4a7c0784409fc4","modified":1658889822408},{"_id":"themes/hexo-theme-butterfly/source/img/layout.webp","hash":"6a7211f732bcee2fcff2ccf0fcb187a3138c65a9","modified":1691115317851},{"_id":"themes/hexo-theme-butterfly/source/img/layout.jpeg","hash":"9f02179d493555d4b00a8e8c5738d51c1be1b7dd","modified":1691031478149},{"_id":"themes/hexo-theme-butterfly/source/img/p.jpg","hash":"a21a365d6d69d924a4ed7e886020d36e361b1289","modified":1691066448743},{"_id":"themes/hexo-theme-butterfly/source/img/p2.webp","hash":"73ddebc8e82dfc5ece5911197e8fb1dea1ec0184","modified":1691066468528},{"_id":"themes/hexo-theme-butterfly/source/img/你知道的太多了.jpg","hash":"91ef0614c9f7890cab00160562a67ac2d3be6c87","modified":1691029791478},{"_id":"themes/hexo-theme-butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690943028561},{"_id":"themes/hexo-theme-butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690943028562},{"_id":"themes/hexo-theme-butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690943028563},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1690943028506},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1690943028506},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1690943028506},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1690943028507},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1690943028507},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"f0ccaa441efe0bff3365c6dec7f7a237f9a4e0d1","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1690943028512},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1690943028527},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1690943028527},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1690943028527},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"3ec354778f6a4ac97fb64d5629c83b293ccceb5e","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1690943028530},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1690943028530},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1690943028530},{"_id":"themes/hexo-theme-butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1690943028541},{"_id":"themes/hexo-theme-butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1690943028542},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1690943028542},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1690943028551},{"_id":"themes/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1690943028549},{"_id":"themes/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1690943028549},{"_id":"themes/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1690943028551},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1690943028551},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"1afd4ccb231294fc19a51cddc2e62e7c4d06de8e","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690943028562},{"_id":"themes/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690943028562},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1690943028511},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1690943028512},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1690943028512},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1690943028514},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1690943028514},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1690943028514},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1690943028516},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1690943028516},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1690943028516},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1690943028517},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1690943028517},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1690943028517},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1690943028518},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1690943028518},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1690943028518},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1690943028522},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1690943028522},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1690943028522},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1690943028542},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1690943028543},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1690943028543},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1690943028543},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/img/http2.jpg","hash":"cc0b4950de62b404661b9fff80d4fbab1411d4a7","modified":1691115317846},{"_id":"themes/hexo-theme-butterfly/source/img/http4.jpg","hash":"d37a9c42e705729dc7c124c7293661eeab523b06","modified":1691115317848},{"_id":"themes/hexo-theme-butterfly/source/img/http7.jpg","hash":"c5f76dd20729d89712debfb5bd1563b7290ba70b","modified":1691115317849},{"_id":"themes/hexo-theme-butterfly/source/img/chrome3.png","hash":"82a5fc0ee29a1585000af885dc64bca2decd054f","modified":1691377634466},{"_id":"themes/hexo-theme-butterfly/source/img/tra.jpg","hash":"04d067757a49b78acf8145daa7abaebb866e8283","modified":1691066256419},{"_id":"themes/hexo-theme-butterfly/source/img/air.png","hash":"4e2268189e42f21c1b4960a5a3208cc90ec13e63","modified":1690943028556},{"_id":"themes/hexo-theme-butterfly/source/img/rrick.jpg","hash":"955c42b436a99bd289eca219916a112128904de6","modified":1690943028561},{"_id":"themes/hexo-theme-butterfly/source/img/avatar.jpg","hash":"c49270e383f2d7deffea82222e8a8455ff356b02","modified":1690943028558},{"_id":"public/2023/07/25/Webpack系列：第四回/index.html","hash":"6ea3df5a93b0cb75c8cfe4fe847bce5202d3e565","modified":1691378040272},{"_id":"public/categories/Webkit系列/index.html","hash":"989bd4e94966d28b4f680418c754c1581880a141","modified":1691378040272},{"_id":"public/categories/无人机系列/index.html","hash":"507debedc461defb8ae465fda121756d379337c4","modified":1691378040272},{"_id":"public/categories/大前端剑宗专栏/index.html","hash":"b4216071bb610f7fc2a568ff5bd5fdff942161ac","modified":1691378040272},{"_id":"public/2023/08/03/谷歌插件流程：第一回/index.html","hash":"9860d4d7be31ba132fd3bc4e1661965234954e86","modified":1691378040272},{"_id":"public/2023/08/03/性能的考量：第四回/index.html","hash":"7774fd27a0f8914665c193d98ded243f0a90d8f4","modified":1691378040272},{"_id":"public/2023/08/03/性能的考量：第三回/index.html","hash":"6a78ba1a305c43bdc09da75a5eee6e77cd563644","modified":1691378040272},{"_id":"public/2023/08/03/性能的考量：第二回/index.html","hash":"3241e93b8863b0908c91cdb1dd13927e036f9c1e","modified":1691378040272},{"_id":"public/2023/08/03/设计模式：单例模式/index.html","hash":"f82a171326f661f319a2e58f569bb08e11d36ce8","modified":1691378040272},{"_id":"public/2023/08/03/JS类型详论/index.html","hash":"ab56c0811d102c3d5dce3c1d760d287233f91d1c","modified":1691378040272},{"_id":"public/2023/08/03/性能的考量：第一回/index.html","hash":"1d305daa52058d602c03b349fd101645f5685543","modified":1691378040272},{"_id":"public/2023/08/03/关于所谓的“梯子”的实现逻辑/index.html","hash":"dbed4c7a0a01b836a1591cd1090b5e204882dd5a","modified":1691378040272},{"_id":"public/2023/08/03/down视频资源时的偶然发现/index.html","hash":"74ef13ffe50f6d7115ea30b946579916f4e8e4fe","modified":1691378040272},{"_id":"public/2023/08/03/Git亲妈级教程/index.html","hash":"f13b851581128b0010fb0940dbb1d5e9805983ca","modified":1691378040272},{"_id":"public/2023/08/03/HTTP版本演进：第三回/index.html","hash":"f89a959d4fca04f217419f98c9383bc0c2947146","modified":1691378040272},{"_id":"public/2023/08/03/js的上古规则-原型链那些事儿/index.html","hash":"96ecc5d05591b13e306f2347fa03a8ec80c4731a","modified":1691378040272},{"_id":"public/2023/08/02/HTTP版本演进：第二回/index.html","hash":"c2d861c7e9a5cb4faa06a3d4e46b67f2e50c9e72","modified":1691378040272},{"_id":"public/2023/08/02/HTTP版本演进：第一回/index.html","hash":"96ddc77ac56e86d93c400aeafb6ca18e1ebf0a58","modified":1691378040272},{"_id":"public/2023/07/31/四轴无人机研究：第一回/index.html","hash":"ecd48c7710120236544262d027d17cb198d2445b","modified":1691378040272},{"_id":"public/2023/07/24/Webpack系列：第三回/index.html","hash":"1ba614e1c5727ef1fb7db4dbe6659745ad0ce1b9","modified":1691378040272},{"_id":"public/2023/07/28/Webkit系列：第一回/index.html","hash":"ecca49a5fcf30992f6359d7a205522baafd35f9b","modified":1691378040272},{"_id":"public/2023/07/24/Webpack系列：第一回/index.html","hash":"1e41948fba59e4fd6c7503a7aa8c665bf546bbd0","modified":1691378040272},{"_id":"public/2023/07/24/《万神殿》-上载智能/index.html","hash":"0db997a3ac840abcb3bf8dd9e5d1bd8c1cc4e712","modified":1691378040272},{"_id":"public/2023/07/24/Webpack系列：第二回/index.html","hash":"a49900216e7a285a8ff0b12cf831b4ad73296556","modified":1691378040272},{"_id":"public/2023/07/24/做好预备动作/index.html","hash":"763e6dff80db991fc55febced7756f4facc5fca8","modified":1691378040272},{"_id":"public/archives/page/2/index.html","hash":"4f3ce9f8cb8e99b0a81b953d83fde5a57ac5e72c","modified":1691378040272},{"_id":"public/archives/index.html","hash":"839f5fd1f77f5565a6d35939fe6030cd2d36ca2f","modified":1691378040272},{"_id":"public/archives/2023/index.html","hash":"917e7dfc184dc5cefdad06cfe8553bd0e21e6476","modified":1691378040272},{"_id":"public/archives/2023/page/2/index.html","hash":"a21c7c786dbcb26ab8e9a8a493d1297ff6775309","modified":1691378040272},{"_id":"public/archives/page/3/index.html","hash":"d362734833f69baffcf45f220e894939f022b169","modified":1691378040272},{"_id":"public/archives/2023/page/3/index.html","hash":"cedda7c0cea0f388b00d07dbb21c9e4b68dc0829","modified":1691378040272},{"_id":"public/archives/2023/08/index.html","hash":"1f91429bdd6cd8401daf996074980d15436368da","modified":1691378040272},{"_id":"public/archives/2023/07/index.html","hash":"2a692872fc660a5bfc5778f19b32516b399b48a3","modified":1691378040272},{"_id":"public/index.html","hash":"125523896e20d9effb9192c5c25ccea1e2f1dd0b","modified":1691378040272},{"_id":"public/archives/2023/08/page/2/index.html","hash":"427a8a821430f0d1984c4ced35dff3ec2b4b7d50","modified":1691378040272},{"_id":"public/page/3/index.html","hash":"62ae3618dbb21612836b955c9871354b82f9cc17","modified":1691378040272},{"_id":"public/categories/大前端气宗专栏/index.html","hash":"c3a09c3cb9250b946eeb454a2bbdfd3a4d5f833b","modified":1691378040272},{"_id":"public/page/2/index.html","hash":"cbdc50938beba220b9cb03ebfc9b46a554d8dd15","modified":1691378040272},{"_id":"public/categories/网络杂谈/index.html","hash":"65c9880cc0e34f02668af4e8b6e950ed5d57c42a","modified":1691378040272},{"_id":"public/categories/Webpack/index.html","hash":"0d348be3c28823c4b7a3fb2ac53dcc400a49a92b","modified":1691378040272},{"_id":"public/categories/杂谈/index.html","hash":"ee99d078edf8c3b4fe50617cd7073444efe21f48","modified":1691378040272},{"_id":"public/categories/性能的考量/index.html","hash":"63ae3dfc60f413da075557024b107f47b727b4ee","modified":1691378040272},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1691378040272},{"_id":"public/img/cherry.jpg","hash":"44021a61fc08a9503fe4c0a07e04b28fd7af6246","modified":1691378040272},{"_id":"public/img/chrome2.png","hash":"18fe14d0daf545860bb0985b8182a39753253ead","modified":1691378040272},{"_id":"public/img/chrome1.png","hash":"b8cecdb5c18ea4f288136bacac28644d1e5df570","modified":1691378040272},{"_id":"public/img/defer.png","hash":"a14e47a4bbf3bad8533764b6efc1de502ad67b71","modified":1691378040272},{"_id":"public/img/f.jpg","hash":"63e6faf361c4544360213f43418ca8993c25f4c4","modified":1691378040272},{"_id":"public/img/debugger.png","hash":"d31afdf7697916bf0829d662d3a325ea477873ff","modified":1691378040272},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1691378040272},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1691378040272},{"_id":"public/img/git.jpg","hash":"02f9c6c86ee87148781dfa3f978a034b20f40309","modified":1691378040272},{"_id":"public/img/http.webp","hash":"048494ed0b7ae060e26b98c3204f8c7813b59027","modified":1691378040272},{"_id":"public/img/http3.jpg","hash":"c144b5bcaae5a82e84494a8cfc0697bce80e593f","modified":1691378040272},{"_id":"public/img/http6.webp","hash":"68c8fd7a1d3e98ffc6271af8410cfbddbcc6bd94","modified":1691378040272},{"_id":"public/img/http5.jpg","hash":"b6f0da80a04fd80bc2dcbcd479b8166a86a889ac","modified":1691378040272},{"_id":"public/img/http8.jpg","hash":"8e6362a91f26fd11301d72dbb1fc5beff13cf2fd","modified":1691378040272},{"_id":"public/img/layout.webp","hash":"6a7211f732bcee2fcff2ccf0fcb187a3138c65a9","modified":1691378040272},{"_id":"public/img/layout.jpeg","hash":"9f02179d493555d4b00a8e8c5738d51c1be1b7dd","modified":1691378040272},{"_id":"public/img/p.jpg","hash":"a21a365d6d69d924a4ed7e886020d36e361b1289","modified":1691378040272},{"_id":"public/img/p2.webp","hash":"73ddebc8e82dfc5ece5911197e8fb1dea1ec0184","modified":1691378040272},{"_id":"public/img/ladder.webp","hash":"f90b7e15e28dd74927d11d0c4b4a7c0784409fc4","modified":1691378040272},{"_id":"public/img/你知道的太多了.jpg","hash":"91ef0614c9f7890cab00160562a67ac2d3be6c87","modified":1691378040272},{"_id":"public/img/http2.jpg","hash":"cc0b4950de62b404661b9fff80d4fbab1411d4a7","modified":1691378040272},{"_id":"public/img/http4.jpg","hash":"d37a9c42e705729dc7c124c7293661eeab523b06","modified":1691378040272},{"_id":"public/img/http7.jpg","hash":"c5f76dd20729d89712debfb5bd1563b7290ba70b","modified":1691378040272},{"_id":"public/img/chrome3.png","hash":"82a5fc0ee29a1585000af885dc64bca2decd054f","modified":1691378040272},{"_id":"public/img/tra.jpg","hash":"04d067757a49b78acf8145daa7abaebb866e8283","modified":1691378040272},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1691378040272},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1691378040272},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1691378040272},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1691378040272},{"_id":"public/css/index.css","hash":"8b7de3ac431296a557cf85607735050f9101b5f1","modified":1691378040272},{"_id":"public/img/air.png","hash":"4e2268189e42f21c1b4960a5a3208cc90ec13e63","modified":1691378040272},{"_id":"public/img/rrick.jpg","hash":"955c42b436a99bd289eca219916a112128904de6","modified":1691378040272},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1691378040272},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1691378040272},{"_id":"public/img/avatar.jpg","hash":"c49270e383f2d7deffea82222e8a8455ff356b02","modified":1691378040272}],"Category":[{"name":"大前端气宗专栏","_id":"cll0atcup000294vtg1154qur"},{"name":"网络杂谈","_id":"cll0atcur000694vt2bt1g268"},{"name":"Webkit系列","_id":"cll0atcuy000i94vt87t2gg9e"},{"name":"Webpack","_id":"cll0atcv0000n94vtcp6hcfkf"},{"name":"杂谈","_id":"cll0atcv5001594vt0gtxeme0"},{"name":"无人机系列","_id":"cll0atcv6001b94vt05cc7tqt"},{"name":"性能的考量","_id":"cll0atcv6001e94vtbdvcfywi"},{"name":"大前端剑宗专栏","_id":"cll0atcv8001l94vt50l52mdy"}],"Data":[],"Page":[],"Post":[{"title":"Git亲妈级教程","date":"2023-08-03T03:20:52.000Z","_content":"\n- 一般的代码提交流程：\n```javascript\ngit add .\ngit commit -m 'message'\ngit push\n```\n提交到自己的分支，发起合并到dev分支的merge交由负责人审查合并代码。\n<img src=\"/img/git.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 克隆分支并同步远端\n```javascript\ngit checkout -b '分支名'\ngit push origin '分支名'\n```\n\n- 查看哪些文件被修改及修改的内容\n```javascript\ngit diff --cached\n```\n\n- 本地仓库与远程主机仓库关联起来\n```javascript\ngit remote add origin \"https://github.com/kinglion580/shiyanlou.git\"\n```\n\n- 如何在本地给远程仓库创建一个分支？（就是远程仓库没有该分支）\n首先需要在本地新建一个分支： git checkout -b 分支名\n同步到远程：git push --set-upstream origin 分支名\n然后通过命令直接push到远程：git push\n\n- 如何在本地删除远程分支\n```javascript\n// 删除本地分支\ngit branch -d 分支名\n\n// 删除远程分支\ngit push origin --delete 分支名\n\n// 本地分支和远程同步\ngit remote update upstream --prune\n```\n\n- 有时候，我们在自己分支上写的好好的，突然需要切换到别的分支，而此时，我们又不想commit，咋办？\n**git stash,可以理解为暂时保存，切换到其他分支，干完后，回到自己的分支,git stash pop，恢复**\n\n- 如果代码写到一半，突然发现写错分支，该如何？\n**同7类似，即，执行暂存git stash,但是随后切换到正确分支，执行git stash pop,即将自己的一波操作释放到正确的分支上了**\n\n- 但我修改了一处小bug提交时，不想写个message做新的commit,转而合并最近一次提交，该如何？\n**git commit --amend,包您满意，实质就是，覆盖最近一次提交**\n\n- 当自己在主分支写测试代码后，没有add 和commit的情况下，想放弃在该分支上的所有修改切换回自己的分支，此种场景下，该如何？\n```javascript\n// 撤销对所有已修改但未提交的文件的修改，但不包括新增的文件\ngit checkout .\n// 撤销对指定文件的修改，[filename]为文件名\ngit checkout [filename] \n```\n- 撤销add\n```javascript\n// 撤销全部\ngit reset HEAD .\n// 撤销某文件或者文件夹\ngit reset HEAD -filename\n```\n\n- 撤销commit\n```javascript\ngit reset --soft HEAD~1\n```\n\n- 其他常用操作\n```javascript\n// 回退\ngit reset --hard git版本号 \ngit push -f\n// 查看当前分支数\ngit branch -a\n// 合并提交记录\ngit rebase -i HEAD~分枝数\ngit push -f\n\n// 查看本地的git配置信息\ngit config --global -l\ngit config --list 查看所有信息\n```\n\n- cherry-pic合并指定分支的某个提交\n<img src=\"/img/cherry.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 团队协作相关\n在公司的开发过程中，一个项目的至少有三个分支。master（线上-在跑的代码）、stagging（类似于测试）、dev（开发分支）。**大体分成两种工作方式。**\n1. 所有的开发人员，在项目中都有自己的dev分支，通常命名dev_dadadad.....。每次开发完毕后，发起合并请求，负责人合并到stagging分支进行测试。\n2. 开发人员需要fork一下项目，相当于创建一个自己私人的项目。克隆到本地后做的第一件事情，就是关联主项目。设置origin和upstream仓库地址，分别是自己的项目和主项目的地址。\n```javascript\ngit remote add upstream + 主项目代码\n```\n这样，当我们通过git remote -v命令，在控制台打印当前fork项目的远程信息时，会出现下面所示：\n```javascript\norigin  fork地址 (fetch)\norigin  fork地址 (push)\nupstream        主项目地址(fetch)\nupstream        主项目地址(push)\n```\n每次开发前，通过如下命令拉取并合并主项目dev分支的最新代码：\n```javascript\ngit pull upstream dev\n```\n**注意，上面的命令做了两件事，第一，拉去目标分支代码，第二，自动合并到当前所在分支。**","source":"_posts/Git亲妈级教程.md","raw":"---\ntitle: Git亲妈级教程\ncategory: 大前端气宗专栏\ndate: 2023-08-03 11:20:52\ntags:\n---\n\n- 一般的代码提交流程：\n```javascript\ngit add .\ngit commit -m 'message'\ngit push\n```\n提交到自己的分支，发起合并到dev分支的merge交由负责人审查合并代码。\n<img src=\"/img/git.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 克隆分支并同步远端\n```javascript\ngit checkout -b '分支名'\ngit push origin '分支名'\n```\n\n- 查看哪些文件被修改及修改的内容\n```javascript\ngit diff --cached\n```\n\n- 本地仓库与远程主机仓库关联起来\n```javascript\ngit remote add origin \"https://github.com/kinglion580/shiyanlou.git\"\n```\n\n- 如何在本地给远程仓库创建一个分支？（就是远程仓库没有该分支）\n首先需要在本地新建一个分支： git checkout -b 分支名\n同步到远程：git push --set-upstream origin 分支名\n然后通过命令直接push到远程：git push\n\n- 如何在本地删除远程分支\n```javascript\n// 删除本地分支\ngit branch -d 分支名\n\n// 删除远程分支\ngit push origin --delete 分支名\n\n// 本地分支和远程同步\ngit remote update upstream --prune\n```\n\n- 有时候，我们在自己分支上写的好好的，突然需要切换到别的分支，而此时，我们又不想commit，咋办？\n**git stash,可以理解为暂时保存，切换到其他分支，干完后，回到自己的分支,git stash pop，恢复**\n\n- 如果代码写到一半，突然发现写错分支，该如何？\n**同7类似，即，执行暂存git stash,但是随后切换到正确分支，执行git stash pop,即将自己的一波操作释放到正确的分支上了**\n\n- 但我修改了一处小bug提交时，不想写个message做新的commit,转而合并最近一次提交，该如何？\n**git commit --amend,包您满意，实质就是，覆盖最近一次提交**\n\n- 当自己在主分支写测试代码后，没有add 和commit的情况下，想放弃在该分支上的所有修改切换回自己的分支，此种场景下，该如何？\n```javascript\n// 撤销对所有已修改但未提交的文件的修改，但不包括新增的文件\ngit checkout .\n// 撤销对指定文件的修改，[filename]为文件名\ngit checkout [filename] \n```\n- 撤销add\n```javascript\n// 撤销全部\ngit reset HEAD .\n// 撤销某文件或者文件夹\ngit reset HEAD -filename\n```\n\n- 撤销commit\n```javascript\ngit reset --soft HEAD~1\n```\n\n- 其他常用操作\n```javascript\n// 回退\ngit reset --hard git版本号 \ngit push -f\n// 查看当前分支数\ngit branch -a\n// 合并提交记录\ngit rebase -i HEAD~分枝数\ngit push -f\n\n// 查看本地的git配置信息\ngit config --global -l\ngit config --list 查看所有信息\n```\n\n- cherry-pic合并指定分支的某个提交\n<img src=\"/img/cherry.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 团队协作相关\n在公司的开发过程中，一个项目的至少有三个分支。master（线上-在跑的代码）、stagging（类似于测试）、dev（开发分支）。**大体分成两种工作方式。**\n1. 所有的开发人员，在项目中都有自己的dev分支，通常命名dev_dadadad.....。每次开发完毕后，发起合并请求，负责人合并到stagging分支进行测试。\n2. 开发人员需要fork一下项目，相当于创建一个自己私人的项目。克隆到本地后做的第一件事情，就是关联主项目。设置origin和upstream仓库地址，分别是自己的项目和主项目的地址。\n```javascript\ngit remote add upstream + 主项目代码\n```\n这样，当我们通过git remote -v命令，在控制台打印当前fork项目的远程信息时，会出现下面所示：\n```javascript\norigin  fork地址 (fetch)\norigin  fork地址 (push)\nupstream        主项目地址(fetch)\nupstream        主项目地址(push)\n```\n每次开发前，通过如下命令拉取并合并主项目dev分支的最新代码：\n```javascript\ngit pull upstream dev\n```\n**注意，上面的命令做了两件事，第一，拉去目标分支代码，第二，自动合并到当前所在分支。**","slug":"Git亲妈级教程","published":1,"updated":"2023-08-07T03:11:42.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcui000094vt4xzs2pm4","content":"<ul>\n<li><p>一般的代码提交流程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>提交到自己的分支，发起合并到dev分支的merge交由负责人审查合并代码。</p>\n<img src=\"/img/git.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>克隆分支并同步远端</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b <span class=\"string\">&#x27;分支名&#x27;</span></span><br><span class=\"line\">git push origin <span class=\"string\">&#x27;分支名&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看哪些文件被修改及修改的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地仓库与远程主机仓库关联起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin <span class=\"string\">&quot;https://github.com/kinglion580/shiyanlou.git&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何在本地给远程仓库创建一个分支？（就是远程仓库没有该分支）<br>首先需要在本地新建一个分支： git checkout -b 分支名<br>同步到远程：git push –set-upstream origin 分支名<br>然后通过命令直接push到远程：git push</p>\n</li>\n<li><p>如何在本地删除远程分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除本地分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除远程分支</span></span><br><span class=\"line\">git push origin --<span class=\"keyword\">delete</span> 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地分支和远程同步</span></span><br><span class=\"line\">git remote update upstream --prune</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有时候，我们在自己分支上写的好好的，突然需要切换到别的分支，而此时，我们又不想commit，咋办？<br><strong>git stash,可以理解为暂时保存，切换到其他分支，干完后，回到自己的分支,git stash pop，恢复</strong></p>\n</li>\n<li><p>如果代码写到一半，突然发现写错分支，该如何？<br><strong>同7类似，即，执行暂存git stash,但是随后切换到正确分支，执行git stash pop,即将自己的一波操作释放到正确的分支上了</strong></p>\n</li>\n<li><p>但我修改了一处小bug提交时，不想写个message做新的commit,转而合并最近一次提交，该如何？<br><strong>git commit –amend,包您满意，实质就是，覆盖最近一次提交</strong></p>\n</li>\n<li><p>当自己在主分支写测试代码后，没有add 和commit的情况下，想放弃在该分支上的所有修改切换回自己的分支，此种场景下，该如何？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 撤销对所有已修改但未提交的文件的修改，但不包括新增的文件</span></span><br><span class=\"line\">git checkout .</span><br><span class=\"line\"><span class=\"comment\">// 撤销对指定文件的修改，[filename]为文件名</span></span><br><span class=\"line\">git checkout [filename] </span><br></pre></td></tr></table></figure></li>\n<li><p>撤销add</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 撤销全部</span></span><br><span class=\"line\">git reset <span class=\"variable constant_\">HEAD</span> .</span><br><span class=\"line\"><span class=\"comment\">// 撤销某文件或者文件夹</span></span><br><span class=\"line\">git reset <span class=\"variable constant_\">HEAD</span> -filename</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销commit</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft <span class=\"variable constant_\">HEAD</span>~<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他常用操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 回退</span></span><br><span class=\"line\">git reset --hard git版本号 </span><br><span class=\"line\">git push -f</span><br><span class=\"line\"><span class=\"comment\">// 查看当前分支数</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"><span class=\"comment\">// 合并提交记录</span></span><br><span class=\"line\">git rebase -i <span class=\"variable constant_\">HEAD</span>~分枝数</span><br><span class=\"line\">git push -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查看本地的git配置信息</span></span><br><span class=\"line\">git config --<span class=\"variable language_\">global</span> -l</span><br><span class=\"line\">git config --list 查看所有信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cherry-pic合并指定分支的某个提交</p>\n<img src=\"/img/cherry.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>团队协作相关<br>在公司的开发过程中，一个项目的至少有三个分支。master（线上-在跑的代码）、stagging（类似于测试）、dev（开发分支）。<strong>大体分成两种工作方式。</strong></p>\n</li>\n</ul>\n<ol>\n<li>所有的开发人员，在项目中都有自己的dev分支，通常命名dev_dadadad…..。每次开发完毕后，发起合并请求，负责人合并到stagging分支进行测试。</li>\n<li>开发人员需要fork一下项目，相当于创建一个自己私人的项目。克隆到本地后做的第一件事情，就是关联主项目。设置origin和upstream仓库地址，分别是自己的项目和主项目的地址。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream + 主项目代码</span><br></pre></td></tr></table></figure>\n这样，当我们通过git remote -v命令，在控制台打印当前fork项目的远程信息时，会出现下面所示：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin  fork地址 (fetch)</span><br><span class=\"line\">origin  fork地址 (push)</span><br><span class=\"line\">upstream        主项目地址(fetch)</span><br><span class=\"line\">upstream        主项目地址(push)</span><br></pre></td></tr></table></figure>\n每次开发前，通过如下命令拉取并合并主项目dev分支的最新代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull upstream dev</span><br></pre></td></tr></table></figure>\n<strong>注意，上面的命令做了两件事，第一，拉去目标分支代码，第二，自动合并到当前所在分支。</strong></li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<ul>\n<li><p>一般的代码提交流程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>提交到自己的分支，发起合并到dev分支的merge交由负责人审查合并代码。</p>\n<img src=\"/img/git.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>克隆分支并同步远端</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b <span class=\"string\">&#x27;分支名&#x27;</span></span><br><span class=\"line\">git push origin <span class=\"string\">&#x27;分支名&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看哪些文件被修改及修改的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地仓库与远程主机仓库关联起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin <span class=\"string\">&quot;https://github.com/kinglion580/shiyanlou.git&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何在本地给远程仓库创建一个分支？（就是远程仓库没有该分支）<br>首先需要在本地新建一个分支： git checkout -b 分支名<br>同步到远程：git push –set-upstream origin 分支名<br>然后通过命令直接push到远程：git push</p>\n</li>\n<li><p>如何在本地删除远程分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除本地分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除远程分支</span></span><br><span class=\"line\">git push origin --<span class=\"keyword\">delete</span> 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地分支和远程同步</span></span><br><span class=\"line\">git remote update upstream --prune</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有时候，我们在自己分支上写的好好的，突然需要切换到别的分支，而此时，我们又不想commit，咋办？<br><strong>git stash,可以理解为暂时保存，切换到其他分支，干完后，回到自己的分支,git stash pop，恢复</strong></p>\n</li>\n<li><p>如果代码写到一半，突然发现写错分支，该如何？<br><strong>同7类似，即，执行暂存git stash,但是随后切换到正确分支，执行git stash pop,即将自己的一波操作释放到正确的分支上了</strong></p>\n</li>\n<li><p>但我修改了一处小bug提交时，不想写个message做新的commit,转而合并最近一次提交，该如何？<br><strong>git commit –amend,包您满意，实质就是，覆盖最近一次提交</strong></p>\n</li>\n<li><p>当自己在主分支写测试代码后，没有add 和commit的情况下，想放弃在该分支上的所有修改切换回自己的分支，此种场景下，该如何？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 撤销对所有已修改但未提交的文件的修改，但不包括新增的文件</span></span><br><span class=\"line\">git checkout .</span><br><span class=\"line\"><span class=\"comment\">// 撤销对指定文件的修改，[filename]为文件名</span></span><br><span class=\"line\">git checkout [filename] </span><br></pre></td></tr></table></figure></li>\n<li><p>撤销add</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 撤销全部</span></span><br><span class=\"line\">git reset <span class=\"variable constant_\">HEAD</span> .</span><br><span class=\"line\"><span class=\"comment\">// 撤销某文件或者文件夹</span></span><br><span class=\"line\">git reset <span class=\"variable constant_\">HEAD</span> -filename</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销commit</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft <span class=\"variable constant_\">HEAD</span>~<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他常用操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 回退</span></span><br><span class=\"line\">git reset --hard git版本号 </span><br><span class=\"line\">git push -f</span><br><span class=\"line\"><span class=\"comment\">// 查看当前分支数</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"><span class=\"comment\">// 合并提交记录</span></span><br><span class=\"line\">git rebase -i <span class=\"variable constant_\">HEAD</span>~分枝数</span><br><span class=\"line\">git push -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查看本地的git配置信息</span></span><br><span class=\"line\">git config --<span class=\"variable language_\">global</span> -l</span><br><span class=\"line\">git config --list 查看所有信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cherry-pic合并指定分支的某个提交</p>\n<img src=\"/img/cherry.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>团队协作相关<br>在公司的开发过程中，一个项目的至少有三个分支。master（线上-在跑的代码）、stagging（类似于测试）、dev（开发分支）。<strong>大体分成两种工作方式。</strong></p>\n</li>\n</ul>\n<ol>\n<li>所有的开发人员，在项目中都有自己的dev分支，通常命名dev_dadadad…..。每次开发完毕后，发起合并请求，负责人合并到stagging分支进行测试。</li>\n<li>开发人员需要fork一下项目，相当于创建一个自己私人的项目。克隆到本地后做的第一件事情，就是关联主项目。设置origin和upstream仓库地址，分别是自己的项目和主项目的地址。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream + 主项目代码</span><br></pre></td></tr></table></figure>\n这样，当我们通过git remote -v命令，在控制台打印当前fork项目的远程信息时，会出现下面所示：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin  fork地址 (fetch)</span><br><span class=\"line\">origin  fork地址 (push)</span><br><span class=\"line\">upstream        主项目地址(fetch)</span><br><span class=\"line\">upstream        主项目地址(push)</span><br></pre></td></tr></table></figure>\n每次开发前，通过如下命令拉取并合并主项目dev分支的最新代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull upstream dev</span><br></pre></td></tr></table></figure>\n<strong>注意，上面的命令做了两件事，第一，拉去目标分支代码，第二，自动合并到当前所在分支。</strong></li>\n</ol>\n"},{"title":"HTTP版本演进：第二回","date":"2023-08-02T15:31:45.000Z","_content":"**续前文，本文将详细的介绍一下1.x版本的特性，主要就是1.1啦。**\n\n## 1.x版本的三个特点：\n- 长连接\n- 管道化\n- 串行传输\n\n#### 长连接\n1.0版本遵循的规则是：建立链路--发送请求--接收响应--断开链路。对于每一个请求而言，1.5个rtt（往返时延）是必须的。假使我们现在有n个请求，那么固定的时耗就是1.5 * n。那么1.1的重大改进，就是利用长连接，实现了多个请求共用一个TCP连接通道。这样除了第一个请求外，对于后面的每个请求，都能省去用于建立链路的1个rtt耗时，即：我们能够节省（n-1）次的rtt（往返时延）。这就是长连接带来的好处。\n\n插个题外话：我们知道，c端在发送资源请求之前，需要通过三次握手建立连接链路，时间损耗，就用掉了1.5个往返，这里有个细节我之前一直没在意。就是发送资源请求的时间点与建立连接的那最后0.5的往返时刻是同时发生的，可以理解为，1.5的往返耗时，包含了请求时间，见下图：\n<img src=\"/img/http3.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n同时，通过上图，也能看出，为什么1.1版本的改进影响巨大。著名案例就是苹果的工程师们针对itunes的改进，有兴趣自行谷歌。\n\n但是，通过长连接虽然实现了公用tcp链路，我们发现了新的问题，因为规则，仍然是第二个请求必须等待第一个请求的响应返回之后，才能发出。如此一来，当s端返回第一个请求的响应后直到第二个请求到达前的这段时间，都是处于空闲状态。这就叫c端的响应阻塞。我们希望的是，s端能够在处理完第一个请求发出响应后，立刻开始处理第二个请求，甚至，可以并行处理多个请求，怎么破？具体实践方法：管道化。\n\n#### 管道化。\n1.1版本之前，每次请求都需要等待上次请求的响应返回才能发出，1.1版本开始实现了无需等待，对于c端的改动，就是无需等待串行发送请求，到达s端就是一个队列，s端能够挨个取出请求发出响应或者开启多线程并行处理，直至队列空。这样，能够一定程度上的充分利用s端的处理能力。这就是管道化。\n\n<img src=\"/img/http4.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n共用一个tcp链路的情况下，c端先后发送html和css的请求。从图中发现，当s端返回html请求的响应后，一直处于空闲状态，直到css请求到达才开始处理。\n\n<img src=\"/img/http5.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n**使用了管道化，c端串行发出请求，s端并行处理请求串行返回。理论上讲，通过长连接节省（n-1）个rtt基础上，再次节省了（n-1）个rtt。**\n\n但是，由于http1.x协议本身的局限性，严格规定执行串行传输的策略，串型传输就是先进先出，对c端而言，请求必须依次发出。对s端而言即使后到的请求率先处理完成，也得等待。他不允许一个连接上的多个相应交错到达（多路复用）。这就导致了一个问题：倘若c端并行发送了两个请求：一个请求html，另一个请求了css。s端也能够并行的处理请求，css文件20ms完成，html40ms完成，那么在css完成的时候，她不能直接返回，而是要再等待20ms，即html请求处理完成后，再吧css的响应发出。这就叫队首阻塞。\n\n怎么破？\n\n- 并行tcp发送请求。\n- http2.0多路复用。\n后文详解，敬请期待。","source":"_posts/HTTP版本演进：第二回.md","raw":"---\ntitle: HTTP版本演进：第二回\ncategory: 网络杂谈\ndate: 2023-08-02 23:31:45\ntags:\n---\n**续前文，本文将详细的介绍一下1.x版本的特性，主要就是1.1啦。**\n\n## 1.x版本的三个特点：\n- 长连接\n- 管道化\n- 串行传输\n\n#### 长连接\n1.0版本遵循的规则是：建立链路--发送请求--接收响应--断开链路。对于每一个请求而言，1.5个rtt（往返时延）是必须的。假使我们现在有n个请求，那么固定的时耗就是1.5 * n。那么1.1的重大改进，就是利用长连接，实现了多个请求共用一个TCP连接通道。这样除了第一个请求外，对于后面的每个请求，都能省去用于建立链路的1个rtt耗时，即：我们能够节省（n-1）次的rtt（往返时延）。这就是长连接带来的好处。\n\n插个题外话：我们知道，c端在发送资源请求之前，需要通过三次握手建立连接链路，时间损耗，就用掉了1.5个往返，这里有个细节我之前一直没在意。就是发送资源请求的时间点与建立连接的那最后0.5的往返时刻是同时发生的，可以理解为，1.5的往返耗时，包含了请求时间，见下图：\n<img src=\"/img/http3.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n同时，通过上图，也能看出，为什么1.1版本的改进影响巨大。著名案例就是苹果的工程师们针对itunes的改进，有兴趣自行谷歌。\n\n但是，通过长连接虽然实现了公用tcp链路，我们发现了新的问题，因为规则，仍然是第二个请求必须等待第一个请求的响应返回之后，才能发出。如此一来，当s端返回第一个请求的响应后直到第二个请求到达前的这段时间，都是处于空闲状态。这就叫c端的响应阻塞。我们希望的是，s端能够在处理完第一个请求发出响应后，立刻开始处理第二个请求，甚至，可以并行处理多个请求，怎么破？具体实践方法：管道化。\n\n#### 管道化。\n1.1版本之前，每次请求都需要等待上次请求的响应返回才能发出，1.1版本开始实现了无需等待，对于c端的改动，就是无需等待串行发送请求，到达s端就是一个队列，s端能够挨个取出请求发出响应或者开启多线程并行处理，直至队列空。这样，能够一定程度上的充分利用s端的处理能力。这就是管道化。\n\n<img src=\"/img/http4.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n共用一个tcp链路的情况下，c端先后发送html和css的请求。从图中发现，当s端返回html请求的响应后，一直处于空闲状态，直到css请求到达才开始处理。\n\n<img src=\"/img/http5.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n**使用了管道化，c端串行发出请求，s端并行处理请求串行返回。理论上讲，通过长连接节省（n-1）个rtt基础上，再次节省了（n-1）个rtt。**\n\n但是，由于http1.x协议本身的局限性，严格规定执行串行传输的策略，串型传输就是先进先出，对c端而言，请求必须依次发出。对s端而言即使后到的请求率先处理完成，也得等待。他不允许一个连接上的多个相应交错到达（多路复用）。这就导致了一个问题：倘若c端并行发送了两个请求：一个请求html，另一个请求了css。s端也能够并行的处理请求，css文件20ms完成，html40ms完成，那么在css完成的时候，她不能直接返回，而是要再等待20ms，即html请求处理完成后，再吧css的响应发出。这就叫队首阻塞。\n\n怎么破？\n\n- 并行tcp发送请求。\n- http2.0多路复用。\n后文详解，敬请期待。","slug":"HTTP版本演进：第二回","published":1,"updated":"2023-08-04T02:15:17.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcun000194vt45si5eh4","content":"<p><strong>续前文，本文将详细的介绍一下1.x版本的特性，主要就是1.1啦。</strong></p>\n<h2 id=\"1-x版本的三个特点：\"><a href=\"#1-x版本的三个特点：\" class=\"headerlink\" title=\"1.x版本的三个特点：\"></a>1.x版本的三个特点：</h2><ul>\n<li>长连接</li>\n<li>管道化</li>\n<li>串行传输</li>\n</ul>\n<h4 id=\"长连接\"><a href=\"#长连接\" class=\"headerlink\" title=\"长连接\"></a>长连接</h4><p>1.0版本遵循的规则是：建立链路–发送请求–接收响应–断开链路。对于每一个请求而言，1.5个rtt（往返时延）是必须的。假使我们现在有n个请求，那么固定的时耗就是1.5 * n。那么1.1的重大改进，就是利用长连接，实现了多个请求共用一个TCP连接通道。这样除了第一个请求外，对于后面的每个请求，都能省去用于建立链路的1个rtt耗时，即：我们能够节省（n-1）次的rtt（往返时延）。这就是长连接带来的好处。</p>\n<p>插个题外话：我们知道，c端在发送资源请求之前，需要通过三次握手建立连接链路，时间损耗，就用掉了1.5个往返，这里有个细节我之前一直没在意。就是发送资源请求的时间点与建立连接的那最后0.5的往返时刻是同时发生的，可以理解为，1.5的往返耗时，包含了请求时间，见下图：<br><img src=\"/img/http3.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"></p>\n<p>同时，通过上图，也能看出，为什么1.1版本的改进影响巨大。著名案例就是苹果的工程师们针对itunes的改进，有兴趣自行谷歌。</p>\n<p>但是，通过长连接虽然实现了公用tcp链路，我们发现了新的问题，因为规则，仍然是第二个请求必须等待第一个请求的响应返回之后，才能发出。如此一来，当s端返回第一个请求的响应后直到第二个请求到达前的这段时间，都是处于空闲状态。这就叫c端的响应阻塞。我们希望的是，s端能够在处理完第一个请求发出响应后，立刻开始处理第二个请求，甚至，可以并行处理多个请求，怎么破？具体实践方法：管道化。</p>\n<h4 id=\"管道化。\"><a href=\"#管道化。\" class=\"headerlink\" title=\"管道化。\"></a>管道化。</h4><p>1.1版本之前，每次请求都需要等待上次请求的响应返回才能发出，1.1版本开始实现了无需等待，对于c端的改动，就是无需等待串行发送请求，到达s端就是一个队列，s端能够挨个取出请求发出响应或者开启多线程并行处理，直至队列空。这样，能够一定程度上的充分利用s端的处理能力。这就是管道化。</p>\n<img src=\"/img/http4.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n共用一个tcp链路的情况下，c端先后发送html和css的请求。从图中发现，当s端返回html请求的响应后，一直处于空闲状态，直到css请求到达才开始处理。\n\n<img src=\"/img/http5.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n**使用了管道化，c端串行发出请求，s端并行处理请求串行返回。理论上讲，通过长连接节省（n-1）个rtt基础上，再次节省了（n-1）个rtt。**\n\n<p>但是，由于http1.x协议本身的局限性，严格规定执行串行传输的策略，串型传输就是先进先出，对c端而言，请求必须依次发出。对s端而言即使后到的请求率先处理完成，也得等待。他不允许一个连接上的多个相应交错到达（多路复用）。这就导致了一个问题：倘若c端并行发送了两个请求：一个请求html，另一个请求了css。s端也能够并行的处理请求，css文件20ms完成，html40ms完成，那么在css完成的时候，她不能直接返回，而是要再等待20ms，即html请求处理完成后，再吧css的响应发出。这就叫队首阻塞。</p>\n<p>怎么破？</p>\n<ul>\n<li>并行tcp发送请求。</li>\n<li>http2.0多路复用。<br>后文详解，敬请期待。</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>续前文，本文将详细的介绍一下1.x版本的特性，主要就是1.1啦。</strong></p>\n<h2 id=\"1-x版本的三个特点：\"><a href=\"#1-x版本的三个特点：\" class=\"headerlink\" title=\"1.x版本的三个特点：\"></a>1.x版本的三个特点：</h2><ul>\n<li>长连接</li>\n<li>管道化</li>\n<li>串行传输</li>\n</ul>\n<h4 id=\"长连接\"><a href=\"#长连接\" class=\"headerlink\" title=\"长连接\"></a>长连接</h4><p>1.0版本遵循的规则是：建立链路–发送请求–接收响应–断开链路。对于每一个请求而言，1.5个rtt（往返时延）是必须的。假使我们现在有n个请求，那么固定的时耗就是1.5 * n。那么1.1的重大改进，就是利用长连接，实现了多个请求共用一个TCP连接通道。这样除了第一个请求外，对于后面的每个请求，都能省去用于建立链路的1个rtt耗时，即：我们能够节省（n-1）次的rtt（往返时延）。这就是长连接带来的好处。</p>\n<p>插个题外话：我们知道，c端在发送资源请求之前，需要通过三次握手建立连接链路，时间损耗，就用掉了1.5个往返，这里有个细节我之前一直没在意。就是发送资源请求的时间点与建立连接的那最后0.5的往返时刻是同时发生的，可以理解为，1.5的往返耗时，包含了请求时间，见下图：<br><img src=\"/img/http3.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"></p>\n<p>同时，通过上图，也能看出，为什么1.1版本的改进影响巨大。著名案例就是苹果的工程师们针对itunes的改进，有兴趣自行谷歌。</p>\n<p>但是，通过长连接虽然实现了公用tcp链路，我们发现了新的问题，因为规则，仍然是第二个请求必须等待第一个请求的响应返回之后，才能发出。如此一来，当s端返回第一个请求的响应后直到第二个请求到达前的这段时间，都是处于空闲状态。这就叫c端的响应阻塞。我们希望的是，s端能够在处理完第一个请求发出响应后，立刻开始处理第二个请求，甚至，可以并行处理多个请求，怎么破？具体实践方法：管道化。</p>\n<h4 id=\"管道化。\"><a href=\"#管道化。\" class=\"headerlink\" title=\"管道化。\"></a>管道化。</h4><p>1.1版本之前，每次请求都需要等待上次请求的响应返回才能发出，1.1版本开始实现了无需等待，对于c端的改动，就是无需等待串行发送请求，到达s端就是一个队列，s端能够挨个取出请求发出响应或者开启多线程并行处理，直至队列空。这样，能够一定程度上的充分利用s端的处理能力。这就是管道化。</p>\n<img src=\"/img/http4.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n共用一个tcp链路的情况下，c端先后发送html和css的请求。从图中发现，当s端返回html请求的响应后，一直处于空闲状态，直到css请求到达才开始处理。\n\n<img src=\"/img/http5.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n**使用了管道化，c端串行发出请求，s端并行处理请求串行返回。理论上讲，通过长连接节省（n-1）个rtt基础上，再次节省了（n-1）个rtt。**\n\n<p>但是，由于http1.x协议本身的局限性，严格规定执行串行传输的策略，串型传输就是先进先出，对c端而言，请求必须依次发出。对s端而言即使后到的请求率先处理完成，也得等待。他不允许一个连接上的多个相应交错到达（多路复用）。这就导致了一个问题：倘若c端并行发送了两个请求：一个请求html，另一个请求了css。s端也能够并行的处理请求，css文件20ms完成，html40ms完成，那么在css完成的时候，她不能直接返回，而是要再等待20ms，即html请求处理完成后，再吧css的响应发出。这就叫队首阻塞。</p>\n<p>怎么破？</p>\n<ul>\n<li>并行tcp发送请求。</li>\n<li>http2.0多路复用。<br>后文详解，敬请期待。</li>\n</ul>\n"},{"title":"JS类型详论","date":"2023-08-03T06:47:06.000Z","_content":"**本文主旨： 极尽一切可能的，详细介绍js类型相关内容**\n\n### 主要数据类型两类\n- 基本类型： 变量存储值\n数字、布尔、undefined、null、字符串、Symbol\n- 引用类型：变量存储地址，类似于c语言中的指针\n函数、数组、对象\n\n### 判断数据类型\n1. typeof： 能够判断除了null和数组的所有数据类型\n```javascript\nconsole.log(typeof 'a')\nconsole.log(typeof true)\nconsole.log(typeof Symbol())\nconsole.log(typeof undefined)\nconsole.log(typeof null)\nconsole.log(typeof {})\nconsole.log(typeof function() {})\nconsole.log(typeof [])\n// 结果\nstring\nboolean\nsymbol\nundefined\nobject\nobject\nfunction\nobject\n```\n\n2. instanceof: 实话讲，该方法用的并不多，因为他明显没有typeof用的舒服，且他并不是用来做类型判断的。判断一个对象是否为另一个构造函数的实例。那么因为数组既是对象类型也是数组类型，因此，下面代码均会返回true\n```javascript\n    console.log(a instanceof Object)\n    console.log(a instanceof Array)\n```\n\n3. constructor: 判断变量的构造器\n```javascript\nconsole.log('a'.constructor)\nconsole.log(true.constructor)\nconsole.log(Symbol().constructor)\n// console.log(undefined.constructor)\n// console.log(null.constructor)\nconsole.log({}.constructor)\nconsole.log(function() {}.constructor)\nconsole.log([].constructor)\n// 结果\n[Function: String]\n[Function: Boolean]\n[Function: Symbol]\n[Function: Object]\n[Function: Function]\n[Function: Array] //打印出来等同于 Array\n除了undefined和null没有constructor，其他均打印出了各自的原型对象，包括数组。\n```\n4. Object.prototype.toString.call: 该方法最为彻底。能够打印变量的真实原型对象\n```javascript\nconsole.log(Object.prototype.toString.call('123'))\nconsole.log(Object.prototype.toString.call(123))\nconsole.log(Object.prototype.toString.call(true))\nconsole.log(Object.prototype.toString.call(undefined))\nconsole.log(Object.prototype.toString.call(null))\nconsole.log(Object.prototype.toString.call(Symbol(123)))\nconsole.log(Object.prototype.toString.call(function() {}))\nconsole.log(Object.prototype.toString.call([1, 2, 3, 4]))\nconsole.log(Object.prototype.toString.call({}))\n// 结果\n[object String]\n[object Number]\n[object Boolean]\n[object Undefined]\n[object Null]\n[object Symbol]\n[object Function]\n[object Array]\n[object Object]\n```\n**总结**：typeof最为便捷，若要判断数组，可以用constructor、tostring和Array.isArray(item)、instance方法。关于null，可以使用if(typeof x !== undefined && !x)结合判断。\n\n5. 事实上上面我们列举的九种数据类型并不是全部。比如还有类数组（能够像数组哪像通过下标获取值，也有length就是没有数组的那些api），NaN（一种不知道为何存在的值， (NaN === NaN) 输出false）等。同时还有与ts的强类型加持，还有什么any、never等等等。\n\n6. 以为精通了数据类型？来小试牛刀一下：\n```javascript\nlet x = '123'\nconsole.log(x instanceof String)\n```\n猜一猜输出会是啥？\n答案是false。原因我们之前说过，instanceof方法是用来判断一个对象是否为另一个构造函数的实例。那么此处怎么让他输出true呢？很简单：\nlet x = new String('123')\n\n7. js中值为false的情况：\n数字0、false、undefined、null、NaN和空字符串''。注意是空字符串，哪怕多一个空格字符都不行。\n\n8. console.log('3' + 3)的输出是啥？\n'33'。js会默认将数字3转换成字符串。\n\n9. 又觉得自己很懂了？再来看一个例子：\n```javascript\n  // jsone.js\n  import { change } from './jstwo'\n\n  let obj = {\n    name: 'hhvcg'\n  }\n  change(obj)\n  console.log('obj:', obj)\n\n// jstwo.js\n  const change = (obj) => {\n      obj.name = 'chnaged'\n      return 1\n  }\n\n  export { change }\n  // 输出：\n  obj: {name: 'chnaged'}\n```\n有没有被无语到。。。。。。\n\n事实上，通过本文上面的知识，这种情况我们已经能够解释，因为obj是一个对象，可以看成是指针，把这个对象通过参数传递出去，在change中做的改变就是改变的原来的obj，因为不管change定义的参数名是啥，他都是跟obj一样的指针，指向的是同一个数据。\n**但是，我必须说但是，这种骚操作，实在让我暂时无法接受。我想，学过c/c++或者其他主流语言的同学，看到这一幕，可能会一脸懵逼吧。。。这个东西类似于c语言中的指针，但是，也太随便了。**\n\n10. 最后一点补充： 对象的属性值判断方法。\n\nin和hasOwnProperty都可以用来判断一个属性是否在对象中存在但是，前者能够判断自有属性和原型属性，而后者，只专注于自有属性。所以，hasOwnProperty更加的专业。自行测试下面代码。\n```javascript\nconst obj = {\n  name: 'dddd'\n}\nconsole.log(obj.hasOwnProperty('constructor'))\nconsole.log('constructor' in obj)\n```\n\n### js的深拷贝与浅拷贝\n这个话题是因为引用类型触发的。所谓深拷贝，就是完全复制，而浅拷贝，可以理解为一枚硬币的正反两面，无论是正面还是反面，指定对象都是这枚硬币。\n最最简单粗暴的深拷贝：JSON的序列化反序列化大法。","source":"_posts/JS类型详论.md","raw":"---\ntitle: JS类型详论\ncategory: 大前端气宗专栏\ndate: 2023-08-03 14:47:06\ntags:\n---\n**本文主旨： 极尽一切可能的，详细介绍js类型相关内容**\n\n### 主要数据类型两类\n- 基本类型： 变量存储值\n数字、布尔、undefined、null、字符串、Symbol\n- 引用类型：变量存储地址，类似于c语言中的指针\n函数、数组、对象\n\n### 判断数据类型\n1. typeof： 能够判断除了null和数组的所有数据类型\n```javascript\nconsole.log(typeof 'a')\nconsole.log(typeof true)\nconsole.log(typeof Symbol())\nconsole.log(typeof undefined)\nconsole.log(typeof null)\nconsole.log(typeof {})\nconsole.log(typeof function() {})\nconsole.log(typeof [])\n// 结果\nstring\nboolean\nsymbol\nundefined\nobject\nobject\nfunction\nobject\n```\n\n2. instanceof: 实话讲，该方法用的并不多，因为他明显没有typeof用的舒服，且他并不是用来做类型判断的。判断一个对象是否为另一个构造函数的实例。那么因为数组既是对象类型也是数组类型，因此，下面代码均会返回true\n```javascript\n    console.log(a instanceof Object)\n    console.log(a instanceof Array)\n```\n\n3. constructor: 判断变量的构造器\n```javascript\nconsole.log('a'.constructor)\nconsole.log(true.constructor)\nconsole.log(Symbol().constructor)\n// console.log(undefined.constructor)\n// console.log(null.constructor)\nconsole.log({}.constructor)\nconsole.log(function() {}.constructor)\nconsole.log([].constructor)\n// 结果\n[Function: String]\n[Function: Boolean]\n[Function: Symbol]\n[Function: Object]\n[Function: Function]\n[Function: Array] //打印出来等同于 Array\n除了undefined和null没有constructor，其他均打印出了各自的原型对象，包括数组。\n```\n4. Object.prototype.toString.call: 该方法最为彻底。能够打印变量的真实原型对象\n```javascript\nconsole.log(Object.prototype.toString.call('123'))\nconsole.log(Object.prototype.toString.call(123))\nconsole.log(Object.prototype.toString.call(true))\nconsole.log(Object.prototype.toString.call(undefined))\nconsole.log(Object.prototype.toString.call(null))\nconsole.log(Object.prototype.toString.call(Symbol(123)))\nconsole.log(Object.prototype.toString.call(function() {}))\nconsole.log(Object.prototype.toString.call([1, 2, 3, 4]))\nconsole.log(Object.prototype.toString.call({}))\n// 结果\n[object String]\n[object Number]\n[object Boolean]\n[object Undefined]\n[object Null]\n[object Symbol]\n[object Function]\n[object Array]\n[object Object]\n```\n**总结**：typeof最为便捷，若要判断数组，可以用constructor、tostring和Array.isArray(item)、instance方法。关于null，可以使用if(typeof x !== undefined && !x)结合判断。\n\n5. 事实上上面我们列举的九种数据类型并不是全部。比如还有类数组（能够像数组哪像通过下标获取值，也有length就是没有数组的那些api），NaN（一种不知道为何存在的值， (NaN === NaN) 输出false）等。同时还有与ts的强类型加持，还有什么any、never等等等。\n\n6. 以为精通了数据类型？来小试牛刀一下：\n```javascript\nlet x = '123'\nconsole.log(x instanceof String)\n```\n猜一猜输出会是啥？\n答案是false。原因我们之前说过，instanceof方法是用来判断一个对象是否为另一个构造函数的实例。那么此处怎么让他输出true呢？很简单：\nlet x = new String('123')\n\n7. js中值为false的情况：\n数字0、false、undefined、null、NaN和空字符串''。注意是空字符串，哪怕多一个空格字符都不行。\n\n8. console.log('3' + 3)的输出是啥？\n'33'。js会默认将数字3转换成字符串。\n\n9. 又觉得自己很懂了？再来看一个例子：\n```javascript\n  // jsone.js\n  import { change } from './jstwo'\n\n  let obj = {\n    name: 'hhvcg'\n  }\n  change(obj)\n  console.log('obj:', obj)\n\n// jstwo.js\n  const change = (obj) => {\n      obj.name = 'chnaged'\n      return 1\n  }\n\n  export { change }\n  // 输出：\n  obj: {name: 'chnaged'}\n```\n有没有被无语到。。。。。。\n\n事实上，通过本文上面的知识，这种情况我们已经能够解释，因为obj是一个对象，可以看成是指针，把这个对象通过参数传递出去，在change中做的改变就是改变的原来的obj，因为不管change定义的参数名是啥，他都是跟obj一样的指针，指向的是同一个数据。\n**但是，我必须说但是，这种骚操作，实在让我暂时无法接受。我想，学过c/c++或者其他主流语言的同学，看到这一幕，可能会一脸懵逼吧。。。这个东西类似于c语言中的指针，但是，也太随便了。**\n\n10. 最后一点补充： 对象的属性值判断方法。\n\nin和hasOwnProperty都可以用来判断一个属性是否在对象中存在但是，前者能够判断自有属性和原型属性，而后者，只专注于自有属性。所以，hasOwnProperty更加的专业。自行测试下面代码。\n```javascript\nconst obj = {\n  name: 'dddd'\n}\nconsole.log(obj.hasOwnProperty('constructor'))\nconsole.log('constructor' in obj)\n```\n\n### js的深拷贝与浅拷贝\n这个话题是因为引用类型触发的。所谓深拷贝，就是完全复制，而浅拷贝，可以理解为一枚硬币的正反两面，无论是正面还是反面，指定对象都是这枚硬币。\n最最简单粗暴的深拷贝：JSON的序列化反序列化大法。","slug":"JS类型详论","published":1,"updated":"2023-08-07T03:11:32.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcuq000394vt57fuarzg","content":"<p><strong>本文主旨： 极尽一切可能的，详细介绍js类型相关内容</strong></p>\n<h3 id=\"主要数据类型两类\"><a href=\"#主要数据类型两类\" class=\"headerlink\" title=\"主要数据类型两类\"></a>主要数据类型两类</h3><ul>\n<li>基本类型： 变量存储值<br>数字、布尔、undefined、null、字符串、Symbol</li>\n<li>引用类型：变量存储地址，类似于c语言中的指针<br>函数、数组、对象</li>\n</ul>\n<h3 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h3><ol>\n<li><p>typeof： 能够判断除了null和数组的所有数据类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>())</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> [])</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\">string</span><br><span class=\"line\">boolean</span><br><span class=\"line\">symbol</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">object</span><br><span class=\"line\">object</span><br><span class=\"line\"><span class=\"keyword\">function</span></span><br><span class=\"line\">object</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>instanceof: 实话讲，该方法用的并不多，因为他明显没有typeof用的舒服，且他并不是用来做类型判断的。判断一个对象是否为另一个构造函数的实例。那么因为数组既是对象类型也是数组类型，因此，下面代码均会返回true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>constructor: 判断变量的构造器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span>.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span>.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Symbol</span>().<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"comment\">// console.log(undefined.constructor)</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(null.constructor)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125;.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([].<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">String</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Boolean</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Symbol</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Object</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Function</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Array</span>] <span class=\"comment\">//打印出来等同于 Array</span></span><br><span class=\"line\">除了<span class=\"literal\">undefined</span>和<span class=\"literal\">null</span>没有constructor，其他均打印出了各自的原型对象，包括数组。</span><br></pre></td></tr></table></figure></li>\n<li><p>Object.prototype.toString.call: 该方法最为彻底。能够打印变量的真实原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;123&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">123</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"title class_\">Symbol</span>(<span class=\"number\">123</span>)))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123;&#125;))</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\">[object <span class=\"title class_\">String</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Number</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Boolean</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Undefined</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Null</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Symbol</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Function</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Array</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Object</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>：typeof最为便捷，若要判断数组，可以用constructor、tostring和Array.isArray(item)、instance方法。关于null，可以使用if(typeof x !&#x3D;&#x3D; undefined &amp;&amp; !x)结合判断。</p>\n</li>\n<li><p>事实上上面我们列举的九种数据类型并不是全部。比如还有类数组（能够像数组哪像通过下标获取值，也有length就是没有数组的那些api），NaN（一种不知道为何存在的值， (NaN &#x3D;&#x3D;&#x3D; NaN) 输出false）等。同时还有与ts的强类型加持，还有什么any、never等等等。</p>\n</li>\n<li><p>以为精通了数据类型？来小试牛刀一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>)</span><br></pre></td></tr></table></figure>\n<p>猜一猜输出会是啥？<br>答案是false。原因我们之前说过，instanceof方法是用来判断一个对象是否为另一个构造函数的实例。那么此处怎么让他输出true呢？很简单：<br>let x &#x3D; new String(‘123’)</p>\n</li>\n<li><p>js中值为false的情况：<br>数字0、false、undefined、null、NaN和空字符串’’。注意是空字符串，哪怕多一个空格字符都不行。</p>\n</li>\n<li><p>console.log(‘3’ + 3)的输出是啥？<br>‘33’。js会默认将数字3转换成字符串。</p>\n</li>\n<li><p>又觉得自己很懂了？再来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// jsone.js</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; change &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./jstwo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">change</span>(obj)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj:&#x27;</span>, obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jstwo.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">change</span> = (<span class=\"params\">obj</span>) =&gt; &#123;</span><br><span class=\"line\">      obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;chnaged&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> &#123; change &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 输出：</span></span><br><span class=\"line\">  <span class=\"attr\">obj</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chnaged&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>有没有被无语到。。。。。。</p>\n</li>\n</ol>\n<p>事实上，通过本文上面的知识，这种情况我们已经能够解释，因为obj是一个对象，可以看成是指针，把这个对象通过参数传递出去，在change中做的改变就是改变的原来的obj，因为不管change定义的参数名是啥，他都是跟obj一样的指针，指向的是同一个数据。<br><strong>但是，我必须说但是，这种骚操作，实在让我暂时无法接受。我想，学过c&#x2F;c++或者其他主流语言的同学，看到这一幕，可能会一脸懵逼吧。。。这个东西类似于c语言中的指针，但是，也太随便了。</strong></p>\n<ol start=\"10\">\n<li>最后一点补充： 对象的属性值判断方法。</li>\n</ol>\n<p>in和hasOwnProperty都可以用来判断一个属性是否在对象中存在但是，前者能够判断自有属性和原型属性，而后者，只专注于自有属性。所以，hasOwnProperty更加的专业。自行测试下面代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dddd&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;constructor&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;constructor&#x27;</span> <span class=\"keyword\">in</span> obj)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js的深拷贝与浅拷贝\"><a href=\"#js的深拷贝与浅拷贝\" class=\"headerlink\" title=\"js的深拷贝与浅拷贝\"></a>js的深拷贝与浅拷贝</h3><p>这个话题是因为引用类型触发的。所谓深拷贝，就是完全复制，而浅拷贝，可以理解为一枚硬币的正反两面，无论是正面还是反面，指定对象都是这枚硬币。<br>最最简单粗暴的深拷贝：JSON的序列化反序列化大法。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本文主旨： 极尽一切可能的，详细介绍js类型相关内容</strong></p>\n<h3 id=\"主要数据类型两类\"><a href=\"#主要数据类型两类\" class=\"headerlink\" title=\"主要数据类型两类\"></a>主要数据类型两类</h3><ul>\n<li>基本类型： 变量存储值<br>数字、布尔、undefined、null、字符串、Symbol</li>\n<li>引用类型：变量存储地址，类似于c语言中的指针<br>函数、数组、对象</li>\n</ul>\n<h3 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h3><ol>\n<li><p>typeof： 能够判断除了null和数组的所有数据类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>())</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> [])</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\">string</span><br><span class=\"line\">boolean</span><br><span class=\"line\">symbol</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">object</span><br><span class=\"line\">object</span><br><span class=\"line\"><span class=\"keyword\">function</span></span><br><span class=\"line\">object</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>instanceof: 实话讲，该方法用的并不多，因为他明显没有typeof用的舒服，且他并不是用来做类型判断的。判断一个对象是否为另一个构造函数的实例。那么因为数组既是对象类型也是数组类型，因此，下面代码均会返回true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>constructor: 判断变量的构造器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span>.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span>.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Symbol</span>().<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"comment\">// console.log(undefined.constructor)</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(null.constructor)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125;.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;.<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([].<span class=\"property\">constructor</span>)</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">String</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Boolean</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Symbol</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Object</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Function</span>]</span><br><span class=\"line\">[<span class=\"title class_\">Function</span>: <span class=\"title class_\">Array</span>] <span class=\"comment\">//打印出来等同于 Array</span></span><br><span class=\"line\">除了<span class=\"literal\">undefined</span>和<span class=\"literal\">null</span>没有constructor，其他均打印出了各自的原型对象，包括数组。</span><br></pre></td></tr></table></figure></li>\n<li><p>Object.prototype.toString.call: 该方法最为彻底。能够打印变量的真实原型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;123&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">123</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"title class_\">Symbol</span>(<span class=\"number\">123</span>)))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123;&#125;))</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\">[object <span class=\"title class_\">String</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Number</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Boolean</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Undefined</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Null</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Symbol</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Function</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Array</span>]</span><br><span class=\"line\">[object <span class=\"title class_\">Object</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>：typeof最为便捷，若要判断数组，可以用constructor、tostring和Array.isArray(item)、instance方法。关于null，可以使用if(typeof x !&#x3D;&#x3D; undefined &amp;&amp; !x)结合判断。</p>\n</li>\n<li><p>事实上上面我们列举的九种数据类型并不是全部。比如还有类数组（能够像数组哪像通过下标获取值，也有length就是没有数组的那些api），NaN（一种不知道为何存在的值， (NaN &#x3D;&#x3D;&#x3D; NaN) 输出false）等。同时还有与ts的强类型加持，还有什么any、never等等等。</p>\n</li>\n<li><p>以为精通了数据类型？来小试牛刀一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>)</span><br></pre></td></tr></table></figure>\n<p>猜一猜输出会是啥？<br>答案是false。原因我们之前说过，instanceof方法是用来判断一个对象是否为另一个构造函数的实例。那么此处怎么让他输出true呢？很简单：<br>let x &#x3D; new String(‘123’)</p>\n</li>\n<li><p>js中值为false的情况：<br>数字0、false、undefined、null、NaN和空字符串’’。注意是空字符串，哪怕多一个空格字符都不行。</p>\n</li>\n<li><p>console.log(‘3’ + 3)的输出是啥？<br>‘33’。js会默认将数字3转换成字符串。</p>\n</li>\n<li><p>又觉得自己很懂了？再来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// jsone.js</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; change &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./jstwo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">change</span>(obj)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj:&#x27;</span>, obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jstwo.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">change</span> = (<span class=\"params\">obj</span>) =&gt; &#123;</span><br><span class=\"line\">      obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;chnaged&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> &#123; change &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 输出：</span></span><br><span class=\"line\">  <span class=\"attr\">obj</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chnaged&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>有没有被无语到。。。。。。</p>\n</li>\n</ol>\n<p>事实上，通过本文上面的知识，这种情况我们已经能够解释，因为obj是一个对象，可以看成是指针，把这个对象通过参数传递出去，在change中做的改变就是改变的原来的obj，因为不管change定义的参数名是啥，他都是跟obj一样的指针，指向的是同一个数据。<br><strong>但是，我必须说但是，这种骚操作，实在让我暂时无法接受。我想，学过c&#x2F;c++或者其他主流语言的同学，看到这一幕，可能会一脸懵逼吧。。。这个东西类似于c语言中的指针，但是，也太随便了。</strong></p>\n<ol start=\"10\">\n<li>最后一点补充： 对象的属性值判断方法。</li>\n</ol>\n<p>in和hasOwnProperty都可以用来判断一个属性是否在对象中存在但是，前者能够判断自有属性和原型属性，而后者，只专注于自有属性。所以，hasOwnProperty更加的专业。自行测试下面代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dddd&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;constructor&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;constructor&#x27;</span> <span class=\"keyword\">in</span> obj)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js的深拷贝与浅拷贝\"><a href=\"#js的深拷贝与浅拷贝\" class=\"headerlink\" title=\"js的深拷贝与浅拷贝\"></a>js的深拷贝与浅拷贝</h3><p>这个话题是因为引用类型触发的。所谓深拷贝，就是完全复制，而浅拷贝，可以理解为一枚硬币的正反两面，无论是正面还是反面，指定对象都是这枚硬币。<br>最最简单粗暴的深拷贝：JSON的序列化反序列化大法。</p>\n"},{"title":"HTTP版本演进：第一回","date":"2023-08-02T15:02:20.000Z","_content":"\n**本系列文章，会严重参考《高性能浏览器网络》和《HTTP权威指南》**\n\n**前言**：http和https：http就是超文本传输协议，所谓的协议就是一种约定，约定了在双方或者多方之间传输的数据的格式，仅此而已。这是1991年万维网之父伯纳斯李同学提出并设计的一套协议。主要目的就是机器之间能够互传资源，实现网络互联的真实需求。请求与响应。即：客户端向服务器发送资源请求，服务器端响应返回对应资源。https则是在http之外，又包了一层SSL，也就是安全套接层，用于加密传输，保证数据的可靠性。\n\n总体划分四个版本：0.9、1.0、1.1和2.0\n\n### 0.9版本\n该版本可以视为初代机，只有一个目标：机器之间实现通信。只支持get请求，ascii码字符流传输。没有请求头响应头,没有MIME类型。流程：tcp三次握手建立链路，发送请求，获取响应，断开连接。前一个请求响应返回之后，发起第二个请求，过程周而复始。\n**注**：MIME是一种文本标记，常见的如text/plain、text/html、image/jpeg等。规则：对象类型/特定子类型\n\n```javascript\ntelnet google.com 80\nConnection to xxx.xxx.xxx.xxx\nGET /about/\nHTML response...\nconnection closed\n```\n\n### 1.0版本\n相较于0.9版本，除get请求，新增了post、put等其他方式。同时有了请求头响应头的规则。有了MIME类型，支持多媒体资源传输。那么从1.0开始，http严格意义上应该称之为HMTP（hypermedia transport）。请求响应流程还是0.9那一套。\n\n<img src=\"/img/http.webp\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n### 1.1版本\n同前两个版本比较，1.1版本的改进：\n- 长连接connection：keep-alive。这就意味着，多个请求可以共用一条链路（在不主动断开连接的情况下）。假设页面需要发送nci请求，在以前的版本中，耗时2 * n * rtt（单次往返耗时）。现在只需要(n + 1) * rtt\n- 数据切分成块乱序传输，响应按照请求的顺序返回。\n- 新增cache-control缓存资源\n- 请求无需等待并行发送\n\n<img src=\"/img/http2.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n### 2.0版本\nhttp2.0的设计初衷只有一个，就是提高传输性能，包括低延时和高吞吐量。二进制分帧，将数据块分成更小的数据帧。多路复用，响应并行交错返回。头部压缩.详细介绍见后续文章\n","source":"_posts/HTTP版本演进：第一回.md","raw":"---\ntitle: HTTP版本演进：第一回\ncategory: 网络杂谈\ndate: 2023-08-02 23:02:20\ntags:\n---\n\n**本系列文章，会严重参考《高性能浏览器网络》和《HTTP权威指南》**\n\n**前言**：http和https：http就是超文本传输协议，所谓的协议就是一种约定，约定了在双方或者多方之间传输的数据的格式，仅此而已。这是1991年万维网之父伯纳斯李同学提出并设计的一套协议。主要目的就是机器之间能够互传资源，实现网络互联的真实需求。请求与响应。即：客户端向服务器发送资源请求，服务器端响应返回对应资源。https则是在http之外，又包了一层SSL，也就是安全套接层，用于加密传输，保证数据的可靠性。\n\n总体划分四个版本：0.9、1.0、1.1和2.0\n\n### 0.9版本\n该版本可以视为初代机，只有一个目标：机器之间实现通信。只支持get请求，ascii码字符流传输。没有请求头响应头,没有MIME类型。流程：tcp三次握手建立链路，发送请求，获取响应，断开连接。前一个请求响应返回之后，发起第二个请求，过程周而复始。\n**注**：MIME是一种文本标记，常见的如text/plain、text/html、image/jpeg等。规则：对象类型/特定子类型\n\n```javascript\ntelnet google.com 80\nConnection to xxx.xxx.xxx.xxx\nGET /about/\nHTML response...\nconnection closed\n```\n\n### 1.0版本\n相较于0.9版本，除get请求，新增了post、put等其他方式。同时有了请求头响应头的规则。有了MIME类型，支持多媒体资源传输。那么从1.0开始，http严格意义上应该称之为HMTP（hypermedia transport）。请求响应流程还是0.9那一套。\n\n<img src=\"/img/http.webp\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n### 1.1版本\n同前两个版本比较，1.1版本的改进：\n- 长连接connection：keep-alive。这就意味着，多个请求可以共用一条链路（在不主动断开连接的情况下）。假设页面需要发送nci请求，在以前的版本中，耗时2 * n * rtt（单次往返耗时）。现在只需要(n + 1) * rtt\n- 数据切分成块乱序传输，响应按照请求的顺序返回。\n- 新增cache-control缓存资源\n- 请求无需等待并行发送\n\n<img src=\"/img/http2.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n### 2.0版本\nhttp2.0的设计初衷只有一个，就是提高传输性能，包括低延时和高吞吐量。二进制分帧，将数据块分成更小的数据帧。多路复用，响应并行交错返回。头部压缩.详细介绍见后续文章\n","slug":"HTTP版本演进：第一回","published":1,"updated":"2023-08-04T02:15:17.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcuq000494vt10qm0yj0","content":"<p><strong>本系列文章，会严重参考《高性能浏览器网络》和《HTTP权威指南》</strong></p>\n<p><strong>前言</strong>：http和https：http就是超文本传输协议，所谓的协议就是一种约定，约定了在双方或者多方之间传输的数据的格式，仅此而已。这是1991年万维网之父伯纳斯李同学提出并设计的一套协议。主要目的就是机器之间能够互传资源，实现网络互联的真实需求。请求与响应。即：客户端向服务器发送资源请求，服务器端响应返回对应资源。https则是在http之外，又包了一层SSL，也就是安全套接层，用于加密传输，保证数据的可靠性。</p>\n<p>总体划分四个版本：0.9、1.0、1.1和2.0</p>\n<h3 id=\"0-9版本\"><a href=\"#0-9版本\" class=\"headerlink\" title=\"0.9版本\"></a>0.9版本</h3><p>该版本可以视为初代机，只有一个目标：机器之间实现通信。只支持get请求，ascii码字符流传输。没有请求头响应头,没有MIME类型。流程：tcp三次握手建立链路，发送请求，获取响应，断开连接。前一个请求响应返回之后，发起第二个请求，过程周而复始。<br><strong>注</strong>：MIME是一种文本标记，常见的如text&#x2F;plain、text&#x2F;html、image&#x2F;jpeg等。规则：对象类型&#x2F;特定子类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet google.<span class=\"property\">com</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"title class_\">Connection</span> to xxx.<span class=\"property\">xxx</span>.<span class=\"property\">xxx</span>.<span class=\"property\">xxx</span></span><br><span class=\"line\"><span class=\"variable constant_\">GET</span> /about/</span><br><span class=\"line\"><span class=\"variable constant_\">HTML</span> response...</span><br><span class=\"line\">connection closed</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-0版本\"><a href=\"#1-0版本\" class=\"headerlink\" title=\"1.0版本\"></a>1.0版本</h3><p>相较于0.9版本，除get请求，新增了post、put等其他方式。同时有了请求头响应头的规则。有了MIME类型，支持多媒体资源传输。那么从1.0开始，http严格意义上应该称之为HMTP（hypermedia transport）。请求响应流程还是0.9那一套。</p>\n<img src=\"/img/http.webp\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n<h3 id=\"1-1版本\"><a href=\"#1-1版本\" class=\"headerlink\" title=\"1.1版本\"></a>1.1版本</h3><p>同前两个版本比较，1.1版本的改进：</p>\n<ul>\n<li>长连接connection：keep-alive。这就意味着，多个请求可以共用一条链路（在不主动断开连接的情况下）。假设页面需要发送nci请求，在以前的版本中，耗时2 * n * rtt（单次往返耗时）。现在只需要(n + 1) * rtt</li>\n<li>数据切分成块乱序传输，响应按照请求的顺序返回。</li>\n<li>新增cache-control缓存资源</li>\n<li>请求无需等待并行发送</li>\n</ul>\n<img src=\"/img/http2.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n<h3 id=\"2-0版本\"><a href=\"#2-0版本\" class=\"headerlink\" title=\"2.0版本\"></a>2.0版本</h3><p>http2.0的设计初衷只有一个，就是提高传输性能，包括低延时和高吞吐量。二进制分帧，将数据块分成更小的数据帧。多路复用，响应并行交错返回。头部压缩.详细介绍见后续文章</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本系列文章，会严重参考《高性能浏览器网络》和《HTTP权威指南》</strong></p>\n<p><strong>前言</strong>：http和https：http就是超文本传输协议，所谓的协议就是一种约定，约定了在双方或者多方之间传输的数据的格式，仅此而已。这是1991年万维网之父伯纳斯李同学提出并设计的一套协议。主要目的就是机器之间能够互传资源，实现网络互联的真实需求。请求与响应。即：客户端向服务器发送资源请求，服务器端响应返回对应资源。https则是在http之外，又包了一层SSL，也就是安全套接层，用于加密传输，保证数据的可靠性。</p>\n<p>总体划分四个版本：0.9、1.0、1.1和2.0</p>\n<h3 id=\"0-9版本\"><a href=\"#0-9版本\" class=\"headerlink\" title=\"0.9版本\"></a>0.9版本</h3><p>该版本可以视为初代机，只有一个目标：机器之间实现通信。只支持get请求，ascii码字符流传输。没有请求头响应头,没有MIME类型。流程：tcp三次握手建立链路，发送请求，获取响应，断开连接。前一个请求响应返回之后，发起第二个请求，过程周而复始。<br><strong>注</strong>：MIME是一种文本标记，常见的如text&#x2F;plain、text&#x2F;html、image&#x2F;jpeg等。规则：对象类型&#x2F;特定子类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet google.<span class=\"property\">com</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"title class_\">Connection</span> to xxx.<span class=\"property\">xxx</span>.<span class=\"property\">xxx</span>.<span class=\"property\">xxx</span></span><br><span class=\"line\"><span class=\"variable constant_\">GET</span> /about/</span><br><span class=\"line\"><span class=\"variable constant_\">HTML</span> response...</span><br><span class=\"line\">connection closed</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-0版本\"><a href=\"#1-0版本\" class=\"headerlink\" title=\"1.0版本\"></a>1.0版本</h3><p>相较于0.9版本，除get请求，新增了post、put等其他方式。同时有了请求头响应头的规则。有了MIME类型，支持多媒体资源传输。那么从1.0开始，http严格意义上应该称之为HMTP（hypermedia transport）。请求响应流程还是0.9那一套。</p>\n<img src=\"/img/http.webp\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n<h3 id=\"1-1版本\"><a href=\"#1-1版本\" class=\"headerlink\" title=\"1.1版本\"></a>1.1版本</h3><p>同前两个版本比较，1.1版本的改进：</p>\n<ul>\n<li>长连接connection：keep-alive。这就意味着，多个请求可以共用一条链路（在不主动断开连接的情况下）。假设页面需要发送nci请求，在以前的版本中，耗时2 * n * rtt（单次往返耗时）。现在只需要(n + 1) * rtt</li>\n<li>数据切分成块乱序传输，响应按照请求的顺序返回。</li>\n<li>新增cache-control缓存资源</li>\n<li>请求无需等待并行发送</li>\n</ul>\n<img src=\"/img/http2.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n<h3 id=\"2-0版本\"><a href=\"#2-0版本\" class=\"headerlink\" title=\"2.0版本\"></a>2.0版本</h3><p>http2.0的设计初衷只有一个，就是提高传输性能，包括低延时和高吞吐量。二进制分帧，将数据块分成更小的数据帧。多路复用，响应并行交错返回。头部压缩.详细介绍见后续文章</p>\n"},{"title":"Webkit系列：第一回","date":"2023-07-27T17:13:25.000Z","_content":"本系列的目标：**尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》**\n\n现代浏览器的渲染逻辑，就是下图的流程。\n![layoput](img/layout.webp)\n\n一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？\n坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。\n\n总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。\n具体：\n1. 浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。\n2. 依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。\n3. html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到jscore引擎解释处理，谷歌浏览器中的就是大名鼎鼎的v8。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。\n4. csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的**layout阶段**。\n5. 最后的就是**Paint**和**Composite**两个阶段生成最终的页面。","source":"_posts/Webkit系列：第一回.md","raw":"---\ntitle: Webkit系列：第一回\ncategory: Webkit系列\ndate: 2023-07-28 01:13:25\ntags:\n---\n本系列的目标：**尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》**\n\n现代浏览器的渲染逻辑，就是下图的流程。\n![layoput](img/layout.webp)\n\n一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？\n坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。\n\n总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。\n具体：\n1. 浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。\n2. 依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。\n3. html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到jscore引擎解释处理，谷歌浏览器中的就是大名鼎鼎的v8。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。\n4. csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的**layout阶段**。\n5. 最后的就是**Paint**和**Composite**两个阶段生成最终的页面。","slug":"Webkit系列：第一回","published":1,"updated":"2023-08-04T02:15:17.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcur000594vta7b31mg4","content":"<p>本系列的目标：<strong>尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》</strong></p>\n<p>现代浏览器的渲染逻辑，就是下图的流程。<br><img src=\"/img/layout.webp\" alt=\"layoput\"></p>\n<p>一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？<br>坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。</p>\n<p>总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。<br>具体：</p>\n<ol>\n<li>浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。</li>\n<li>依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。</li>\n<li>html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到jscore引擎解释处理，谷歌浏览器中的就是大名鼎鼎的v8。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。</li>\n<li>csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的<strong>layout阶段</strong>。</li>\n<li>最后的就是<strong>Paint</strong>和<strong>Composite</strong>两个阶段生成最终的页面。</li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>本系列的目标：<strong>尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》</strong></p>\n<p>现代浏览器的渲染逻辑，就是下图的流程。<br><img src=\"/img/layout.webp\" alt=\"layoput\"></p>\n<p>一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？<br>坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。</p>\n<p>总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。<br>具体：</p>\n<ol>\n<li>浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。</li>\n<li>依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。</li>\n<li>html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到jscore引擎解释处理，谷歌浏览器中的就是大名鼎鼎的v8。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。</li>\n<li>csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的<strong>layout阶段</strong>。</li>\n<li>最后的就是<strong>Paint</strong>和<strong>Composite</strong>两个阶段生成最终的页面。</li>\n</ol>\n"},{"title":"HTTP版本演进：第三回","date":"2023-08-02T16:12:56.000Z","_content":"\n**本文的目的，就是要填前文留下的坑。**为了更加充分的使用c端和s端的效率，解决队首阻塞。两个方案：并行tcp链接，以及http2.0版本的多路复用。\n\n### 并行tcp链接\n这个方法简单粗暴。1.1版本的http协议不是严格执行串行传输嘛，那好，我们就多开几个tcp链接。同时s端开启多线程并行处理响应。目前主流的浏览器厂商都默认最大支持6条线路。至于为什么是6，而不是更大的数值，权衡的结果。这种方法，能在一定程度上，实现优化的效果，但是治标不治本。依然没能实现真正的多路复用。\n\n### HTTP的2.0\n该协议重大改进之一，就是实现了多路复用，摒弃了之前的串行传输。c端通过并行tcp链接最大并行六个请求同时发送。s端能在处理完成之后无需等待直接返回响应（在一个链路上）。\n\n那么。2.0版本的多路复用是如何实现的呢？**二进制分帧。**\n\n#### 二进制分帧\n如下图所示：\n<img src=\"/img/http6.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n2.0版本的数据传输如下图所示，所有的数据传输都是基于一个TCP链接。一个完整的请求响应称为一个流，流又有请求消息和响应消息组成，而具体的消息就是帧。这样的解释更多的是逻辑上的理解。本质就是数据被二进制分帧，乱序发送与组装，解决队首阻塞问题。\n<img src=\"/img/http7.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\nhttp2.0版本的其他改进：\n\n#### 请求优先级。\n前端会发送很多请求，但并不是每个请求都同等重要。每个流都会带一个31比特的优先级值，0---2的31次方-1，从高到低。s端在准备好返回的数据时，会根据这个来决定返回顺序。\n\n#### 头部压缩。简言之就是减少重复的头部信息，加快响应速度。\n以前一直把这个同后端的gzip压缩搞混了，两者事实上是两码事。头部压缩指的是响应头和请求头，也就是header。如下图所示：\n\n<img src=\"/img/http8.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n在2.0版本的机制中，c端和s端会维护自己的首部表来跟踪和存储之前发送的header中的键值对，对于相同的键值对，不会再发送。如上图所示，两个请求对比一下发现，除了请求路径不同，其他都没区别，因此发送的header帧中的信息，只有path字段及其对应的值。\n\n#### s端的“主动推送”\n2.0之前的版本中，c端和s端的请求响应是一对一的关系，即：一个请求，对应一个响应。我们知道一个站点通常有很多资源构成，所以理所当然的想法，为什么不让s端主动推送一些可能是c端必须的资源而不是每次都等他发送请求呢？2.0针对这点做了改进。依然依附于请求-响应的循环，但是不是一对一，而是一对多，即：一个请求对应多个响应。那么具体是怎么实现的？是怎么个逻辑?\ns端在发送响应之前，会主动发送一个PUSH_PROMISE帧信息，包含了s端想要主动推送的资源header，c端在收到这个帧信息后可以做取舍的决定，返回对应信息，最后由s端发送可能的多个响应。\n在1.x版本中，我们其实可以通过内嵌地址的方式，让后段“主动”推送响应资源，但是这种推送响应更多的是“强制性”的，前端无法进行取舍。对了，顺带提一个首部字段X-Associated-Content 。如果后端是Apache搭建的话，就可以通过这个字段识别出前端希望主动推送的资源。\n注意，一对多，有“一”才有后面的“多”，就是说，s端是不能在没有请求的情况下，向前端push资源的。还有一点是，2.0版本所做的改动，具体是由浏览器和服务器处理的，前端基本当着1.1版本用就行了。\n\n**总结一下就是**：多路复用（取代并行TCP，解决队首堵塞问题），头部压缩（降低时间开销），s端的主动推送。当然还有一个很重要的点，二进制分帧层（核心）。2.0版本关注的重点，是如何让数据高效的在c端和s端进行传输，减小一切可能的延迟。\n\n最后提一句：偶然间发现，chrome浏览器貌似都不显示http版本号了，火狐可以。且目前，2.0版本已经得到了普及。因此有必要再研究一下3.0版本的改进特性。\n\n欲知后事如何，且听下回分解。","source":"_posts/HTTP版本演进：第三回.md","raw":"---\ntitle: HTTP版本演进：第三回\ncategory: 网络杂谈\ndate: 2023-08-03 00:12:56\ntags:\n---\n\n**本文的目的，就是要填前文留下的坑。**为了更加充分的使用c端和s端的效率，解决队首阻塞。两个方案：并行tcp链接，以及http2.0版本的多路复用。\n\n### 并行tcp链接\n这个方法简单粗暴。1.1版本的http协议不是严格执行串行传输嘛，那好，我们就多开几个tcp链接。同时s端开启多线程并行处理响应。目前主流的浏览器厂商都默认最大支持6条线路。至于为什么是6，而不是更大的数值，权衡的结果。这种方法，能在一定程度上，实现优化的效果，但是治标不治本。依然没能实现真正的多路复用。\n\n### HTTP的2.0\n该协议重大改进之一，就是实现了多路复用，摒弃了之前的串行传输。c端通过并行tcp链接最大并行六个请求同时发送。s端能在处理完成之后无需等待直接返回响应（在一个链路上）。\n\n那么。2.0版本的多路复用是如何实现的呢？**二进制分帧。**\n\n#### 二进制分帧\n如下图所示：\n<img src=\"/img/http6.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\n2.0版本的数据传输如下图所示，所有的数据传输都是基于一个TCP链接。一个完整的请求响应称为一个流，流又有请求消息和响应消息组成，而具体的消息就是帧。这样的解释更多的是逻辑上的理解。本质就是数据被二进制分帧，乱序发送与组装，解决队首阻塞问题。\n<img src=\"/img/http7.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n\nhttp2.0版本的其他改进：\n\n#### 请求优先级。\n前端会发送很多请求，但并不是每个请求都同等重要。每个流都会带一个31比特的优先级值，0---2的31次方-1，从高到低。s端在准备好返回的数据时，会根据这个来决定返回顺序。\n\n#### 头部压缩。简言之就是减少重复的头部信息，加快响应速度。\n以前一直把这个同后端的gzip压缩搞混了，两者事实上是两码事。头部压缩指的是响应头和请求头，也就是header。如下图所示：\n\n<img src=\"/img/http8.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n在2.0版本的机制中，c端和s端会维护自己的首部表来跟踪和存储之前发送的header中的键值对，对于相同的键值对，不会再发送。如上图所示，两个请求对比一下发现，除了请求路径不同，其他都没区别，因此发送的header帧中的信息，只有path字段及其对应的值。\n\n#### s端的“主动推送”\n2.0之前的版本中，c端和s端的请求响应是一对一的关系，即：一个请求，对应一个响应。我们知道一个站点通常有很多资源构成，所以理所当然的想法，为什么不让s端主动推送一些可能是c端必须的资源而不是每次都等他发送请求呢？2.0针对这点做了改进。依然依附于请求-响应的循环，但是不是一对一，而是一对多，即：一个请求对应多个响应。那么具体是怎么实现的？是怎么个逻辑?\ns端在发送响应之前，会主动发送一个PUSH_PROMISE帧信息，包含了s端想要主动推送的资源header，c端在收到这个帧信息后可以做取舍的决定，返回对应信息，最后由s端发送可能的多个响应。\n在1.x版本中，我们其实可以通过内嵌地址的方式，让后段“主动”推送响应资源，但是这种推送响应更多的是“强制性”的，前端无法进行取舍。对了，顺带提一个首部字段X-Associated-Content 。如果后端是Apache搭建的话，就可以通过这个字段识别出前端希望主动推送的资源。\n注意，一对多，有“一”才有后面的“多”，就是说，s端是不能在没有请求的情况下，向前端push资源的。还有一点是，2.0版本所做的改动，具体是由浏览器和服务器处理的，前端基本当着1.1版本用就行了。\n\n**总结一下就是**：多路复用（取代并行TCP，解决队首堵塞问题），头部压缩（降低时间开销），s端的主动推送。当然还有一个很重要的点，二进制分帧层（核心）。2.0版本关注的重点，是如何让数据高效的在c端和s端进行传输，减小一切可能的延迟。\n\n最后提一句：偶然间发现，chrome浏览器貌似都不显示http版本号了，火狐可以。且目前，2.0版本已经得到了普及。因此有必要再研究一下3.0版本的改进特性。\n\n欲知后事如何，且听下回分解。","slug":"HTTP版本演进：第三回","published":1,"updated":"2023-08-04T02:15:17.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcur000794vtf8oqfx9l","content":"<p><strong>本文的目的，就是要填前文留下的坑。</strong>为了更加充分的使用c端和s端的效率，解决队首阻塞。两个方案：并行tcp链接，以及http2.0版本的多路复用。</p>\n<h3 id=\"并行tcp链接\"><a href=\"#并行tcp链接\" class=\"headerlink\" title=\"并行tcp链接\"></a>并行tcp链接</h3><p>这个方法简单粗暴。1.1版本的http协议不是严格执行串行传输嘛，那好，我们就多开几个tcp链接。同时s端开启多线程并行处理响应。目前主流的浏览器厂商都默认最大支持6条线路。至于为什么是6，而不是更大的数值，权衡的结果。这种方法，能在一定程度上，实现优化的效果，但是治标不治本。依然没能实现真正的多路复用。</p>\n<h3 id=\"HTTP的2-0\"><a href=\"#HTTP的2-0\" class=\"headerlink\" title=\"HTTP的2.0\"></a>HTTP的2.0</h3><p>该协议重大改进之一，就是实现了多路复用，摒弃了之前的串行传输。c端通过并行tcp链接最大并行六个请求同时发送。s端能在处理完成之后无需等待直接返回响应（在一个链路上）。</p>\n<p>那么。2.0版本的多路复用是如何实现的呢？<strong>二进制分帧。</strong></p>\n<h4 id=\"二进制分帧\"><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h4><p>如下图所示：<br><img src=\"/img/http6.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"></p>\n<p>2.0版本的数据传输如下图所示，所有的数据传输都是基于一个TCP链接。一个完整的请求响应称为一个流，流又有请求消息和响应消息组成，而具体的消息就是帧。这样的解释更多的是逻辑上的理解。本质就是数据被二进制分帧，乱序发送与组装，解决队首阻塞问题。<br><img src=\"/img/http7.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"></p>\n<p>http2.0版本的其他改进：</p>\n<h4 id=\"请求优先级。\"><a href=\"#请求优先级。\" class=\"headerlink\" title=\"请求优先级。\"></a>请求优先级。</h4><p>前端会发送很多请求，但并不是每个请求都同等重要。每个流都会带一个31比特的优先级值，0—2的31次方-1，从高到低。s端在准备好返回的数据时，会根据这个来决定返回顺序。</p>\n<h4 id=\"头部压缩。简言之就是减少重复的头部信息，加快响应速度。\"><a href=\"#头部压缩。简言之就是减少重复的头部信息，加快响应速度。\" class=\"headerlink\" title=\"头部压缩。简言之就是减少重复的头部信息，加快响应速度。\"></a>头部压缩。简言之就是减少重复的头部信息，加快响应速度。</h4><p>以前一直把这个同后端的gzip压缩搞混了，两者事实上是两码事。头部压缩指的是响应头和请求头，也就是header。如下图所示：</p>\n<img src=\"/img/http8.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n在2.0版本的机制中，c端和s端会维护自己的首部表来跟踪和存储之前发送的header中的键值对，对于相同的键值对，不会再发送。如上图所示，两个请求对比一下发现，除了请求路径不同，其他都没区别，因此发送的header帧中的信息，只有path字段及其对应的值。\n\n<h4 id=\"s端的“主动推送”\"><a href=\"#s端的“主动推送”\" class=\"headerlink\" title=\"s端的“主动推送”\"></a>s端的“主动推送”</h4><p>2.0之前的版本中，c端和s端的请求响应是一对一的关系，即：一个请求，对应一个响应。我们知道一个站点通常有很多资源构成，所以理所当然的想法，为什么不让s端主动推送一些可能是c端必须的资源而不是每次都等他发送请求呢？2.0针对这点做了改进。依然依附于请求-响应的循环，但是不是一对一，而是一对多，即：一个请求对应多个响应。那么具体是怎么实现的？是怎么个逻辑?<br>s端在发送响应之前，会主动发送一个PUSH_PROMISE帧信息，包含了s端想要主动推送的资源header，c端在收到这个帧信息后可以做取舍的决定，返回对应信息，最后由s端发送可能的多个响应。<br>在1.x版本中，我们其实可以通过内嵌地址的方式，让后段“主动”推送响应资源，但是这种推送响应更多的是“强制性”的，前端无法进行取舍。对了，顺带提一个首部字段X-Associated-Content 。如果后端是Apache搭建的话，就可以通过这个字段识别出前端希望主动推送的资源。<br>注意，一对多，有“一”才有后面的“多”，就是说，s端是不能在没有请求的情况下，向前端push资源的。还有一点是，2.0版本所做的改动，具体是由浏览器和服务器处理的，前端基本当着1.1版本用就行了。</p>\n<p><strong>总结一下就是</strong>：多路复用（取代并行TCP，解决队首堵塞问题），头部压缩（降低时间开销），s端的主动推送。当然还有一个很重要的点，二进制分帧层（核心）。2.0版本关注的重点，是如何让数据高效的在c端和s端进行传输，减小一切可能的延迟。</p>\n<p>最后提一句：偶然间发现，chrome浏览器貌似都不显示http版本号了，火狐可以。且目前，2.0版本已经得到了普及。因此有必要再研究一下3.0版本的改进特性。</p>\n<p>欲知后事如何，且听下回分解。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本文的目的，就是要填前文留下的坑。</strong>为了更加充分的使用c端和s端的效率，解决队首阻塞。两个方案：并行tcp链接，以及http2.0版本的多路复用。</p>\n<h3 id=\"并行tcp链接\"><a href=\"#并行tcp链接\" class=\"headerlink\" title=\"并行tcp链接\"></a>并行tcp链接</h3><p>这个方法简单粗暴。1.1版本的http协议不是严格执行串行传输嘛，那好，我们就多开几个tcp链接。同时s端开启多线程并行处理响应。目前主流的浏览器厂商都默认最大支持6条线路。至于为什么是6，而不是更大的数值，权衡的结果。这种方法，能在一定程度上，实现优化的效果，但是治标不治本。依然没能实现真正的多路复用。</p>\n<h3 id=\"HTTP的2-0\"><a href=\"#HTTP的2-0\" class=\"headerlink\" title=\"HTTP的2.0\"></a>HTTP的2.0</h3><p>该协议重大改进之一，就是实现了多路复用，摒弃了之前的串行传输。c端通过并行tcp链接最大并行六个请求同时发送。s端能在处理完成之后无需等待直接返回响应（在一个链路上）。</p>\n<p>那么。2.0版本的多路复用是如何实现的呢？<strong>二进制分帧。</strong></p>\n<h4 id=\"二进制分帧\"><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h4><p>如下图所示：<br><img src=\"/img/http6.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"></p>\n<p>2.0版本的数据传输如下图所示，所有的数据传输都是基于一个TCP链接。一个完整的请求响应称为一个流，流又有请求消息和响应消息组成，而具体的消息就是帧。这样的解释更多的是逻辑上的理解。本质就是数据被二进制分帧，乱序发送与组装，解决队首阻塞问题。<br><img src=\"/img/http7.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"></p>\n<p>http2.0版本的其他改进：</p>\n<h4 id=\"请求优先级。\"><a href=\"#请求优先级。\" class=\"headerlink\" title=\"请求优先级。\"></a>请求优先级。</h4><p>前端会发送很多请求，但并不是每个请求都同等重要。每个流都会带一个31比特的优先级值，0—2的31次方-1，从高到低。s端在准备好返回的数据时，会根据这个来决定返回顺序。</p>\n<h4 id=\"头部压缩。简言之就是减少重复的头部信息，加快响应速度。\"><a href=\"#头部压缩。简言之就是减少重复的头部信息，加快响应速度。\" class=\"headerlink\" title=\"头部压缩。简言之就是减少重复的头部信息，加快响应速度。\"></a>头部压缩。简言之就是减少重复的头部信息，加快响应速度。</h4><p>以前一直把这个同后端的gzip压缩搞混了，两者事实上是两码事。头部压缩指的是响应头和请求头，也就是header。如下图所示：</p>\n<img src=\"/img/http8.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\">\n在2.0版本的机制中，c端和s端会维护自己的首部表来跟踪和存储之前发送的header中的键值对，对于相同的键值对，不会再发送。如上图所示，两个请求对比一下发现，除了请求路径不同，其他都没区别，因此发送的header帧中的信息，只有path字段及其对应的值。\n\n<h4 id=\"s端的“主动推送”\"><a href=\"#s端的“主动推送”\" class=\"headerlink\" title=\"s端的“主动推送”\"></a>s端的“主动推送”</h4><p>2.0之前的版本中，c端和s端的请求响应是一对一的关系，即：一个请求，对应一个响应。我们知道一个站点通常有很多资源构成，所以理所当然的想法，为什么不让s端主动推送一些可能是c端必须的资源而不是每次都等他发送请求呢？2.0针对这点做了改进。依然依附于请求-响应的循环，但是不是一对一，而是一对多，即：一个请求对应多个响应。那么具体是怎么实现的？是怎么个逻辑?<br>s端在发送响应之前，会主动发送一个PUSH_PROMISE帧信息，包含了s端想要主动推送的资源header，c端在收到这个帧信息后可以做取舍的决定，返回对应信息，最后由s端发送可能的多个响应。<br>在1.x版本中，我们其实可以通过内嵌地址的方式，让后段“主动”推送响应资源，但是这种推送响应更多的是“强制性”的，前端无法进行取舍。对了，顺带提一个首部字段X-Associated-Content 。如果后端是Apache搭建的话，就可以通过这个字段识别出前端希望主动推送的资源。<br>注意，一对多，有“一”才有后面的“多”，就是说，s端是不能在没有请求的情况下，向前端push资源的。还有一点是，2.0版本所做的改动，具体是由浏览器和服务器处理的，前端基本当着1.1版本用就行了。</p>\n<p><strong>总结一下就是</strong>：多路复用（取代并行TCP，解决队首堵塞问题），头部压缩（降低时间开销），s端的主动推送。当然还有一个很重要的点，二进制分帧层（核心）。2.0版本关注的重点，是如何让数据高效的在c端和s端进行传输，减小一切可能的延迟。</p>\n<p>最后提一句：偶然间发现，chrome浏览器貌似都不显示http版本号了，火狐可以。且目前，2.0版本已经得到了普及。因此有必要再研究一下3.0版本的改进特性。</p>\n<p>欲知后事如何，且听下回分解。</p>\n"},{"title":"Webpack系列：第三回","date":"2023-07-24T14:39:47.000Z","_content":"继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。\n\n### Webpack打包总体流程\n#### 最最精简的webpack打包文件\n```js\n(function(modules) { // webpackBootstrap\n     // The module cache已经加载过的模块\n    var installedModules = {};\n    // The require function模块加载函数， 核心\n    function __webpack_require__(moduleId) {\n        // Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块\n        if(installedModules[moduleId]) {\n             return installedModules[moduleId].exports;\n        }\n         // Create a new module (and put it into the cache)\n         var module = installedModules[moduleId] = {\n             i: moduleId,\n             l: false,\n            exports: {}\n         };\n\n         // Execute the module function执行加载函数\n         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n         // Flag the module as loaded标记该模块已经加载\n        module.l = true;\n\n        // Return the exports of the module\n         return module.exports;\n     }\n     return __webpack_require__(0) //入口文件\n\n })([\n    // 依赖数组\n/* 0 */\n (function(module, exports) {\n    module.exports = \"Hello World\";\n }\n ...\n ...\n )]);\n```\n#### 1. 从入口文件开始，分析文件的所有依赖\n#### 2. 将每一个依赖模块包装起来，放进一个数组中等待调用\n- 此处的数组，就是IIFE的入参依赖数组\n#### 3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\n#### 4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\n- 需要注意__webpack_require__是一个递归\n\n\n\n","source":"_posts/Webpack系列：第三回.md","raw":"---\ntitle: Webpack系列：第三回\ndate: 2023-07-24 22:39:47\ntags:\ncategory: Webpack\n---\n继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。\n\n### Webpack打包总体流程\n#### 最最精简的webpack打包文件\n```js\n(function(modules) { // webpackBootstrap\n     // The module cache已经加载过的模块\n    var installedModules = {};\n    // The require function模块加载函数， 核心\n    function __webpack_require__(moduleId) {\n        // Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块\n        if(installedModules[moduleId]) {\n             return installedModules[moduleId].exports;\n        }\n         // Create a new module (and put it into the cache)\n         var module = installedModules[moduleId] = {\n             i: moduleId,\n             l: false,\n            exports: {}\n         };\n\n         // Execute the module function执行加载函数\n         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n         // Flag the module as loaded标记该模块已经加载\n        module.l = true;\n\n        // Return the exports of the module\n         return module.exports;\n     }\n     return __webpack_require__(0) //入口文件\n\n })([\n    // 依赖数组\n/* 0 */\n (function(module, exports) {\n    module.exports = \"Hello World\";\n }\n ...\n ...\n )]);\n```\n#### 1. 从入口文件开始，分析文件的所有依赖\n#### 2. 将每一个依赖模块包装起来，放进一个数组中等待调用\n- 此处的数组，就是IIFE的入参依赖数组\n#### 3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\n#### 4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\n- 需要注意__webpack_require__是一个递归\n\n\n\n","slug":"Webpack系列：第三回","published":1,"updated":"2023-08-03T02:44:12.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcus000894vte57786xo","content":"<p>继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。</p>\n<h3 id=\"Webpack打包总体流程\"><a href=\"#Webpack打包总体流程\" class=\"headerlink\" title=\"Webpack打包总体流程\"></a>Webpack打包总体流程</h3><h4 id=\"最最精简的webpack打包文件\"><a href=\"#最最精简的webpack打包文件\" class=\"headerlink\" title=\"最最精简的webpack打包文件\"></a>最最精简的webpack打包文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\">     <span class=\"comment\">// The module cache已经加载过的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// The require function模块加载函数， 核心</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">             <span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\">             <span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Execute the module function执行加载函数</span></span><br><span class=\"line\">         modules[moduleId].<span class=\"title function_\">call</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Flag the module as loaded标记该模块已经加载</span></span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>) <span class=\"comment\">//入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)([</span><br><span class=\"line\">    <span class=\"comment\">// 依赖数组</span></span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"> (<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> )]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-从入口文件开始，分析文件的所有依赖\"><a href=\"#1-从入口文件开始，分析文件的所有依赖\" class=\"headerlink\" title=\"1. 从入口文件开始，分析文件的所有依赖\"></a>1. 从入口文件开始，分析文件的所有依赖</h4><h4 id=\"2-将每一个依赖模块包装起来，放进一个数组中等待调用\"><a href=\"#2-将每一个依赖模块包装起来，放进一个数组中等待调用\" class=\"headerlink\" title=\"2. 将每一个依赖模块包装起来，放进一个数组中等待调用\"></a>2. 将每一个依赖模块包装起来，放进一个数组中等待调用</h4><ul>\n<li>此处的数组，就是IIFE的入参依赖数组</li>\n</ul>\n<h4 id=\"3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"><a href=\"#3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\" class=\"headerlink\" title=\"3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"></a>3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用</h4><h4 id=\"4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"><a href=\"#4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\" class=\"headerlink\" title=\"4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"></a>4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数</h4><ul>\n<li>需要注意__webpack_require__是一个递归</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。</p>\n<h3 id=\"Webpack打包总体流程\"><a href=\"#Webpack打包总体流程\" class=\"headerlink\" title=\"Webpack打包总体流程\"></a>Webpack打包总体流程</h3><h4 id=\"最最精简的webpack打包文件\"><a href=\"#最最精简的webpack打包文件\" class=\"headerlink\" title=\"最最精简的webpack打包文件\"></a>最最精简的webpack打包文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\">     <span class=\"comment\">// The module cache已经加载过的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// The require function模块加载函数， 核心</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">             <span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\">             <span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Execute the module function执行加载函数</span></span><br><span class=\"line\">         modules[moduleId].<span class=\"title function_\">call</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Flag the module as loaded标记该模块已经加载</span></span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>) <span class=\"comment\">//入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)([</span><br><span class=\"line\">    <span class=\"comment\">// 依赖数组</span></span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"> (<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> )]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-从入口文件开始，分析文件的所有依赖\"><a href=\"#1-从入口文件开始，分析文件的所有依赖\" class=\"headerlink\" title=\"1. 从入口文件开始，分析文件的所有依赖\"></a>1. 从入口文件开始，分析文件的所有依赖</h4><h4 id=\"2-将每一个依赖模块包装起来，放进一个数组中等待调用\"><a href=\"#2-将每一个依赖模块包装起来，放进一个数组中等待调用\" class=\"headerlink\" title=\"2. 将每一个依赖模块包装起来，放进一个数组中等待调用\"></a>2. 将每一个依赖模块包装起来，放进一个数组中等待调用</h4><ul>\n<li>此处的数组，就是IIFE的入参依赖数组</li>\n</ul>\n<h4 id=\"3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"><a href=\"#3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\" class=\"headerlink\" title=\"3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"></a>3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用</h4><h4 id=\"4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"><a href=\"#4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\" class=\"headerlink\" title=\"4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"></a>4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数</h4><ul>\n<li>需要注意__webpack_require__是一个递归</li>\n</ul>\n"},{"title":"Webpack系列：第一回","date":"2023-07-24T13:34:31.000Z","_content":"本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：**能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用**。\n### Webpack干啥的\n打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？**我就喜欢零散的，咋了？**\n#### 理由有二。\n- **其一**： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。\n- **其二**： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。\n\n因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。\n\n#### 那么webpack具体的能力都包括了啥？\n\n- **合并文件**。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。\n- **翻译-loader**。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等\n- **做点其他小动作-plugin**。例如打包过程的进度条等。\n- 最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。\n\n","source":"_posts/Webpack系列：第一回.md","raw":"---\ntitle: Webpack系列：第一回\ncategory: Webpack\ndate: 2023-07-24 21:34:31\ntags:\n---\n本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：**能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用**。\n### Webpack干啥的\n打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？**我就喜欢零散的，咋了？**\n#### 理由有二。\n- **其一**： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。\n- **其二**： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。\n\n因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。\n\n#### 那么webpack具体的能力都包括了啥？\n\n- **合并文件**。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。\n- **翻译-loader**。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等\n- **做点其他小动作-plugin**。例如打包过程的进度条等。\n- 最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。\n\n","slug":"Webpack系列：第一回","published":1,"updated":"2023-08-02T02:23:48.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcut000b94vt680c31op","content":"<p>本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：<strong>能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用</strong>。</p>\n<h3 id=\"Webpack干啥的\"><a href=\"#Webpack干啥的\" class=\"headerlink\" title=\"Webpack干啥的\"></a>Webpack干啥的</h3><p>打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？<strong>我就喜欢零散的，咋了？</strong></p>\n<h4 id=\"理由有二。\"><a href=\"#理由有二。\" class=\"headerlink\" title=\"理由有二。\"></a>理由有二。</h4><ul>\n<li><strong>其一</strong>： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。</li>\n<li><strong>其二</strong>： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。</li>\n</ul>\n<p>因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。</p>\n<h4 id=\"那么webpack具体的能力都包括了啥？\"><a href=\"#那么webpack具体的能力都包括了啥？\" class=\"headerlink\" title=\"那么webpack具体的能力都包括了啥？\"></a>那么webpack具体的能力都包括了啥？</h4><ul>\n<li><strong>合并文件</strong>。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。</li>\n<li><strong>翻译-loader</strong>。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等</li>\n<li><strong>做点其他小动作-plugin</strong>。例如打包过程的进度条等。</li>\n<li>最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：<strong>能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用</strong>。</p>\n<h3 id=\"Webpack干啥的\"><a href=\"#Webpack干啥的\" class=\"headerlink\" title=\"Webpack干啥的\"></a>Webpack干啥的</h3><p>打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？<strong>我就喜欢零散的，咋了？</strong></p>\n<h4 id=\"理由有二。\"><a href=\"#理由有二。\" class=\"headerlink\" title=\"理由有二。\"></a>理由有二。</h4><ul>\n<li><strong>其一</strong>： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。</li>\n<li><strong>其二</strong>： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。</li>\n</ul>\n<p>因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。</p>\n<h4 id=\"那么webpack具体的能力都包括了啥？\"><a href=\"#那么webpack具体的能力都包括了啥？\" class=\"headerlink\" title=\"那么webpack具体的能力都包括了啥？\"></a>那么webpack具体的能力都包括了啥？</h4><ul>\n<li><strong>合并文件</strong>。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。</li>\n<li><strong>翻译-loader</strong>。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等</li>\n<li><strong>做点其他小动作-plugin</strong>。例如打包过程的进度条等。</li>\n<li>最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。</li>\n</ul>\n"},{"title":"Webpack系列：第四回","date":"2023-07-24T17:12:55.000Z","_content":"在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。\n\n","source":"_posts/Webpack系列：第四回.md","raw":"---\ntitle: Webpack系列：第四回\ncategory: Webpack\ndate: 2023-07-25 01:12:55\ntags:\n---\n在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。\n\n","slug":"Webpack系列：第四回","published":1,"updated":"2023-08-02T02:23:48.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcuu000c94vt0nh6blxv","content":"<p>在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。</p>\n"},{"title":"Webpack系列：第二回","date":"2023-07-24T14:23:35.000Z","_content":"\n### 前端模块化的演进历程\n模块化是webpack的基石，本文就尝试着缕一缕。\n\n####  阶段一：文件划分\n最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。\n\n``` js\n//  文件内部结构：\nvar x = 100\n\nfunction A() {\n    ...\n}\n\nfunction B() {\n    ...\n}\n```\n然后通过script标签引入：\n```js\n    <script src=\"./moduaA.js\"></script>\n    <script src=\"./moduaB.js\"></script>\n    <script src=\"./moduaC.js\"></script>\n```\n该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制\n\n#### 阶段二：命名空间\n同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。\n```js\nvar modulA = {\n    x = 100,\n    methodA: function A() {\n        ...\n    },\n    methodB: function B() {\n        ...\n    }\n}\n```\n相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。\n\n#### 阶段三： IIFE:立即函数表达\n通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。\n```js\nconst obj = (function () {\n    let name = 'hhvcg'\n    let old = 11\n    return {\n        tell: function() {\n            console.log('i am--->:', name)\n        }\n    }\n})()\nobj.tell()\nconsole.log(obj.name)\n\n// 标准早期写法\n(function (window) {\n    let name = 'hhvcg'\n    let old = 11\n    function tell() {\n        console.log('i am--->:', name)\n    }\n    window.modulA = { tell }\n})(window)\n```\n\n##### 上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\n\n#### 阶段四：ES6 Module终极方案\n大家应该都很熟悉了，就不举例了\n\n那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，**尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。**\n","source":"_posts/Webpack系列：第二回.md","raw":"---\ntitle: Webpack系列：第二回\ncategory: Webpack\ndate: 2023-07-24 22:23:35\ntags:\n---\n\n### 前端模块化的演进历程\n模块化是webpack的基石，本文就尝试着缕一缕。\n\n####  阶段一：文件划分\n最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。\n\n``` js\n//  文件内部结构：\nvar x = 100\n\nfunction A() {\n    ...\n}\n\nfunction B() {\n    ...\n}\n```\n然后通过script标签引入：\n```js\n    <script src=\"./moduaA.js\"></script>\n    <script src=\"./moduaB.js\"></script>\n    <script src=\"./moduaC.js\"></script>\n```\n该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制\n\n#### 阶段二：命名空间\n同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。\n```js\nvar modulA = {\n    x = 100,\n    methodA: function A() {\n        ...\n    },\n    methodB: function B() {\n        ...\n    }\n}\n```\n相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。\n\n#### 阶段三： IIFE:立即函数表达\n通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。\n```js\nconst obj = (function () {\n    let name = 'hhvcg'\n    let old = 11\n    return {\n        tell: function() {\n            console.log('i am--->:', name)\n        }\n    }\n})()\nobj.tell()\nconsole.log(obj.name)\n\n// 标准早期写法\n(function (window) {\n    let name = 'hhvcg'\n    let old = 11\n    function tell() {\n        console.log('i am--->:', name)\n    }\n    window.modulA = { tell }\n})(window)\n```\n\n##### 上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\n\n#### 阶段四：ES6 Module终极方案\n大家应该都很熟悉了，就不举例了\n\n那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，**尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。**\n","slug":"Webpack系列：第二回","published":1,"updated":"2023-08-02T02:23:48.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcuw000f94vt8w7thbc2","content":"<h3 id=\"前端模块化的演进历程\"><a href=\"#前端模块化的演进历程\" class=\"headerlink\" title=\"前端模块化的演进历程\"></a>前端模块化的演进历程</h3><p>模块化是webpack的基石，本文就尝试着缕一缕。</p>\n<h4 id=\"阶段一：文件划分\"><a href=\"#阶段一：文件划分\" class=\"headerlink\" title=\"阶段一：文件划分\"></a>阶段一：文件划分</h4><p>最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  文件内部结构：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过script标签引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;./moduaA.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaB.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaC.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制</p>\n<h4 id=\"阶段二：命名空间\"><a href=\"#阶段二：命名空间\" class=\"headerlink\" title=\"阶段二：命名空间\"></a>阶段二：命名空间</h4><p>同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> modulA = &#123;</span><br><span class=\"line\">    x = <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">methodA</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methodB</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。</p>\n<h4 id=\"阶段三：-IIFE-立即函数表达\"><a href=\"#阶段三：-IIFE-立即函数表达\" class=\"headerlink\" title=\"阶段三： IIFE:立即函数表达\"></a>阶段三： IIFE:立即函数表达</h4><p>通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">tell</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">obj.<span class=\"title function_\">tell</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 标准早期写法</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">window</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">tell</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">modulA</span> = &#123; tell &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"><a href=\"#上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\" class=\"headerlink\" title=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"></a>上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。</h5><h4 id=\"阶段四：ES6-Module终极方案\"><a href=\"#阶段四：ES6-Module终极方案\" class=\"headerlink\" title=\"阶段四：ES6 Module终极方案\"></a>阶段四：ES6 Module终极方案</h4><p>大家应该都很熟悉了，就不举例了</p>\n<p>那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，<strong>尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。</strong></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"前端模块化的演进历程\"><a href=\"#前端模块化的演进历程\" class=\"headerlink\" title=\"前端模块化的演进历程\"></a>前端模块化的演进历程</h3><p>模块化是webpack的基石，本文就尝试着缕一缕。</p>\n<h4 id=\"阶段一：文件划分\"><a href=\"#阶段一：文件划分\" class=\"headerlink\" title=\"阶段一：文件划分\"></a>阶段一：文件划分</h4><p>最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  文件内部结构：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过script标签引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;./moduaA.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaB.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaC.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制</p>\n<h4 id=\"阶段二：命名空间\"><a href=\"#阶段二：命名空间\" class=\"headerlink\" title=\"阶段二：命名空间\"></a>阶段二：命名空间</h4><p>同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> modulA = &#123;</span><br><span class=\"line\">    x = <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">methodA</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methodB</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。</p>\n<h4 id=\"阶段三：-IIFE-立即函数表达\"><a href=\"#阶段三：-IIFE-立即函数表达\" class=\"headerlink\" title=\"阶段三： IIFE:立即函数表达\"></a>阶段三： IIFE:立即函数表达</h4><p>通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">tell</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">obj.<span class=\"title function_\">tell</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 标准早期写法</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">window</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">tell</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">modulA</span> = &#123; tell &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"><a href=\"#上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\" class=\"headerlink\" title=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"></a>上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。</h5><h4 id=\"阶段四：ES6-Module终极方案\"><a href=\"#阶段四：ES6-Module终极方案\" class=\"headerlink\" title=\"阶段四：ES6 Module终极方案\"></a>阶段四：ES6 Module终极方案</h4><p>大家应该都很熟悉了，就不举例了</p>\n<p>那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，<strong>尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。</strong></p>\n"},{"title":"down视频资源时的偶然发现","date":"2023-08-03T02:28:44.000Z","_content":"\n鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？\n\n关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。\n\n但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？\n\n**当我打开控制台懵逼了。**\n- 快捷键打开控制台：弹框“你知道的太多了”,直接无法打开...\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 页面一直死循环debugger!!!。\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\">\n\n手段真骚。仔细看下代码（图片有点模糊）：\n\n```javascript\n<script type=\"text/javascript\">\n    document.onkeydown = function() {\n        var e = window.event || arguments[0];\n        if (e.keyCode == 123) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.shiftKey) && (e.keyCode == 73)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 85)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 83)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n    }\n    ;\n    var threshold = 160;\n    window.setInterval(function() {\n        if (window.outerWidth - window.innerWidth > threshold || window.outerHeight - window.innerHeight > threshold) {\n            function disableDebugger() {\n                debugger ;\n            }\n            $(document).ready(function() {\n                disableDebugger();\n            });\n        }\n    }, 1e3);\n</script>\n```\n\n**针对第一点：**\n设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。\n\n**针对第二点：**\n除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。\n页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。\n这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。\n**所以怎么破呢？**\n很简单：**用第三方抓包工具暴力抓取。这是明摆着比我们去学wireshark啊**","source":"_posts/down视频资源时的偶然发现.md","raw":"---\ntitle: down视频资源时的偶然发现\ncategory: 网络杂谈\ndate: 2023-08-03 10:28:44\ntags:\n---\n\n鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？\n\n关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。\n\n但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？\n\n**当我打开控制台懵逼了。**\n- 快捷键打开控制台：弹框“你知道的太多了”,直接无法打开...\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 页面一直死循环debugger!!!。\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\">\n\n手段真骚。仔细看下代码（图片有点模糊）：\n\n```javascript\n<script type=\"text/javascript\">\n    document.onkeydown = function() {\n        var e = window.event || arguments[0];\n        if (e.keyCode == 123) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.shiftKey) && (e.keyCode == 73)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 85)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 83)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n    }\n    ;\n    var threshold = 160;\n    window.setInterval(function() {\n        if (window.outerWidth - window.innerWidth > threshold || window.outerHeight - window.innerHeight > threshold) {\n            function disableDebugger() {\n                debugger ;\n            }\n            $(document).ready(function() {\n                disableDebugger();\n            });\n        }\n    }, 1e3);\n</script>\n```\n\n**针对第一点：**\n设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。\n\n**针对第二点：**\n除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。\n页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。\n这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。\n**所以怎么破呢？**\n很简单：**用第三方抓包工具暴力抓取。这是明摆着比我们去学wireshark啊**","slug":"down视频资源时的偶然发现","published":1,"updated":"2023-08-07T02:02:43.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcux000h94vtb2cv3ecj","content":"<p>鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？</p>\n<p>关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。</p>\n<p>但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？</p>\n<p><strong>当我打开控制台懵逼了。</strong></p>\n<ul>\n<li><p>快捷键打开控制台：弹框“你知道的太多了”,直接无法打开…</p>\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>页面一直死循环debugger!!!。</p>\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\"></li>\n</ul>\n<p>手段真骚。仔细看下代码（图片有点模糊）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onkeydown</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"variable language_\">window</span>.<span class=\"property\">event</span> || <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.<span class=\"property\">keyCode</span> == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">shiftKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">73</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">85</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">83</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> threshold = <span class=\"number\">160</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">outerWidth</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> &gt; threshold || <span class=\"variable language_\">window</span>.<span class=\"property\">outerHeight</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> &gt; threshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">function</span> <span class=\"title function_\">disableDebugger</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">debugger</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">disableDebugger</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>针对第一点：</strong><br>设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。</p>\n<p><strong>针对第二点：</strong><br>除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。<br>页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。<br>这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。<br><strong>所以怎么破呢？</strong><br>很简单：<strong>用第三方抓包工具暴力抓取。这是明摆着比我们去学wireshark啊</strong></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？</p>\n<p>关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。</p>\n<p>但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？</p>\n<p><strong>当我打开控制台懵逼了。</strong></p>\n<ul>\n<li><p>快捷键打开控制台：弹框“你知道的太多了”,直接无法打开…</p>\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>页面一直死循环debugger!!!。</p>\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\"></li>\n</ul>\n<p>手段真骚。仔细看下代码（图片有点模糊）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onkeydown</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"variable language_\">window</span>.<span class=\"property\">event</span> || <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.<span class=\"property\">keyCode</span> == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">shiftKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">73</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">85</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">83</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> threshold = <span class=\"number\">160</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">outerWidth</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> &gt; threshold || <span class=\"variable language_\">window</span>.<span class=\"property\">outerHeight</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> &gt; threshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">function</span> <span class=\"title function_\">disableDebugger</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">debugger</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">disableDebugger</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>针对第一点：</strong><br>设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。</p>\n<p><strong>针对第二点：</strong><br>除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。<br>页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。<br>这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。<br><strong>所以怎么破呢？</strong><br>很简单：<strong>用第三方抓包工具暴力抓取。这是明摆着比我们去学wireshark啊</strong></p>\n"},{"title":"js的上古规则:原型链那些事儿","date":"2023-08-03T07:39:41.000Z","_content":"**本文目标：捋清原型链那一套**\n在《JS类型详论》的那篇文章中，我们有提到过自有属性和原型属性的概念。二者的区别，就是原型链存在的意义。\n```javascript\nconst obj = {\n  name: 'dddd'\n}\nconsole.log(obj.hasOwnProperty('constructor'))\nconsole.log('constructor' in obj)\n```\n在上面的代码中，我们创建了一个对象obj，含有一个name属性。随后用两种方式打印constructor，很显然我们呢并没有看到constructor属性，但是，通过in的方式，打印出了true。为什么？我们呢说过in能够扫描的属性不单单是对象上显式写出来的属性（自有属性），还包括了对象原型链上的（原型属性）。而此处的constructor，就存在与obj的原型对象中，所以打印出了true。\n**具体查找流程**：发现自有属性没有，然后沿着obj的__proto__属性找到其原型对象，发了目标输出。倘若依旧没有，那就继续沿着原型对象的原型对象找。直到尽头。这，就是原型链。\n\n### __proto__和prototype\n首先我们呢需要搞清楚，这俩兄弟的关系。简单明了的说：**前者是实例对象的属性，指向其原型对象。而后者是构造函数的属性，指向构造函数的原型对象。**\n\n### new的时候，到底发生了啥？\n此时，再思考一个面试必问的千年烂题，“当我们执行new的时候，到底发生了啥？”。关键就是两步：首先基于构造函数的原型对象，创建一个空对象，{}，此时该空对象的__proto___指向原型对象。然后调用call或apply执行构造函数的属性初始化，最后返回。详情见见代码：\n```javascript\n    const Parent = function(name, age) {\n      this.name = name\n      this.age = age\n    }\n\n    const myNew = function(...args) {\n// 此处可以直接通过隐形arguments获取参数\n      const target = args[0]\n      const child = Object.create(target.prototype)\n      let res = target.call(child, ...args.slice(1))\n      return typeof res === 'object'? res: child\n    }\n\n    const child = new Parent('alice', 12)\n    const child2 = myNew(Parent, 'alice', 12)\n    console.log('child:', child)\n    console.log('child2:', child2)\n```\n\n### 关于this指向问题\n**简言之：谁调用它，就指向谁**\n- 对象的方法调用： 指向对象\n```javascript\nconst obj = {\n  name: 'hhvcg',\n  getName: function() {\n    return this.name\n  }\n}\nconsole.log(obj.getName())\n```\n\n- 普通函数调用: 只想全局window\n```javascript\n window.name = 'hhvcg'\nconst f = function() {\n  return this.name\n}\nconsole.log(f())\n```\n\n- 构造函数调用：指向构造函数的实例对象\n```javascript\nconst f = function(name) {\n  this.name = name\n}\n\nconst child = new f('hhvcg')\nconsole.log(child.name)\n```\n\n### 闭包的那些个事儿\n**以最经典的防抖和节流功能为例。**\n1. 防抖： 不停的触发事件，我们这里具体指不停点击按钮，事件只执行一次。\n```javascript\n// html\n    <a-button @click=\"debounce\">click</a-button>\n// js\n    const f = function () {\n      let timer = null as any\n      return function () {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n          log('click')\n        }, 2000)\n      }\n    }\n    const debounce = f()\n```\n不管我们点击多少次，清除之前点击设置的定时器，再次声明一个，只有当点击结束，才会执行最后的定时器。\n\n2. 节流：一个事件，鼠标不停点击，该事件会以固定时间执行。\n```javascript\n    // js\n    const f = function () {\n      let flag = true\n      return function () {\n        if (!flag) {\n          return null\n        }\n        flag = false\n        setTimeout(() => {\n          log('click')\n          flag = true\n        }, 2000)\n      }\n    }\n    const throttle = f()\n\n// html\n    <a-button @click=\"throttle\">click</a-button>\n```\n\n我们把f函数的执行给到throttle，此时的throttle就是一个闭包函数。具体点讲，相当于在全局作用域上首先声明了一个flag，同时还有一个返回的函数。每当我们点击按钮时，都会执行返回的那个函数。","source":"_posts/js的上古规则-原型链那些事儿.md","raw":"---\ntitle: js的上古规则:原型链那些事儿\ncategory: 大前端气宗专栏\ndate: 2023-08-03 15:39:41\ntags:\n---\n**本文目标：捋清原型链那一套**\n在《JS类型详论》的那篇文章中，我们有提到过自有属性和原型属性的概念。二者的区别，就是原型链存在的意义。\n```javascript\nconst obj = {\n  name: 'dddd'\n}\nconsole.log(obj.hasOwnProperty('constructor'))\nconsole.log('constructor' in obj)\n```\n在上面的代码中，我们创建了一个对象obj，含有一个name属性。随后用两种方式打印constructor，很显然我们呢并没有看到constructor属性，但是，通过in的方式，打印出了true。为什么？我们呢说过in能够扫描的属性不单单是对象上显式写出来的属性（自有属性），还包括了对象原型链上的（原型属性）。而此处的constructor，就存在与obj的原型对象中，所以打印出了true。\n**具体查找流程**：发现自有属性没有，然后沿着obj的__proto__属性找到其原型对象，发了目标输出。倘若依旧没有，那就继续沿着原型对象的原型对象找。直到尽头。这，就是原型链。\n\n### __proto__和prototype\n首先我们呢需要搞清楚，这俩兄弟的关系。简单明了的说：**前者是实例对象的属性，指向其原型对象。而后者是构造函数的属性，指向构造函数的原型对象。**\n\n### new的时候，到底发生了啥？\n此时，再思考一个面试必问的千年烂题，“当我们执行new的时候，到底发生了啥？”。关键就是两步：首先基于构造函数的原型对象，创建一个空对象，{}，此时该空对象的__proto___指向原型对象。然后调用call或apply执行构造函数的属性初始化，最后返回。详情见见代码：\n```javascript\n    const Parent = function(name, age) {\n      this.name = name\n      this.age = age\n    }\n\n    const myNew = function(...args) {\n// 此处可以直接通过隐形arguments获取参数\n      const target = args[0]\n      const child = Object.create(target.prototype)\n      let res = target.call(child, ...args.slice(1))\n      return typeof res === 'object'? res: child\n    }\n\n    const child = new Parent('alice', 12)\n    const child2 = myNew(Parent, 'alice', 12)\n    console.log('child:', child)\n    console.log('child2:', child2)\n```\n\n### 关于this指向问题\n**简言之：谁调用它，就指向谁**\n- 对象的方法调用： 指向对象\n```javascript\nconst obj = {\n  name: 'hhvcg',\n  getName: function() {\n    return this.name\n  }\n}\nconsole.log(obj.getName())\n```\n\n- 普通函数调用: 只想全局window\n```javascript\n window.name = 'hhvcg'\nconst f = function() {\n  return this.name\n}\nconsole.log(f())\n```\n\n- 构造函数调用：指向构造函数的实例对象\n```javascript\nconst f = function(name) {\n  this.name = name\n}\n\nconst child = new f('hhvcg')\nconsole.log(child.name)\n```\n\n### 闭包的那些个事儿\n**以最经典的防抖和节流功能为例。**\n1. 防抖： 不停的触发事件，我们这里具体指不停点击按钮，事件只执行一次。\n```javascript\n// html\n    <a-button @click=\"debounce\">click</a-button>\n// js\n    const f = function () {\n      let timer = null as any\n      return function () {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n          log('click')\n        }, 2000)\n      }\n    }\n    const debounce = f()\n```\n不管我们点击多少次，清除之前点击设置的定时器，再次声明一个，只有当点击结束，才会执行最后的定时器。\n\n2. 节流：一个事件，鼠标不停点击，该事件会以固定时间执行。\n```javascript\n    // js\n    const f = function () {\n      let flag = true\n      return function () {\n        if (!flag) {\n          return null\n        }\n        flag = false\n        setTimeout(() => {\n          log('click')\n          flag = true\n        }, 2000)\n      }\n    }\n    const throttle = f()\n\n// html\n    <a-button @click=\"throttle\">click</a-button>\n```\n\n我们把f函数的执行给到throttle，此时的throttle就是一个闭包函数。具体点讲，相当于在全局作用域上首先声明了一个flag，同时还有一个返回的函数。每当我们点击按钮时，都会执行返回的那个函数。","slug":"js的上古规则-原型链那些事儿","published":1,"updated":"2023-08-07T03:11:24.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcuz000k94vt4p7289nd","content":"<p><strong>本文目标：捋清原型链那一套</strong><br>在《JS类型详论》的那篇文章中，我们有提到过自有属性和原型属性的概念。二者的区别，就是原型链存在的意义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dddd&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;constructor&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;constructor&#x27;</span> <span class=\"keyword\">in</span> obj)</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们创建了一个对象obj，含有一个name属性。随后用两种方式打印constructor，很显然我们呢并没有看到constructor属性，但是，通过in的方式，打印出了true。为什么？我们呢说过in能够扫描的属性不单单是对象上显式写出来的属性（自有属性），还包括了对象原型链上的（原型属性）。而此处的constructor，就存在与obj的原型对象中，所以打印出了true。<br><strong>具体查找流程</strong>：发现自有属性没有，然后沿着obj的__proto__属性找到其原型对象，发了目标输出。倘若依旧没有，那就继续沿着原型对象的原型对象找。直到尽头。这，就是原型链。</p>\n<h3 id=\"proto-和prototype\"><a href=\"#proto-和prototype\" class=\"headerlink\" title=\"__proto__和prototype\"></a>__proto__和prototype</h3><p>首先我们呢需要搞清楚，这俩兄弟的关系。简单明了的说：<strong>前者是实例对象的属性，指向其原型对象。而后者是构造函数的属性，指向构造函数的原型对象。</strong></p>\n<h3 id=\"new的时候，到底发生了啥？\"><a href=\"#new的时候，到底发生了啥？\" class=\"headerlink\" title=\"new的时候，到底发生了啥？\"></a>new的时候，到底发生了啥？</h3><p>此时，再思考一个面试必问的千年烂题，“当我们执行new的时候，到底发生了啥？”。关键就是两步：首先基于构造函数的原型对象，创建一个空对象，{}，此时该空对象的__proto___指向原型对象。然后调用call或apply执行构造函数的属性初始化，最后返回。详情见见代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Parent</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> myNew = <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 此处可以直接通过隐形arguments获取参数</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> target = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> child = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = target.<span class=\"title function_\">call</span>(child, ...args.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">&#x27;object&#x27;</span>? <span class=\"attr\">res</span>: child</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>(<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> child2 = <span class=\"title function_\">myNew</span>(<span class=\"title class_\">Parent</span>, <span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child:&#x27;</span>, child)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child2:&#x27;</span>, child2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于this指向问题\"><a href=\"#关于this指向问题\" class=\"headerlink\" title=\"关于this指向问题\"></a>关于this指向问题</h3><p><strong>简言之：谁调用它，就指向谁</strong></p>\n<ul>\n<li><p>对象的方法调用： 指向对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hhvcg&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">getName</span>())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>普通函数调用: 只想全局window</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"variable language_\">window</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数调用：指向构造函数的实例对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"keyword\">new</span> <span class=\"title function_\">f</span>(<span class=\"string\">&#x27;hhvcg&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">name</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"闭包的那些个事儿\"><a href=\"#闭包的那些个事儿\" class=\"headerlink\" title=\"闭包的那些个事儿\"></a>闭包的那些个事儿</h3><p><strong>以最经典的防抖和节流功能为例。</strong></p>\n<ol>\n<li><p>防抖： 不停的触发事件，我们这里具体指不停点击按钮，事件只执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">    &lt;a-button @click=<span class=\"string\">&quot;debounce&quot;</span>&gt;click&lt;/a-button&gt;</span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span> <span class=\"keyword\">as</span> any</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;click&#x27;</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> debounce = <span class=\"title function_\">f</span>()</span><br></pre></td></tr></table></figure>\n<p>不管我们点击多少次，清除之前点击设置的定时器，再次声明一个，只有当点击结束，才会执行最后的定时器。</p>\n</li>\n<li><p>节流：一个事件，鼠标不停点击，该事件会以固定时间执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// js</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;click&#x27;</span>)</span><br><span class=\"line\">          flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> throttle = <span class=\"title function_\">f</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">    &lt;a-button @click=<span class=\"string\">&quot;throttle&quot;</span>&gt;click&lt;/a-button&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>我们把f函数的执行给到throttle，此时的throttle就是一个闭包函数。具体点讲，相当于在全局作用域上首先声明了一个flag，同时还有一个返回的函数。每当我们点击按钮时，都会执行返回的那个函数。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本文目标：捋清原型链那一套</strong><br>在《JS类型详论》的那篇文章中，我们有提到过自有属性和原型属性的概念。二者的区别，就是原型链存在的意义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dddd&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;constructor&#x27;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;constructor&#x27;</span> <span class=\"keyword\">in</span> obj)</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们创建了一个对象obj，含有一个name属性。随后用两种方式打印constructor，很显然我们呢并没有看到constructor属性，但是，通过in的方式，打印出了true。为什么？我们呢说过in能够扫描的属性不单单是对象上显式写出来的属性（自有属性），还包括了对象原型链上的（原型属性）。而此处的constructor，就存在与obj的原型对象中，所以打印出了true。<br><strong>具体查找流程</strong>：发现自有属性没有，然后沿着obj的__proto__属性找到其原型对象，发了目标输出。倘若依旧没有，那就继续沿着原型对象的原型对象找。直到尽头。这，就是原型链。</p>\n<h3 id=\"proto-和prototype\"><a href=\"#proto-和prototype\" class=\"headerlink\" title=\"__proto__和prototype\"></a>__proto__和prototype</h3><p>首先我们呢需要搞清楚，这俩兄弟的关系。简单明了的说：<strong>前者是实例对象的属性，指向其原型对象。而后者是构造函数的属性，指向构造函数的原型对象。</strong></p>\n<h3 id=\"new的时候，到底发生了啥？\"><a href=\"#new的时候，到底发生了啥？\" class=\"headerlink\" title=\"new的时候，到底发生了啥？\"></a>new的时候，到底发生了啥？</h3><p>此时，再思考一个面试必问的千年烂题，“当我们执行new的时候，到底发生了啥？”。关键就是两步：首先基于构造函数的原型对象，创建一个空对象，{}，此时该空对象的__proto___指向原型对象。然后调用call或apply执行构造函数的属性初始化，最后返回。详情见见代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Parent</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> myNew = <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 此处可以直接通过隐形arguments获取参数</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> target = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> child = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = target.<span class=\"title function_\">call</span>(child, ...args.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">&#x27;object&#x27;</span>? <span class=\"attr\">res</span>: child</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>(<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> child2 = <span class=\"title function_\">myNew</span>(<span class=\"title class_\">Parent</span>, <span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child:&#x27;</span>, child)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;child2:&#x27;</span>, child2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于this指向问题\"><a href=\"#关于this指向问题\" class=\"headerlink\" title=\"关于this指向问题\"></a>关于this指向问题</h3><p><strong>简言之：谁调用它，就指向谁</strong></p>\n<ul>\n<li><p>对象的方法调用： 指向对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;hhvcg&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">getName</span>())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>普通函数调用: 只想全局window</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"variable language_\">window</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数调用：指向构造函数的实例对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"keyword\">new</span> <span class=\"title function_\">f</span>(<span class=\"string\">&#x27;hhvcg&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">name</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"闭包的那些个事儿\"><a href=\"#闭包的那些个事儿\" class=\"headerlink\" title=\"闭包的那些个事儿\"></a>闭包的那些个事儿</h3><p><strong>以最经典的防抖和节流功能为例。</strong></p>\n<ol>\n<li><p>防抖： 不停的触发事件，我们这里具体指不停点击按钮，事件只执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">    &lt;a-button @click=<span class=\"string\">&quot;debounce&quot;</span>&gt;click&lt;/a-button&gt;</span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span> <span class=\"keyword\">as</span> any</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;click&#x27;</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> debounce = <span class=\"title function_\">f</span>()</span><br></pre></td></tr></table></figure>\n<p>不管我们点击多少次，清除之前点击设置的定时器，再次声明一个，只有当点击结束，才会执行最后的定时器。</p>\n</li>\n<li><p>节流：一个事件，鼠标不停点击，该事件会以固定时间执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// js</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;click&#x27;</span>)</span><br><span class=\"line\">          flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> throttle = <span class=\"title function_\">f</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">    &lt;a-button @click=<span class=\"string\">&quot;throttle&quot;</span>&gt;click&lt;/a-button&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>我们把f函数的执行给到throttle，此时的throttle就是一个闭包函数。具体点讲，相当于在全局作用域上首先声明了一个flag，同时还有一个返回的函数。每当我们点击按钮时，都会执行返回的那个函数。</p>\n"},{"title":"《万神殿》--上载智能","date":"2023-07-24T08:42:29.000Z","_content":"\n最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：**UI，上载智能。Upload Intelligence。**\n\n所谓**上载智能**，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，**“脑机接口、义体”**等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：**人工智能极度的危险**。\n\n《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，**如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里**。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。\n\n通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头...换到最后，就会发现，这是哲学问题。**你是谁？你在哪？何为生？何为死？**不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。\n\n尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：**人类会突破生死的界限,实现永生**。但是，这可能是人类灭亡开端。从人类的大历史观角度看：**死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。**但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。","source":"_posts/《万神殿》-上载智能.md","raw":"---\ntitle: 《万神殿》--上载智能\ndate: 2023-07-24 16:42:29\ntags:\ncategories: '杂谈'\n---\n\n最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：**UI，上载智能。Upload Intelligence。**\n\n所谓**上载智能**，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，**“脑机接口、义体”**等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：**人工智能极度的危险**。\n\n《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，**如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里**。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。\n\n通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头...换到最后，就会发现，这是哲学问题。**你是谁？你在哪？何为生？何为死？**不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。\n\n尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：**人类会突破生死的界限,实现永生**。但是，这可能是人类灭亡开端。从人类的大历史观角度看：**死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。**但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。","slug":"《万神殿》-上载智能","published":1,"updated":"2023-08-03T13:43:03.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcuz000l94vt2t5hh2g5","content":"<p>最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：<strong>UI，上载智能。Upload Intelligence。</strong></p>\n<p>所谓<strong>上载智能</strong>，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，<strong>“脑机接口、义体”</strong>等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：<strong>人工智能极度的危险</strong>。</p>\n<p>《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，<strong>如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里</strong>。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。</p>\n<p>通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头…换到最后，就会发现，这是哲学问题。<strong>你是谁？你在哪？何为生？何为死？</strong>不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。</p>\n<p>尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：<strong>人类会突破生死的界限,实现永生</strong>。但是，这可能是人类灭亡开端。从人类的大历史观角度看：<strong>死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。</strong>但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：<strong>UI，上载智能。Upload Intelligence。</strong></p>\n<p>所谓<strong>上载智能</strong>，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，<strong>“脑机接口、义体”</strong>等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：<strong>人工智能极度的危险</strong>。</p>\n<p>《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，<strong>如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里</strong>。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。</p>\n<p>通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头…换到最后，就会发现，这是哲学问题。<strong>你是谁？你在哪？何为生？何为死？</strong>不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。</p>\n<p>尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：<strong>人类会突破生死的界限,实现永生</strong>。但是，这可能是人类灭亡开端。从人类的大历史观角度看：<strong>死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。</strong>但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。</p>\n"},{"title":"关于所谓的“梯子”的实现逻辑","date":"2023-08-03T02:38:19.000Z","_content":"\n不知道从什么时候开始，\"挂个梯子\"，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。\n\n说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。\n\n那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。\n<img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'>\n\n有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp/ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器--->目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。\n\n这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。\n\n那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。\n\n文毕。","source":"_posts/关于所谓的“梯子”的实现逻辑.md","raw":"---\ntitle: 关于所谓的“梯子”的实现逻辑\ncategory: 网络杂谈\ndate: 2023-08-03 10:38:19\ntags:\n---\n\n不知道从什么时候开始，\"挂个梯子\"，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。\n\n说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。\n\n那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。\n<img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'>\n\n有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp/ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器--->目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。\n\n这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。\n\n那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。\n\n文毕。","slug":"关于所谓的“梯子”的实现逻辑","published":1,"updated":"2023-08-03T02:50:58.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv0000o94vtdmzkhp4y","content":"<p>不知道从什么时候开始，”挂个梯子”，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。</p>\n<p>说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。</p>\n<p>那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。<br><img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'></p>\n<p>有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp&#x2F;ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器—&gt;目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。</p>\n<p>这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。</p>\n<p>那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。</p>\n<p>文毕。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>不知道从什么时候开始，”挂个梯子”，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。</p>\n<p>说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。</p>\n<p>那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。<br><img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'></p>\n<p>有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp&#x2F;ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器—&gt;目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。</p>\n<p>这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。</p>\n<p>那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。</p>\n<p>文毕。</p>\n"},{"title":"做好预备动作","date":"2023-07-24T08:16:52.000Z","_content":"<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n**新时代农名工**，官方定义的从事软件开发工作的人(呵呵)，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。\n\n抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？.......\n\n内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生--誓言要看完图书馆里头的所有的书--->毫无可能性的事情）\n\n最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1=2“，他就知道了。别人问的时候，他回答1+1=2，说明他掌握了这项技能。技术的学习，不过如此。\n\n**计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果。这是事实。**\n\n**师傅说，每个人的生命，极大值撑死不过三万六千天。**大部分人，终其一生，可能都是被他人推着走完的。**埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。**\n\n我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。**珍惜现在已经拥有的，追寻明天你想要得到的。**\n\n在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的人生剧本，可以用一部当年的美剧的剧名来形容-----**The Walking Dead**。我始终坚信，**今天流的泪，都是tm当年脑子进的水**。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。\n\n**It's our duty.文毕**。","source":"_posts/做好预备动作.md","raw":"---\ntitle: 做好预备动作\ndate: 2023-07-24 16:16:52\ntags:\ncategories: '杂谈'\n---\n<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n**新时代农名工**，官方定义的从事软件开发工作的人(呵呵)，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。\n\n抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？.......\n\n内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生--誓言要看完图书馆里头的所有的书--->毫无可能性的事情）\n\n最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1=2“，他就知道了。别人问的时候，他回答1+1=2，说明他掌握了这项技能。技术的学习，不过如此。\n\n**计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果。这是事实。**\n\n**师傅说，每个人的生命，极大值撑死不过三万六千天。**大部分人，终其一生，可能都是被他人推着走完的。**埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。**\n\n我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。**珍惜现在已经拥有的，追寻明天你想要得到的。**\n\n在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的人生剧本，可以用一部当年的美剧的剧名来形容-----**The Walking Dead**。我始终坚信，**今天流的泪，都是tm当年脑子进的水**。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。\n\n**It's our duty.文毕**。","slug":"做好预备动作","published":1,"updated":"2023-08-03T13:38:14.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv1000q94vt5cksaxej","content":"<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n<p><strong>新时代农名工</strong>，官方定义的从事软件开发工作的人(呵呵)，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。</p>\n<p>抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？…….</p>\n<p>内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生–誓言要看完图书馆里头的所有的书—&gt;毫无可能性的事情）</p>\n<p>最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1&#x3D;2“，他就知道了。别人问的时候，他回答1+1&#x3D;2，说明他掌握了这项技能。技术的学习，不过如此。</p>\n<p><strong>计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果。这是事实。</strong></p>\n<p><strong>师傅说，每个人的生命，极大值撑死不过三万六千天。</strong>大部分人，终其一生，可能都是被他人推着走完的。<strong>埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。</strong></p>\n<p>我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。<strong>珍惜现在已经拥有的，追寻明天你想要得到的。</strong></p>\n<p>在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的人生剧本，可以用一部当年的美剧的剧名来形容—–<strong>The Walking Dead</strong>。我始终坚信，<strong>今天流的泪，都是tm当年脑子进的水</strong>。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。</p>\n<p><strong>It’s our duty.文毕</strong>。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n<p><strong>新时代农名工</strong>，官方定义的从事软件开发工作的人(呵呵)，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。</p>\n<p>抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？…….</p>\n<p>内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生–誓言要看完图书馆里头的所有的书—&gt;毫无可能性的事情）</p>\n<p>最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1&#x3D;2“，他就知道了。别人问的时候，他回答1+1&#x3D;2，说明他掌握了这项技能。技术的学习，不过如此。</p>\n<p><strong>计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果。这是事实。</strong></p>\n<p><strong>师傅说，每个人的生命，极大值撑死不过三万六千天。</strong>大部分人，终其一生，可能都是被他人推着走完的。<strong>埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。</strong></p>\n<p>我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。<strong>珍惜现在已经拥有的，追寻明天你想要得到的。</strong></p>\n<p>在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的人生剧本，可以用一部当年的美剧的剧名来形容—–<strong>The Walking Dead</strong>。我始终坚信，<strong>今天流的泪，都是tm当年脑子进的水</strong>。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。</p>\n<p><strong>It’s our duty.文毕</strong>。</p>\n"},{"title":"四轴无人机研究：第一回","date":"2023-07-31T02:27:23.000Z","_content":"\n无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其**尸骨**，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，**借尸还魂**。\n\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n#### 四旋翼无人机的大体构成\n- **飞控系统**。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。\n- **遥控系统**。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。\n- **动力系统**。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。\n- **图传**。搜集飞控返回的图像和其他飞行参数的各项信息。","source":"_posts/四轴无人机研究：第一回.md","raw":"---\ntitle: 四轴无人机研究：第一回\ncategory: 无人机系列\ndate: 2023-07-31 10:27:23\ntags:\n---\n\n无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其**尸骨**，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，**借尸还魂**。\n\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n#### 四旋翼无人机的大体构成\n- **飞控系统**。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。\n- **遥控系统**。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。\n- **动力系统**。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。\n- **图传**。搜集飞控返回的图像和其他飞行参数的各项信息。","slug":"四轴无人机研究：第一回","published":1,"updated":"2023-08-03T02:52:23.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv1000t94vt47o63bcy","content":"<p>无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其<strong>尸骨</strong>，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，<strong>借尸还魂</strong>。</p>\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n<h4 id=\"四旋翼无人机的大体构成\"><a href=\"#四旋翼无人机的大体构成\" class=\"headerlink\" title=\"四旋翼无人机的大体构成\"></a>四旋翼无人机的大体构成</h4><ul>\n<li><strong>飞控系统</strong>。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。</li>\n<li><strong>遥控系统</strong>。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。</li>\n<li><strong>动力系统</strong>。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。</li>\n<li><strong>图传</strong>。搜集飞控返回的图像和其他飞行参数的各项信息。</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其<strong>尸骨</strong>，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，<strong>借尸还魂</strong>。</p>\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n<h4 id=\"四旋翼无人机的大体构成\"><a href=\"#四旋翼无人机的大体构成\" class=\"headerlink\" title=\"四旋翼无人机的大体构成\"></a>四旋翼无人机的大体构成</h4><ul>\n<li><strong>飞控系统</strong>。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。</li>\n<li><strong>遥控系统</strong>。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。</li>\n<li><strong>动力系统</strong>。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。</li>\n<li><strong>图传</strong>。搜集飞控返回的图像和其他飞行参数的各项信息。</li>\n</ul>\n"},{"title":"性能的考量：第一回","date":"2023-08-03T09:16:31.000Z","_content":"\n**本文旨在梳理目下通用的性能优化方法**\n\n性能优化没有一个统一的指标，但目的是明确的，就是要让站点应用的加载速度够快，如此用户体验才能高（暂且不管页面做的烂不烂）。三个大的角度：带宽、延时和渲染耗时。\n\n那么由于现代光纤通信的大规模普及，带宽的影响因素，已经小到可以忽略不计的地步。剩下的就是延迟耗时和渲染。\n\n- **延迟耗时层面**。\n《计算机网络》的第六版中，对于延迟给出了明确的定义，从c端发出消息到s端收到消息的时间消耗，具体包括：排队延迟 --（缓冲）-> 处理延迟--（路由）->传输延迟--->传播延迟。\n1. 通过缓存资源，屏蔽无意义的重复请求。具体操作开启cache-control。\n2. 尽可能的减少请求。能合并的，尽可能地合并。\n3. 后端gzip压缩。\n4. 前端懒加载资源\n5. CDN：同样大小的资源，距离用户越近，耗时理论上越小（网速差距不大）。\n6. 长连接。规避无意义的建立链路耗时。\n...\n...\n上述的这些方案，基本可以用《高性能浏览器网络》的结论做总结：\n**优化的三大准则：**\n  - 再快也快不过什么也不用发送，能少发就少发。 （合并请求）\n  - 我们不能让数据传输得更快，但可以让它们传输的距离更短。 （CDN）\n  - 重用 TCP 连接是提升性能的关键。（长连接）\n\n- **渲染层面**\n1. DNS预解析甚至tcp链路预链接。\n假设页面中有几个超链接。用户没有点击的时候我就已经预解析了域名ip甚至链路都连接好了，这样，当用户点的时候，只剩下发送资源请求的耗时。但该方法用的不是很多。\n2. script标签defer或者async。由于在解析html时若碰到js代码就会牵扯到进程切换带来的开销且会阻塞html的解析，因此通过这俩属性规避之。\n<img src=\"/img/defer.png\" alt=\"图片描述\" width=\"500\">\n\n3. 减少重排重绘带来的不必要的开销。\n\n当然从后端的角度考虑，处理请求发出响应的耗时也需要考虑。所以优化方法： **让老板砸钱，换更高端的设备，才是王炸之策**\n毕。","source":"_posts/性能的考量：第一回.md","raw":"---\ntitle: 性能的考量：第一回\ncategory: 性能的考量\ndate: 2023-08-03 17:16:31\ntags:\n---\n\n**本文旨在梳理目下通用的性能优化方法**\n\n性能优化没有一个统一的指标，但目的是明确的，就是要让站点应用的加载速度够快，如此用户体验才能高（暂且不管页面做的烂不烂）。三个大的角度：带宽、延时和渲染耗时。\n\n那么由于现代光纤通信的大规模普及，带宽的影响因素，已经小到可以忽略不计的地步。剩下的就是延迟耗时和渲染。\n\n- **延迟耗时层面**。\n《计算机网络》的第六版中，对于延迟给出了明确的定义，从c端发出消息到s端收到消息的时间消耗，具体包括：排队延迟 --（缓冲）-> 处理延迟--（路由）->传输延迟--->传播延迟。\n1. 通过缓存资源，屏蔽无意义的重复请求。具体操作开启cache-control。\n2. 尽可能的减少请求。能合并的，尽可能地合并。\n3. 后端gzip压缩。\n4. 前端懒加载资源\n5. CDN：同样大小的资源，距离用户越近，耗时理论上越小（网速差距不大）。\n6. 长连接。规避无意义的建立链路耗时。\n...\n...\n上述的这些方案，基本可以用《高性能浏览器网络》的结论做总结：\n**优化的三大准则：**\n  - 再快也快不过什么也不用发送，能少发就少发。 （合并请求）\n  - 我们不能让数据传输得更快，但可以让它们传输的距离更短。 （CDN）\n  - 重用 TCP 连接是提升性能的关键。（长连接）\n\n- **渲染层面**\n1. DNS预解析甚至tcp链路预链接。\n假设页面中有几个超链接。用户没有点击的时候我就已经预解析了域名ip甚至链路都连接好了，这样，当用户点的时候，只剩下发送资源请求的耗时。但该方法用的不是很多。\n2. script标签defer或者async。由于在解析html时若碰到js代码就会牵扯到进程切换带来的开销且会阻塞html的解析，因此通过这俩属性规避之。\n<img src=\"/img/defer.png\" alt=\"图片描述\" width=\"500\">\n\n3. 减少重排重绘带来的不必要的开销。\n\n当然从后端的角度考虑，处理请求发出响应的耗时也需要考虑。所以优化方法： **让老板砸钱，换更高端的设备，才是王炸之策**\n毕。","slug":"性能的考量：第一回","published":1,"updated":"2023-08-03T12:34:15.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv2000v94vtgmdibi2u","content":"<p><strong>本文旨在梳理目下通用的性能优化方法</strong></p>\n<p>性能优化没有一个统一的指标，但目的是明确的，就是要让站点应用的加载速度够快，如此用户体验才能高（暂且不管页面做的烂不烂）。三个大的角度：带宽、延时和渲染耗时。</p>\n<p>那么由于现代光纤通信的大规模普及，带宽的影响因素，已经小到可以忽略不计的地步。剩下的就是延迟耗时和渲染。</p>\n<ul>\n<li><strong>延迟耗时层面</strong>。<br>《计算机网络》的第六版中，对于延迟给出了明确的定义，从c端发出消息到s端收到消息的时间消耗，具体包括：排队延迟 –（缓冲）-&gt; 处理延迟–（路由）-&gt;传输延迟—&gt;传播延迟。</li>\n</ul>\n<ol>\n<li>通过缓存资源，屏蔽无意义的重复请求。具体操作开启cache-control。</li>\n<li>尽可能的减少请求。能合并的，尽可能地合并。</li>\n<li>后端gzip压缩。</li>\n<li>前端懒加载资源</li>\n<li>CDN：同样大小的资源，距离用户越近，耗时理论上越小（网速差距不大）。</li>\n<li>长连接。规避无意义的建立链路耗时。<br>…<br>…<br>上述的这些方案，基本可以用《高性能浏览器网络》的结论做总结：<br><strong>优化的三大准则：</strong></li>\n</ol>\n<ul>\n<li><p>再快也快不过什么也不用发送，能少发就少发。 （合并请求）</p>\n</li>\n<li><p>我们不能让数据传输得更快，但可以让它们传输的距离更短。 （CDN）</p>\n</li>\n<li><p>重用 TCP 连接是提升性能的关键。（长连接）</p>\n</li>\n<li><p><strong>渲染层面</strong></p>\n</li>\n</ul>\n<ol>\n<li><p>DNS预解析甚至tcp链路预链接。<br>假设页面中有几个超链接。用户没有点击的时候我就已经预解析了域名ip甚至链路都连接好了，这样，当用户点的时候，只剩下发送资源请求的耗时。但该方法用的不是很多。</p>\n</li>\n<li><p>script标签defer或者async。由于在解析html时若碰到js代码就会牵扯到进程切换带来的开销且会阻塞html的解析，因此通过这俩属性规避之。</p>\n<img src=\"/img/defer.png\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>减少重排重绘带来的不必要的开销。</p>\n</li>\n</ol>\n<p>当然从后端的角度考虑，处理请求发出响应的耗时也需要考虑。所以优化方法： <strong>让老板砸钱，换更高端的设备，才是王炸之策</strong><br>毕。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本文旨在梳理目下通用的性能优化方法</strong></p>\n<p>性能优化没有一个统一的指标，但目的是明确的，就是要让站点应用的加载速度够快，如此用户体验才能高（暂且不管页面做的烂不烂）。三个大的角度：带宽、延时和渲染耗时。</p>\n<p>那么由于现代光纤通信的大规模普及，带宽的影响因素，已经小到可以忽略不计的地步。剩下的就是延迟耗时和渲染。</p>\n<ul>\n<li><strong>延迟耗时层面</strong>。<br>《计算机网络》的第六版中，对于延迟给出了明确的定义，从c端发出消息到s端收到消息的时间消耗，具体包括：排队延迟 –（缓冲）-&gt; 处理延迟–（路由）-&gt;传输延迟—&gt;传播延迟。</li>\n</ul>\n<ol>\n<li>通过缓存资源，屏蔽无意义的重复请求。具体操作开启cache-control。</li>\n<li>尽可能的减少请求。能合并的，尽可能地合并。</li>\n<li>后端gzip压缩。</li>\n<li>前端懒加载资源</li>\n<li>CDN：同样大小的资源，距离用户越近，耗时理论上越小（网速差距不大）。</li>\n<li>长连接。规避无意义的建立链路耗时。<br>…<br>…<br>上述的这些方案，基本可以用《高性能浏览器网络》的结论做总结：<br><strong>优化的三大准则：</strong></li>\n</ol>\n<ul>\n<li><p>再快也快不过什么也不用发送，能少发就少发。 （合并请求）</p>\n</li>\n<li><p>我们不能让数据传输得更快，但可以让它们传输的距离更短。 （CDN）</p>\n</li>\n<li><p>重用 TCP 连接是提升性能的关键。（长连接）</p>\n</li>\n<li><p><strong>渲染层面</strong></p>\n</li>\n</ul>\n<ol>\n<li><p>DNS预解析甚至tcp链路预链接。<br>假设页面中有几个超链接。用户没有点击的时候我就已经预解析了域名ip甚至链路都连接好了，这样，当用户点的时候，只剩下发送资源请求的耗时。但该方法用的不是很多。</p>\n</li>\n<li><p>script标签defer或者async。由于在解析html时若碰到js代码就会牵扯到进程切换带来的开销且会阻塞html的解析，因此通过这俩属性规避之。</p>\n<img src=\"/img/defer.png\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>减少重排重绘带来的不必要的开销。</p>\n</li>\n</ol>\n<p>当然从后端的角度考虑，处理请求发出响应的耗时也需要考虑。所以优化方法： <strong>让老板砸钱，换更高端的设备，才是王炸之策</strong><br>毕。</p>\n"},{"title":"性能的考量：第三回","date":"2023-08-03T12:46:07.000Z","_content":"\n**本文主介绍canvas的性能优化策略**\n\n关于性能问题,实际上,针对于类似管理系统这样的项目而言,不需要关注太多,也没那必要.但是对于图形编程类的项目而言,则是至关重要的指标.关乎生死.\n### 先点名canvas的耗时因素\n1. 图形的数量\n2. 图形的大小。\n3. 高质量、大文件的图片（画在画布上）\n\n图形编程类的项目,关注性能问题的原因,在于交互体验。比如我们废了半天劲写了一个web端的cs射击游戏,当我兴奋的准备往前走两步时,发现页面直接给我来了个帧数级别的慢动作,江湖说法叫做\"卡成狗\"，用户体验几乎为0。这种完全不能玩的应用,如同垃圾。\n\n### 我们首先来定义一下, 什么叫做卡?\n\"卡顿\"原理可以解释为,每一帧js主线程执行的事情过多,导致帧内时间没来得及干完,即当前帧耗时超过分配的帧时间。那么什么是\"分配的帧时间?之前说了,60hz举例,一秒钟60帧,那么一帧的时间大约在16.7ms.所以,如果在一帧内的耗时超过了16.7ms,就会出现视觉层面的\"卡\"。目前主流的屏幕基本都是60hz,也就是显示器,以每秒60次的频率闪频,也就是一秒钟会有60帧,但我们人眼无法察觉。\n\n**在实践的项目中，我们遇到了一个这样的警告：**\n<img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\">\n白话就是，“大哥，您在一帧时间内做的事情太多了，浏览器处理不过来了”。对项目的影响就是，拖拽和缩放视图导致不会很流畅。所以，为了解决卡的问题，我们该做点啥呢？\n\n1. canvas隔离。\ncanvas画布的更新，是以该节点为基础的，所以将需要重排或者重绘频率较高的图形,用单独的canvas隔离开,这样避免不必要的重绘成本。\n2. 事件的防抖节流处理。绘制的动作，不要频繁触发。\n3. 避免浮点运算\n> 虽然javascript提供了很方便的一些取整方法，像Math.floor，Math.ceil,parseInt，但是，国外友人做过测试，parseInt这个方法做了一些额外的工作（比如检测数据是不是有效\n> 的数值，parseInt 甚至先将参数转换成了字符串!），所以，直接用parseInt的话相对来说比较消耗性能。\n4. 局部渲染\n第一点中我们说过，canvas更新时以canvas节点为基础的，实际上这话说的不够严谨，因为我们可以有方法可以局部操作渲染，来避免这种更新方式，但需要做些额外的设置。具体参考canvas的clipAPI\n","source":"_posts/性能的考量：第三回.md","raw":"---\ntitle: 性能的考量：第三回\ncategory: 性能的考量\ndate: 2023-08-03 20:46:07\ntags:\n---\n\n**本文主介绍canvas的性能优化策略**\n\n关于性能问题,实际上,针对于类似管理系统这样的项目而言,不需要关注太多,也没那必要.但是对于图形编程类的项目而言,则是至关重要的指标.关乎生死.\n### 先点名canvas的耗时因素\n1. 图形的数量\n2. 图形的大小。\n3. 高质量、大文件的图片（画在画布上）\n\n图形编程类的项目,关注性能问题的原因,在于交互体验。比如我们废了半天劲写了一个web端的cs射击游戏,当我兴奋的准备往前走两步时,发现页面直接给我来了个帧数级别的慢动作,江湖说法叫做\"卡成狗\"，用户体验几乎为0。这种完全不能玩的应用,如同垃圾。\n\n### 我们首先来定义一下, 什么叫做卡?\n\"卡顿\"原理可以解释为,每一帧js主线程执行的事情过多,导致帧内时间没来得及干完,即当前帧耗时超过分配的帧时间。那么什么是\"分配的帧时间?之前说了,60hz举例,一秒钟60帧,那么一帧的时间大约在16.7ms.所以,如果在一帧内的耗时超过了16.7ms,就会出现视觉层面的\"卡\"。目前主流的屏幕基本都是60hz,也就是显示器,以每秒60次的频率闪频,也就是一秒钟会有60帧,但我们人眼无法察觉。\n\n**在实践的项目中，我们遇到了一个这样的警告：**\n<img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\">\n白话就是，“大哥，您在一帧时间内做的事情太多了，浏览器处理不过来了”。对项目的影响就是，拖拽和缩放视图导致不会很流畅。所以，为了解决卡的问题，我们该做点啥呢？\n\n1. canvas隔离。\ncanvas画布的更新，是以该节点为基础的，所以将需要重排或者重绘频率较高的图形,用单独的canvas隔离开,这样避免不必要的重绘成本。\n2. 事件的防抖节流处理。绘制的动作，不要频繁触发。\n3. 避免浮点运算\n> 虽然javascript提供了很方便的一些取整方法，像Math.floor，Math.ceil,parseInt，但是，国外友人做过测试，parseInt这个方法做了一些额外的工作（比如检测数据是不是有效\n> 的数值，parseInt 甚至先将参数转换成了字符串!），所以，直接用parseInt的话相对来说比较消耗性能。\n4. 局部渲染\n第一点中我们说过，canvas更新时以canvas节点为基础的，实际上这话说的不够严谨，因为我们可以有方法可以局部操作渲染，来避免这种更新方式，但需要做些额外的设置。具体参考canvas的clipAPI\n","slug":"性能的考量：第三回","published":1,"updated":"2023-08-07T02:02:52.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv3000y94vtfh0l6mwt","content":"<p><strong>本文主介绍canvas的性能优化策略</strong></p>\n<p>关于性能问题,实际上,针对于类似管理系统这样的项目而言,不需要关注太多,也没那必要.但是对于图形编程类的项目而言,则是至关重要的指标.关乎生死.</p>\n<h3 id=\"先点名canvas的耗时因素\"><a href=\"#先点名canvas的耗时因素\" class=\"headerlink\" title=\"先点名canvas的耗时因素\"></a>先点名canvas的耗时因素</h3><ol>\n<li>图形的数量</li>\n<li>图形的大小。</li>\n<li>高质量、大文件的图片（画在画布上）</li>\n</ol>\n<p>图形编程类的项目,关注性能问题的原因,在于交互体验。比如我们废了半天劲写了一个web端的cs射击游戏,当我兴奋的准备往前走两步时,发现页面直接给我来了个帧数级别的慢动作,江湖说法叫做”卡成狗”，用户体验几乎为0。这种完全不能玩的应用,如同垃圾。</p>\n<h3 id=\"我们首先来定义一下-什么叫做卡\"><a href=\"#我们首先来定义一下-什么叫做卡\" class=\"headerlink\" title=\"我们首先来定义一下, 什么叫做卡?\"></a>我们首先来定义一下, 什么叫做卡?</h3><p>“卡顿”原理可以解释为,每一帧js主线程执行的事情过多,导致帧内时间没来得及干完,即当前帧耗时超过分配的帧时间。那么什么是”分配的帧时间?之前说了,60hz举例,一秒钟60帧,那么一帧的时间大约在16.7ms.所以,如果在一帧内的耗时超过了16.7ms,就会出现视觉层面的”卡”。目前主流的屏幕基本都是60hz,也就是显示器,以每秒60次的频率闪频,也就是一秒钟会有60帧,但我们人眼无法察觉。</p>\n<p><strong>在实践的项目中，我们遇到了一个这样的警告：</strong><br><img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\"><br>白话就是，“大哥，您在一帧时间内做的事情太多了，浏览器处理不过来了”。对项目的影响就是，拖拽和缩放视图导致不会很流畅。所以，为了解决卡的问题，我们该做点啥呢？</p>\n<ol>\n<li>canvas隔离。<br>canvas画布的更新，是以该节点为基础的，所以将需要重排或者重绘频率较高的图形,用单独的canvas隔离开,这样避免不必要的重绘成本。</li>\n<li>事件的防抖节流处理。绘制的动作，不要频繁触发。</li>\n<li>避免浮点运算<blockquote>\n<p>虽然javascript提供了很方便的一些取整方法，像Math.floor，Math.ceil,parseInt，但是，国外友人做过测试，parseInt这个方法做了一些额外的工作（比如检测数据是不是有效<br>的数值，parseInt 甚至先将参数转换成了字符串!），所以，直接用parseInt的话相对来说比较消耗性能。</p>\n</blockquote>\n</li>\n<li>局部渲染<br>第一点中我们说过，canvas更新时以canvas节点为基础的，实际上这话说的不够严谨，因为我们可以有方法可以局部操作渲染，来避免这种更新方式，但需要做些额外的设置。具体参考canvas的clipAPI</li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本文主介绍canvas的性能优化策略</strong></p>\n<p>关于性能问题,实际上,针对于类似管理系统这样的项目而言,不需要关注太多,也没那必要.但是对于图形编程类的项目而言,则是至关重要的指标.关乎生死.</p>\n<h3 id=\"先点名canvas的耗时因素\"><a href=\"#先点名canvas的耗时因素\" class=\"headerlink\" title=\"先点名canvas的耗时因素\"></a>先点名canvas的耗时因素</h3><ol>\n<li>图形的数量</li>\n<li>图形的大小。</li>\n<li>高质量、大文件的图片（画在画布上）</li>\n</ol>\n<p>图形编程类的项目,关注性能问题的原因,在于交互体验。比如我们废了半天劲写了一个web端的cs射击游戏,当我兴奋的准备往前走两步时,发现页面直接给我来了个帧数级别的慢动作,江湖说法叫做”卡成狗”，用户体验几乎为0。这种完全不能玩的应用,如同垃圾。</p>\n<h3 id=\"我们首先来定义一下-什么叫做卡\"><a href=\"#我们首先来定义一下-什么叫做卡\" class=\"headerlink\" title=\"我们首先来定义一下, 什么叫做卡?\"></a>我们首先来定义一下, 什么叫做卡?</h3><p>“卡顿”原理可以解释为,每一帧js主线程执行的事情过多,导致帧内时间没来得及干完,即当前帧耗时超过分配的帧时间。那么什么是”分配的帧时间?之前说了,60hz举例,一秒钟60帧,那么一帧的时间大约在16.7ms.所以,如果在一帧内的耗时超过了16.7ms,就会出现视觉层面的”卡”。目前主流的屏幕基本都是60hz,也就是显示器,以每秒60次的频率闪频,也就是一秒钟会有60帧,但我们人眼无法察觉。</p>\n<p><strong>在实践的项目中，我们遇到了一个这样的警告：</strong><br><img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\"><br>白话就是，“大哥，您在一帧时间内做的事情太多了，浏览器处理不过来了”。对项目的影响就是，拖拽和缩放视图导致不会很流畅。所以，为了解决卡的问题，我们该做点啥呢？</p>\n<ol>\n<li>canvas隔离。<br>canvas画布的更新，是以该节点为基础的，所以将需要重排或者重绘频率较高的图形,用单独的canvas隔离开,这样避免不必要的重绘成本。</li>\n<li>事件的防抖节流处理。绘制的动作，不要频繁触发。</li>\n<li>避免浮点运算<blockquote>\n<p>虽然javascript提供了很方便的一些取整方法，像Math.floor，Math.ceil,parseInt，但是，国外友人做过测试，parseInt这个方法做了一些额外的工作（比如检测数据是不是有效<br>的数值，parseInt 甚至先将参数转换成了字符串!），所以，直接用parseInt的话相对来说比较消耗性能。</p>\n</blockquote>\n</li>\n<li>局部渲染<br>第一点中我们说过，canvas更新时以canvas节点为基础的，实际上这话说的不够严谨，因为我们可以有方法可以局部操作渲染，来避免这种更新方式，但需要做些额外的设置。具体参考canvas的clipAPI</li>\n</ol>\n"},{"title":"性能的考量：第二回","date":"2023-08-03T12:36:04.000Z","_content":"**本文主要是介绍一些实用的性能相关的工具**\n\n#### 工具traceroute\n我们都知道请求会通过不止一台路由器去跳转，直到找到最终的目标ip服务器。那么这个工具能够帮助你查看个中的细节。\n<img src=\"/img/tra.jpg\" alt=\"图片描述\" width=\"500\">\n\n#### performance对象\n运行一个前端项目，除了通过开发者工具中的memory组件，查看内存使用情况，实质上浏览器也提供了api。\n- 通过window的performance属性，我们能够看到一些陌生的字段。包含memory、navigation、timing和eventCounts。\n<img src=\"/img/p.jpg\" alt=\"图片描述\" width=\"500\">\n\n- memory字段。很显然，就是我们想看的内存的大小。usedJSHeapSize表示：JS 对象占用的内存数。totalJSHeapSize表示：可使用的内存大小。jsHeapSizeLimit表示：内存大小限制。通常，usedJSHeapSize不能大于totalJSHeapSize，如果大于，有可能出现了内存泄漏。\n<img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\">\n","source":"_posts/性能的考量：第二回.md","raw":"---\ntitle: 性能的考量：第二回\ncategory: 性能的考量\ndate: 2023-08-03 20:36:04\ntags:\n---\n**本文主要是介绍一些实用的性能相关的工具**\n\n#### 工具traceroute\n我们都知道请求会通过不止一台路由器去跳转，直到找到最终的目标ip服务器。那么这个工具能够帮助你查看个中的细节。\n<img src=\"/img/tra.jpg\" alt=\"图片描述\" width=\"500\">\n\n#### performance对象\n运行一个前端项目，除了通过开发者工具中的memory组件，查看内存使用情况，实质上浏览器也提供了api。\n- 通过window的performance属性，我们能够看到一些陌生的字段。包含memory、navigation、timing和eventCounts。\n<img src=\"/img/p.jpg\" alt=\"图片描述\" width=\"500\">\n\n- memory字段。很显然，就是我们想看的内存的大小。usedJSHeapSize表示：JS 对象占用的内存数。totalJSHeapSize表示：可使用的内存大小。jsHeapSizeLimit表示：内存大小限制。通常，usedJSHeapSize不能大于totalJSHeapSize，如果大于，有可能出现了内存泄漏。\n<img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\">\n","slug":"性能的考量：第二回","published":1,"updated":"2023-08-03T12:42:30.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv3001094vtbd5zcjx1","content":"<p><strong>本文主要是介绍一些实用的性能相关的工具</strong></p>\n<h4 id=\"工具traceroute\"><a href=\"#工具traceroute\" class=\"headerlink\" title=\"工具traceroute\"></a>工具traceroute</h4><p>我们都知道请求会通过不止一台路由器去跳转，直到找到最终的目标ip服务器。那么这个工具能够帮助你查看个中的细节。<br><img src=\"/img/tra.jpg\" alt=\"图片描述\" width=\"500\"></p>\n<h4 id=\"performance对象\"><a href=\"#performance对象\" class=\"headerlink\" title=\"performance对象\"></a>performance对象</h4><p>运行一个前端项目，除了通过开发者工具中的memory组件，查看内存使用情况，实质上浏览器也提供了api。</p>\n<ul>\n<li><p>通过window的performance属性，我们能够看到一些陌生的字段。包含memory、navigation、timing和eventCounts。</p>\n<img src=\"/img/p.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>memory字段。很显然，就是我们想看的内存的大小。usedJSHeapSize表示：JS 对象占用的内存数。totalJSHeapSize表示：可使用的内存大小。jsHeapSizeLimit表示：内存大小限制。通常，usedJSHeapSize不能大于totalJSHeapSize，如果大于，有可能出现了内存泄漏。</p>\n<img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\"></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本文主要是介绍一些实用的性能相关的工具</strong></p>\n<h4 id=\"工具traceroute\"><a href=\"#工具traceroute\" class=\"headerlink\" title=\"工具traceroute\"></a>工具traceroute</h4><p>我们都知道请求会通过不止一台路由器去跳转，直到找到最终的目标ip服务器。那么这个工具能够帮助你查看个中的细节。<br><img src=\"/img/tra.jpg\" alt=\"图片描述\" width=\"500\"></p>\n<h4 id=\"performance对象\"><a href=\"#performance对象\" class=\"headerlink\" title=\"performance对象\"></a>performance对象</h4><p>运行一个前端项目，除了通过开发者工具中的memory组件，查看内存使用情况，实质上浏览器也提供了api。</p>\n<ul>\n<li><p>通过window的performance属性，我们能够看到一些陌生的字段。包含memory、navigation、timing和eventCounts。</p>\n<img src=\"/img/p.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>memory字段。很显然，就是我们想看的内存的大小。usedJSHeapSize表示：JS 对象占用的内存数。totalJSHeapSize表示：可使用的内存大小。jsHeapSizeLimit表示：内存大小限制。通常，usedJSHeapSize不能大于totalJSHeapSize，如果大于，有可能出现了内存泄漏。</p>\n<img src=\"/img/p2.webp\" alt=\"图片描述\" width=\"500\"></li>\n</ul>\n"},{"title":"性能的考量：第四回","date":"2023-08-03T13:19:26.000Z","_content":"**本文从代码层面出发，介绍一些小技巧以提升性能**\n\n古语有云，千里之堤，溃于蚁穴，性能的问题如出一辙。尤其是在图形化编程的项目中，日积月累的烂代码，导致最终页面的崩盘。而此时，却束手无策，只能大量重构。因此，在写每一行代码的时候，都应该对性能有所考虑。\n\n#### 1.HTML、JS、CSS三者解耦，各司其职\nhtml是数据，js是行为，css负责外观。三者代表了三个层面，应该各司其职互不干扰.如下代码:\n```javascript\nconst dom = document.getElementById('id')\ndom.style.height = 100 + 'px'\ndom.style.width = 100 + 'px'\n```\ncss才应该负责样式层，所以任何的样式问题都应该通过css文件解决。而上述代码则是js承担了页面显示的任务。造成js和css的耦合。但是这种需求有时候不可避免，我们可以使用替代方案，降低耦合度：\n```javascript\nconst dom = document.getElementById('id')\ndom.className = 'dddd'\n```\n通过设置类名的方式，达到我们目的的同时，还能保持css负责显示的底线。\n\n#### 2.事件处理逻辑和应用程序逻辑分隔开\n```javascript\nconst handleClick = (event) => {\n  if (event.keyCode === 13) {\n    const dom = document.getElementById('dom')\n    // ......\n    // ......\n  }\n}\n```\n上面代码中，当按下某个code为13的案件后，触发了handleClick函数，然后获取dom进行后续的操作。在这个实例中，从获取dom开始的后续操作，就是应用程序的逻辑，需要严格提炼出来。改造如下：\n```javascript\nconst Operation = () => {\n  const dom = document.getElementById('dom')\n  // ......\n  // ......\n}\n\nconst handleClick = (event) => {\n  if (event.keyCode === 13) {\n    Operation()\n  }\n}\n```\n为什么要这么做？理由很简单，降低耦合度。设想一下，倘若现在不止一个事件会触发operation函数所做的事情呢？我是不是在每一个休要触发的地方都加上operation函数中的那托代码？这一点极其的重要，工程实践最佳。**事件处理程序应该专注于处理时间的分发，后续的处理必须严格交给应用程序的逻辑函数。**\n\n#### 3.避免全局查找\n**只要函数中存在引用超过两次的全局对象，就应该把这个变量保存为局部变量。**\n\n#### 4.if-else 较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\n尽量避免一坨一坨的if-else\n\n#### 5.一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\n```javascript\nlet v1 = 100\nlet v2 = [100, 200]\nlet v3 = 'asdasd'\n.....\n.....\nlet v1 = 100,\nv2 = [100, 200],\nv3 = 'asdasd'\n```","source":"_posts/性能的考量：第四回.md","raw":"---\ntitle: 性能的考量：第四回\ncategory: 性能的考量\ndate: 2023-08-03 21:19:26\ntags:\n---\n**本文从代码层面出发，介绍一些小技巧以提升性能**\n\n古语有云，千里之堤，溃于蚁穴，性能的问题如出一辙。尤其是在图形化编程的项目中，日积月累的烂代码，导致最终页面的崩盘。而此时，却束手无策，只能大量重构。因此，在写每一行代码的时候，都应该对性能有所考虑。\n\n#### 1.HTML、JS、CSS三者解耦，各司其职\nhtml是数据，js是行为，css负责外观。三者代表了三个层面，应该各司其职互不干扰.如下代码:\n```javascript\nconst dom = document.getElementById('id')\ndom.style.height = 100 + 'px'\ndom.style.width = 100 + 'px'\n```\ncss才应该负责样式层，所以任何的样式问题都应该通过css文件解决。而上述代码则是js承担了页面显示的任务。造成js和css的耦合。但是这种需求有时候不可避免，我们可以使用替代方案，降低耦合度：\n```javascript\nconst dom = document.getElementById('id')\ndom.className = 'dddd'\n```\n通过设置类名的方式，达到我们目的的同时，还能保持css负责显示的底线。\n\n#### 2.事件处理逻辑和应用程序逻辑分隔开\n```javascript\nconst handleClick = (event) => {\n  if (event.keyCode === 13) {\n    const dom = document.getElementById('dom')\n    // ......\n    // ......\n  }\n}\n```\n上面代码中，当按下某个code为13的案件后，触发了handleClick函数，然后获取dom进行后续的操作。在这个实例中，从获取dom开始的后续操作，就是应用程序的逻辑，需要严格提炼出来。改造如下：\n```javascript\nconst Operation = () => {\n  const dom = document.getElementById('dom')\n  // ......\n  // ......\n}\n\nconst handleClick = (event) => {\n  if (event.keyCode === 13) {\n    Operation()\n  }\n}\n```\n为什么要这么做？理由很简单，降低耦合度。设想一下，倘若现在不止一个事件会触发operation函数所做的事情呢？我是不是在每一个休要触发的地方都加上operation函数中的那托代码？这一点极其的重要，工程实践最佳。**事件处理程序应该专注于处理时间的分发，后续的处理必须严格交给应用程序的逻辑函数。**\n\n#### 3.避免全局查找\n**只要函数中存在引用超过两次的全局对象，就应该把这个变量保存为局部变量。**\n\n#### 4.if-else 较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\n尽量避免一坨一坨的if-else\n\n#### 5.一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\n```javascript\nlet v1 = 100\nlet v2 = [100, 200]\nlet v3 = 'asdasd'\n.....\n.....\nlet v1 = 100,\nv2 = [100, 200],\nv3 = 'asdasd'\n```","slug":"性能的考量：第四回","published":1,"updated":"2023-08-03T13:28:47.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv4001394vt2wxeflfd","content":"<p><strong>本文从代码层面出发，介绍一些小技巧以提升性能</strong></p>\n<p>古语有云，千里之堤，溃于蚁穴，性能的问题如出一辙。尤其是在图形化编程的项目中，日积月累的烂代码，导致最终页面的崩盘。而此时，却束手无策，只能大量重构。因此，在写每一行代码的时候，都应该对性能有所考虑。</p>\n<h4 id=\"1-HTML、JS、CSS三者解耦，各司其职\"><a href=\"#1-HTML、JS、CSS三者解耦，各司其职\" class=\"headerlink\" title=\"1.HTML、JS、CSS三者解耦，各司其职\"></a>1.HTML、JS、CSS三者解耦，各司其职</h4><p>html是数据，js是行为，css负责外观。三者代表了三个层面，应该各司其职互不干扰.如下代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">dom.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"number\">100</span> + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">dom.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"number\">100</span> + <span class=\"string\">&#x27;px&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>css才应该负责样式层，所以任何的样式问题都应该通过css文件解决。而上述代码则是js承担了页面显示的任务。造成js和css的耦合。但是这种需求有时候不可避免，我们可以使用替代方案，降低耦合度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">dom.<span class=\"property\">className</span> = <span class=\"string\">&#x27;dddd&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>通过设置类名的方式，达到我们目的的同时，还能保持css负责显示的底线。</p>\n<h4 id=\"2-事件处理逻辑和应用程序逻辑分隔开\"><a href=\"#2-事件处理逻辑和应用程序逻辑分隔开\" class=\"headerlink\" title=\"2.事件处理逻辑和应用程序逻辑分隔开\"></a>2.事件处理逻辑和应用程序逻辑分隔开</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleClick</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">keyCode</span> === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;dom&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，当按下某个code为13的案件后，触发了handleClick函数，然后获取dom进行后续的操作。在这个实例中，从获取dom开始的后续操作，就是应用程序的逻辑，需要严格提炼出来。改造如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Operation</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;dom&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// ......</span></span><br><span class=\"line\">  <span class=\"comment\">// ......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleClick</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">keyCode</span> === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Operation</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要这么做？理由很简单，降低耦合度。设想一下，倘若现在不止一个事件会触发operation函数所做的事情呢？我是不是在每一个休要触发的地方都加上operation函数中的那托代码？这一点极其的重要，工程实践最佳。<strong>事件处理程序应该专注于处理时间的分发，后续的处理必须严格交给应用程序的逻辑函数。</strong></p>\n<h4 id=\"3-避免全局查找\"><a href=\"#3-避免全局查找\" class=\"headerlink\" title=\"3.避免全局查找\"></a>3.避免全局查找</h4><p><strong>只要函数中存在引用超过两次的全局对象，就应该把这个变量保存为局部变量。</strong></p>\n<h4 id=\"4-if-else-较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\"><a href=\"#4-if-else-较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\" class=\"headerlink\" title=\"4.if-else 较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\"></a>4.if-else 较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能</h4><p>尽量避免一坨一坨的if-else</p>\n<h4 id=\"5-一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\"><a href=\"#5-一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\" class=\"headerlink\" title=\"5.一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\"></a>5.一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v1 = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> v3 = <span class=\"string\">&#x27;asdasd&#x27;</span></span><br><span class=\"line\">.....</span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = <span class=\"number\">100</span>,</span><br><span class=\"line\">v2 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>],</span><br><span class=\"line\">v3 = <span class=\"string\">&#x27;asdasd&#x27;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>本文从代码层面出发，介绍一些小技巧以提升性能</strong></p>\n<p>古语有云，千里之堤，溃于蚁穴，性能的问题如出一辙。尤其是在图形化编程的项目中，日积月累的烂代码，导致最终页面的崩盘。而此时，却束手无策，只能大量重构。因此，在写每一行代码的时候，都应该对性能有所考虑。</p>\n<h4 id=\"1-HTML、JS、CSS三者解耦，各司其职\"><a href=\"#1-HTML、JS、CSS三者解耦，各司其职\" class=\"headerlink\" title=\"1.HTML、JS、CSS三者解耦，各司其职\"></a>1.HTML、JS、CSS三者解耦，各司其职</h4><p>html是数据，js是行为，css负责外观。三者代表了三个层面，应该各司其职互不干扰.如下代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">dom.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"number\">100</span> + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">dom.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"number\">100</span> + <span class=\"string\">&#x27;px&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>css才应该负责样式层，所以任何的样式问题都应该通过css文件解决。而上述代码则是js承担了页面显示的任务。造成js和css的耦合。但是这种需求有时候不可避免，我们可以使用替代方案，降低耦合度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">dom.<span class=\"property\">className</span> = <span class=\"string\">&#x27;dddd&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>通过设置类名的方式，达到我们目的的同时，还能保持css负责显示的底线。</p>\n<h4 id=\"2-事件处理逻辑和应用程序逻辑分隔开\"><a href=\"#2-事件处理逻辑和应用程序逻辑分隔开\" class=\"headerlink\" title=\"2.事件处理逻辑和应用程序逻辑分隔开\"></a>2.事件处理逻辑和应用程序逻辑分隔开</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleClick</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">keyCode</span> === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;dom&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，当按下某个code为13的案件后，触发了handleClick函数，然后获取dom进行后续的操作。在这个实例中，从获取dom开始的后续操作，就是应用程序的逻辑，需要严格提炼出来。改造如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Operation</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;dom&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// ......</span></span><br><span class=\"line\">  <span class=\"comment\">// ......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleClick</span> = (<span class=\"params\">event</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">keyCode</span> === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Operation</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要这么做？理由很简单，降低耦合度。设想一下，倘若现在不止一个事件会触发operation函数所做的事情呢？我是不是在每一个休要触发的地方都加上operation函数中的那托代码？这一点极其的重要，工程实践最佳。<strong>事件处理程序应该专注于处理时间的分发，后续的处理必须严格交给应用程序的逻辑函数。</strong></p>\n<h4 id=\"3-避免全局查找\"><a href=\"#3-避免全局查找\" class=\"headerlink\" title=\"3.避免全局查找\"></a>3.避免全局查找</h4><p><strong>只要函数中存在引用超过两次的全局对象，就应该把这个变量保存为局部变量。</strong></p>\n<h4 id=\"4-if-else-较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\"><a href=\"#4-if-else-较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\" class=\"headerlink\" title=\"4.if-else 较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能\"></a>4.if-else 较为复杂的时候，使用switch替换。同时将最可能的情况放在前面，最不可能的往后放，以进一步提升性能</h4><p>尽量避免一坨一坨的if-else</p>\n<h4 id=\"5-一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\"><a href=\"#5-一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\" class=\"headerlink\" title=\"5.一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快\"></a>5.一条可以执行多个操作的语句，比多条语句中每个语句执行一个操作要快</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v1 = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> v3 = <span class=\"string\">&#x27;asdasd&#x27;</span></span><br><span class=\"line\">.....</span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"keyword\">let</span> v1 = <span class=\"number\">100</span>,</span><br><span class=\"line\">v2 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>],</span><br><span class=\"line\">v3 = <span class=\"string\">&#x27;asdasd&#x27;</span></span><br></pre></td></tr></table></figure>"},{"title":"设计模式：单例模式","date":"2023-08-03T08:37:13.000Z","_content":"**所谓单例模式，就是保证类的实例只有一个。思路很清晰，就是在构造函数中置一个标志，或者已存在的实例对象。先来一道简单版：**\n```javascript\nconst f = function(name) {\n  this.single = null\n  this.name =name\n}\n\nf.getObj = function(name) {\n  if(!this.single) {\n    this.single =  new f(name)\n    return this.single\n  } else {\n    return this.single\n  }\n}\n\nconst a = f.getObj('s1')\nconst b = f.getObj('s2')\nconsole.log(a)\nconsole.log(b)\n\n// f { single: null, name: 's1' }\n// f { single: null, name: 's1' }\n```\n这种实现方式其实很简单，实际上就是给构造函数f挂在了一个单独属性single，初次new时挂在上去之后，之后的每次new都是无效的，都会返回初次的那位。但是上述方法很是变扭，因为我们实例化通常都是用new而不是调用一个方法。为此，进行改进。\n```javascript\nconst f = function(html) {\n  this.html = html\n  this.single = null\n}\n\nf.prototype.init = function() {\n  let div = document.createElement('div')\n  div.innerHTML = this.html\n  this.single = div\n}\n\nconst proxy = (function() {\n  let instance\n  return function(html) {\n    if(!instance) {\n      instance = new f(html)\n    }\n    return instance  \n  }\n})()\n\nconst a = new proxy('s1')\nconst b = new proxy('s2')\nconsole.log('a:', a)\nconsole.log('b:', b)\n\n// a: f {html: \"s1\", single: div}\n// b: f {html: \"s1\", single: div}\n```\n因为闭包结构，使得只要调用proxy时，instance始终存在于当前环境，即唯一的那个实例。完美！","source":"_posts/设计模式：单例模式.md","raw":"---\ntitle: 设计模式：单例模式\ncategory: 大前端气宗专栏\ndate: 2023-08-03 16:37:13\ntags:\n---\n**所谓单例模式，就是保证类的实例只有一个。思路很清晰，就是在构造函数中置一个标志，或者已存在的实例对象。先来一道简单版：**\n```javascript\nconst f = function(name) {\n  this.single = null\n  this.name =name\n}\n\nf.getObj = function(name) {\n  if(!this.single) {\n    this.single =  new f(name)\n    return this.single\n  } else {\n    return this.single\n  }\n}\n\nconst a = f.getObj('s1')\nconst b = f.getObj('s2')\nconsole.log(a)\nconsole.log(b)\n\n// f { single: null, name: 's1' }\n// f { single: null, name: 's1' }\n```\n这种实现方式其实很简单，实际上就是给构造函数f挂在了一个单独属性single，初次new时挂在上去之后，之后的每次new都是无效的，都会返回初次的那位。但是上述方法很是变扭，因为我们实例化通常都是用new而不是调用一个方法。为此，进行改进。\n```javascript\nconst f = function(html) {\n  this.html = html\n  this.single = null\n}\n\nf.prototype.init = function() {\n  let div = document.createElement('div')\n  div.innerHTML = this.html\n  this.single = div\n}\n\nconst proxy = (function() {\n  let instance\n  return function(html) {\n    if(!instance) {\n      instance = new f(html)\n    }\n    return instance  \n  }\n})()\n\nconst a = new proxy('s1')\nconst b = new proxy('s2')\nconsole.log('a:', a)\nconsole.log('b:', b)\n\n// a: f {html: \"s1\", single: div}\n// b: f {html: \"s1\", single: div}\n```\n因为闭包结构，使得只要调用proxy时，instance始终存在于当前环境，即唯一的那个实例。完美！","slug":"设计模式：单例模式","published":1,"updated":"2023-08-07T03:11:14.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv5001494vtdanw7k6j","content":"<p><strong>所谓单例模式，就是保证类的实例只有一个。思路很清晰，就是在构造函数中置一个标志，或者已存在的实例对象。先来一道简单版：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> =name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f.<span class=\"property\">getObj</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"variable language_\">this</span>.<span class=\"property\">single</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> =  <span class=\"keyword\">new</span> <span class=\"title function_\">f</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">single</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">single</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = f.<span class=\"title function_\">getObj</span>(<span class=\"string\">&#x27;s1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = f.<span class=\"title function_\">getObj</span>(<span class=\"string\">&#x27;s2&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f &#123; single: null, name: &#x27;s1&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// f &#123; single: null, name: &#x27;s1&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>这种实现方式其实很简单，实际上就是给构造函数f挂在了一个单独属性single，初次new时挂在上去之后，之后的每次new都是无效的，都会返回初次的那位。但是上述方法很是变扭，因为我们实例化通常都是用new而不是调用一个方法。为此，进行改进。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">html</span> = html</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">init</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">  div.<span class=\"property\">innerHTML</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">html</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> = div</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!instance) &#123;</span><br><span class=\"line\">      instance = <span class=\"keyword\">new</span> <span class=\"title function_\">f</span>(html)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">proxy</span>(<span class=\"string\">&#x27;s1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">proxy</span>(<span class=\"string\">&#x27;s2&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a:&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b:&#x27;</span>, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a: f &#123;html: &quot;s1&quot;, single: div&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// b: f &#123;html: &quot;s1&quot;, single: div&#125;</span></span><br></pre></td></tr></table></figure>\n<p>因为闭包结构，使得只要调用proxy时，instance始终存在于当前环境，即唯一的那个实例。完美！</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><strong>所谓单例模式，就是保证类的实例只有一个。思路很清晰，就是在构造函数中置一个标志，或者已存在的实例对象。先来一道简单版：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> =name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f.<span class=\"property\">getObj</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"variable language_\">this</span>.<span class=\"property\">single</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> =  <span class=\"keyword\">new</span> <span class=\"title function_\">f</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">single</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">single</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = f.<span class=\"title function_\">getObj</span>(<span class=\"string\">&#x27;s1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = f.<span class=\"title function_\">getObj</span>(<span class=\"string\">&#x27;s2&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f &#123; single: null, name: &#x27;s1&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// f &#123; single: null, name: &#x27;s1&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>这种实现方式其实很简单，实际上就是给构造函数f挂在了一个单独属性single，初次new时挂在上去之后，之后的每次new都是无效的，都会返回初次的那位。但是上述方法很是变扭，因为我们实例化通常都是用new而不是调用一个方法。为此，进行改进。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">html</span> = html</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">init</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">  div.<span class=\"property\">innerHTML</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">html</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">single</span> = div</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!instance) &#123;</span><br><span class=\"line\">      instance = <span class=\"keyword\">new</span> <span class=\"title function_\">f</span>(html)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">proxy</span>(<span class=\"string\">&#x27;s1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">proxy</span>(<span class=\"string\">&#x27;s2&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a:&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b:&#x27;</span>, b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a: f &#123;html: &quot;s1&quot;, single: div&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// b: f &#123;html: &quot;s1&quot;, single: div&#125;</span></span><br></pre></td></tr></table></figure>\n<p>因为闭包结构，使得只要调用proxy时，instance始终存在于当前环境，即唯一的那个实例。完美！</p>\n"},{"title":"谷歌插件流程：第一回","date":"2023-08-03T13:55:39.000Z","_content":"相信经常使用chrome的小伙伴们，对其丰富的插件工具不会陌生。比如下载页面视频、音乐等等等。那么这些工具究竟是如何编写的呢？本文将以谷歌官方实例为基础，简单介绍一下chrome插件的开发流程，我们最终的目标，是写一个自己的视频下载器插件。部分内容参考下面地址文章\n> http://runxinzhi.com/wintertone-p-12053751.html\n\n#### 1. 第一步创建一个空的文件夹，后创建manifest.json文件，可以理解为整个插件的名片，代码如下。\n```json\n{\n  \"name\": \"Ta-da\",\n  \"description\": \"download_zhihu_short_video\",\n  \"version\": \"1.0\",\n  \"manifest_version\": 3,\n  \"background\": {\n    \"service_worker\": \"background.js\"\n  },\n  \"permissions\": [\"storage\", \"activeTab\", \"scripting\"],\n  \"action\": {\n    \"default_popup\": \"popup.html\"\n  }\n}  \n```\n- **service_worker**: 确定js文件\n- **default_popup**： 确定点击图标后的html\n\n#### 2. 创建background.js文件。manifest.json文件中的background字段，是一个包含service_worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background.js文件，代码如下：\n```javascript\nlet color = 'red';\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.storage.sync.set({ color });\n});\n// html文件如下:\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"button.css\">\n  </head>\n  <body>\n    <button id=\"changeColor\"></button>\n    <script src=\"popup.js\"></script>\n  </body>\n</html>\n{/* css */}\nbutton {\n  height: 30px;\n  width: 30px;\n  outline: none;\n  margin: 10px;\n  border: none;\n  border-radius: 2px;\n}\n\nbutton.current {\n  box-shadow: 0 0 0 2px white,\n              0 0 0 4px black;\n}\n\n```\n在html中我们引入了一个css和popupjs文件，同时定义了一个按钮。其中popupjs代码如下：\n```javascript\n\n// Initialize butotn with users's prefered color\nlet changeColor = document.getElementById(\"changeColor\");\nchrome.storage.sync.get(\"color\", ({ color }) => {\n  changeColor.style.backgroundColor = color;\n});\n\n// When the button is clicked, inject setPageBackgroundColor into current page\nchangeColor.addEventListener(\"click\", async () => {\n  let [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n  chrome.scripting.executeScript({\n    target: { tabId: tab.id },\n    function: setPageBackgroundColor,\n  });\n});\n\n// The body of this function will be execuetd as a content script inside the\n// current page\nfunction setPageBackgroundColor() {\n  chrome.storage.sync.get(\"color\", ({ color }) => {\n    document.body.style.backgroundColor = color\n  });\n}\n```\n该文件我们都做了啥？\n- 先是从chrome.storage中拿到color这个变量，然后改变了按钮的样式。这个很类似ipc，目的在于渲染进程和主进程的通信。此处就可以理解为渲染进程从主进程中拿到了一个叫做color的变量。\n- 监听按钮的点击事件，一旦点击，执行脚本**executeScript**。此处的事件回调就是改了下body的背景色。\n**到目前为止，我们已经可以把当前文件夹作为插件文件夹导入chrome浏览器中。首先在地址栏中输入chrome://extensions/打开扩展程序页面，点击页面顶部第一个选项“加载已解压的扩展程序”导入文件夹，然后就能看到如下所示的插件卡片：**\n<img src=\"/img/chrome1.png\" alt=\"图片描述\" width=\"500\">\n\n点击插件小图标：\n<img src=\"/img/chrome2.png\" alt=\"图片描述\" width=\"500\">\n\n点击按钮：\n<img src=\"/img/chrome3.png\" alt=\"图片描述\" width=\"500\">\n\n\n\n\n","source":"_posts/谷歌插件流程：第一回.md","raw":"---\ntitle: 谷歌插件流程：第一回\ncategory: 大前端剑宗专栏\ndate: 2023-08-03 21:55:39\ntags:\n---\n相信经常使用chrome的小伙伴们，对其丰富的插件工具不会陌生。比如下载页面视频、音乐等等等。那么这些工具究竟是如何编写的呢？本文将以谷歌官方实例为基础，简单介绍一下chrome插件的开发流程，我们最终的目标，是写一个自己的视频下载器插件。部分内容参考下面地址文章\n> http://runxinzhi.com/wintertone-p-12053751.html\n\n#### 1. 第一步创建一个空的文件夹，后创建manifest.json文件，可以理解为整个插件的名片，代码如下。\n```json\n{\n  \"name\": \"Ta-da\",\n  \"description\": \"download_zhihu_short_video\",\n  \"version\": \"1.0\",\n  \"manifest_version\": 3,\n  \"background\": {\n    \"service_worker\": \"background.js\"\n  },\n  \"permissions\": [\"storage\", \"activeTab\", \"scripting\"],\n  \"action\": {\n    \"default_popup\": \"popup.html\"\n  }\n}  \n```\n- **service_worker**: 确定js文件\n- **default_popup**： 确定点击图标后的html\n\n#### 2. 创建background.js文件。manifest.json文件中的background字段，是一个包含service_worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background.js文件，代码如下：\n```javascript\nlet color = 'red';\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.storage.sync.set({ color });\n});\n// html文件如下:\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"button.css\">\n  </head>\n  <body>\n    <button id=\"changeColor\"></button>\n    <script src=\"popup.js\"></script>\n  </body>\n</html>\n{/* css */}\nbutton {\n  height: 30px;\n  width: 30px;\n  outline: none;\n  margin: 10px;\n  border: none;\n  border-radius: 2px;\n}\n\nbutton.current {\n  box-shadow: 0 0 0 2px white,\n              0 0 0 4px black;\n}\n\n```\n在html中我们引入了一个css和popupjs文件，同时定义了一个按钮。其中popupjs代码如下：\n```javascript\n\n// Initialize butotn with users's prefered color\nlet changeColor = document.getElementById(\"changeColor\");\nchrome.storage.sync.get(\"color\", ({ color }) => {\n  changeColor.style.backgroundColor = color;\n});\n\n// When the button is clicked, inject setPageBackgroundColor into current page\nchangeColor.addEventListener(\"click\", async () => {\n  let [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n  chrome.scripting.executeScript({\n    target: { tabId: tab.id },\n    function: setPageBackgroundColor,\n  });\n});\n\n// The body of this function will be execuetd as a content script inside the\n// current page\nfunction setPageBackgroundColor() {\n  chrome.storage.sync.get(\"color\", ({ color }) => {\n    document.body.style.backgroundColor = color\n  });\n}\n```\n该文件我们都做了啥？\n- 先是从chrome.storage中拿到color这个变量，然后改变了按钮的样式。这个很类似ipc，目的在于渲染进程和主进程的通信。此处就可以理解为渲染进程从主进程中拿到了一个叫做color的变量。\n- 监听按钮的点击事件，一旦点击，执行脚本**executeScript**。此处的事件回调就是改了下body的背景色。\n**到目前为止，我们已经可以把当前文件夹作为插件文件夹导入chrome浏览器中。首先在地址栏中输入chrome://extensions/打开扩展程序页面，点击页面顶部第一个选项“加载已解压的扩展程序”导入文件夹，然后就能看到如下所示的插件卡片：**\n<img src=\"/img/chrome1.png\" alt=\"图片描述\" width=\"500\">\n\n点击插件小图标：\n<img src=\"/img/chrome2.png\" alt=\"图片描述\" width=\"500\">\n\n点击按钮：\n<img src=\"/img/chrome3.png\" alt=\"图片描述\" width=\"500\">\n\n\n\n\n","slug":"谷歌插件流程：第一回","published":1,"updated":"2023-08-07T03:10:26.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll0atcv5001794vth5a1euwa","content":"<p>相信经常使用chrome的小伙伴们，对其丰富的插件工具不会陌生。比如下载页面视频、音乐等等等。那么这些工具究竟是如何编写的呢？本文将以谷歌官方实例为基础，简单介绍一下chrome插件的开发流程，我们最终的目标，是写一个自己的视频下载器插件。部分内容参考下面地址文章</p>\n<blockquote>\n<p><a href=\"http://runxinzhi.com/wintertone-p-12053751.html\">http://runxinzhi.com/wintertone-p-12053751.html</a></p>\n</blockquote>\n<h4 id=\"1-第一步创建一个空的文件夹，后创建manifest-json文件，可以理解为整个插件的名片，代码如下。\"><a href=\"#1-第一步创建一个空的文件夹，后创建manifest-json文件，可以理解为整个插件的名片，代码如下。\" class=\"headerlink\" title=\"1. 第一步创建一个空的文件夹，后创建manifest.json文件，可以理解为整个插件的名片，代码如下。\"></a>1. 第一步创建一个空的文件夹，后创建manifest.json文件，可以理解为整个插件的名片，代码如下。</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Ta-da&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;download_zhihu_short_video&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;manifest_version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;service_worker&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;background.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;storage&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;activeTab&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;scripting&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;default_popup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>  </span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>service_worker</strong>: 确定js文件</li>\n<li><strong>default_popup</strong>： 确定点击图标后的html</li>\n</ul>\n<h4 id=\"2-创建background-js文件。manifest-json文件中的background字段，是一个包含service-worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background-js文件，代码如下：\"><a href=\"#2-创建background-js文件。manifest-json文件中的background字段，是一个包含service-worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background-js文件，代码如下：\" class=\"headerlink\" title=\"2. 创建background.js文件。manifest.json文件中的background字段，是一个包含service_worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background.js文件，代码如下：\"></a>2. 创建background.js文件。manifest.json文件中的background字段，是一个包含service_worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background.js文件，代码如下：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onInstalled</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  chrome.<span class=\"property\">storage</span>.<span class=\"property\">sync</span>.<span class=\"title function_\">set</span>(&#123; color &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// html文件如下:</span></span><br><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;button.css&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;changeColor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;popup.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;/* css */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">button &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">  height: 30px;</span></span><br><span class=\"line\"><span class=\"language-xml\">  width: 30px;</span></span><br><span class=\"line\"><span class=\"language-xml\">  outline: none;</span></span><br><span class=\"line\"><span class=\"language-xml\">  margin: 10px;</span></span><br><span class=\"line\"><span class=\"language-xml\">  border: none;</span></span><br><span class=\"line\"><span class=\"language-xml\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">button.current &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">  box-shadow: 0 0 0 2px white,</span></span><br><span class=\"line\"><span class=\"language-xml\">              0 0 0 4px black;</span></span><br><span class=\"line\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br></pre></td></tr></table></figure>\n<p>在html中我们引入了一个css和popupjs文件，同时定义了一个按钮。其中popupjs代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Initialize butotn with users&#x27;s prefered color</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> changeColor = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;changeColor&quot;</span>);</span><br><span class=\"line\">chrome.<span class=\"property\">storage</span>.<span class=\"property\">sync</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;color&quot;</span>, <span class=\"function\">(<span class=\"params\">&#123; color &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  changeColor.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// When the button is clicked, inject setPageBackgroundColor into current page</span></span><br><span class=\"line\">changeColor.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [tab] = <span class=\"keyword\">await</span> chrome.<span class=\"property\">tabs</span>.<span class=\"title function_\">query</span>(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">  chrome.<span class=\"property\">scripting</span>.<span class=\"title function_\">executeScript</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">target</span>: &#123; <span class=\"attr\">tabId</span>: tab.<span class=\"property\">id</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">function</span>: setPageBackgroundColor,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The body of this function will be execuetd as a content script inside the</span></span><br><span class=\"line\"><span class=\"comment\">// current page</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setPageBackgroundColor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  chrome.<span class=\"property\">storage</span>.<span class=\"property\">sync</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;color&quot;</span>, <span class=\"function\">(<span class=\"params\">&#123; color &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件我们都做了啥？</p>\n<ul>\n<li>先是从chrome.storage中拿到color这个变量，然后改变了按钮的样式。这个很类似ipc，目的在于渲染进程和主进程的通信。此处就可以理解为渲染进程从主进程中拿到了一个叫做color的变量。</li>\n<li>监听按钮的点击事件，一旦点击，执行脚本<strong>executeScript</strong>。此处的事件回调就是改了下body的背景色。<br><strong>到目前为止，我们已经可以把当前文件夹作为插件文件夹导入chrome浏览器中。首先在地址栏中输入chrome:&#x2F;&#x2F;extensions&#x2F;打开扩展程序页面，点击页面顶部第一个选项“加载已解压的扩展程序”导入文件夹，然后就能看到如下所示的插件卡片：</strong><img src=\"/img/chrome1.png\" alt=\"图片描述\" width=\"500\"></li>\n</ul>\n<p>点击插件小图标：<br><img src=\"/img/chrome2.png\" alt=\"图片描述\" width=\"500\"></p>\n<p>点击按钮：<br><img src=\"/img/chrome3.png\" alt=\"图片描述\" width=\"500\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>相信经常使用chrome的小伙伴们，对其丰富的插件工具不会陌生。比如下载页面视频、音乐等等等。那么这些工具究竟是如何编写的呢？本文将以谷歌官方实例为基础，简单介绍一下chrome插件的开发流程，我们最终的目标，是写一个自己的视频下载器插件。部分内容参考下面地址文章</p>\n<blockquote>\n<p><a href=\"http://runxinzhi.com/wintertone-p-12053751.html\">http://runxinzhi.com/wintertone-p-12053751.html</a></p>\n</blockquote>\n<h4 id=\"1-第一步创建一个空的文件夹，后创建manifest-json文件，可以理解为整个插件的名片，代码如下。\"><a href=\"#1-第一步创建一个空的文件夹，后创建manifest-json文件，可以理解为整个插件的名片，代码如下。\" class=\"headerlink\" title=\"1. 第一步创建一个空的文件夹，后创建manifest.json文件，可以理解为整个插件的名片，代码如下。\"></a>1. 第一步创建一个空的文件夹，后创建manifest.json文件，可以理解为整个插件的名片，代码如下。</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Ta-da&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;download_zhihu_short_video&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;manifest_version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;service_worker&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;background.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;storage&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;activeTab&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;scripting&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;default_popup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;popup.html&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>  </span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>service_worker</strong>: 确定js文件</li>\n<li><strong>default_popup</strong>： 确定点击图标后的html</li>\n</ul>\n<h4 id=\"2-创建background-js文件。manifest-json文件中的background字段，是一个包含service-worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background-js文件，代码如下：\"><a href=\"#2-创建background-js文件。manifest-json文件中的background字段，是一个包含service-worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background-js文件，代码如下：\" class=\"headerlink\" title=\"2. 创建background.js文件。manifest.json文件中的background字段，是一个包含service_worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background.js文件，代码如下：\"></a>2. 创建background.js文件。manifest.json文件中的background字段，是一个包含service_worker属性的对象，可以理解为该插件的环境，官方叫做服务视图。这里我们指定服务视图为background.js文件，代码如下：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onInstalled</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  chrome.<span class=\"property\">storage</span>.<span class=\"property\">sync</span>.<span class=\"title function_\">set</span>(&#123; color &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// html文件如下:</span></span><br><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;button.css&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;changeColor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;popup.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;/* css */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">button &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">  height: 30px;</span></span><br><span class=\"line\"><span class=\"language-xml\">  width: 30px;</span></span><br><span class=\"line\"><span class=\"language-xml\">  outline: none;</span></span><br><span class=\"line\"><span class=\"language-xml\">  margin: 10px;</span></span><br><span class=\"line\"><span class=\"language-xml\">  border: none;</span></span><br><span class=\"line\"><span class=\"language-xml\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">button.current &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">  box-shadow: 0 0 0 2px white,</span></span><br><span class=\"line\"><span class=\"language-xml\">              0 0 0 4px black;</span></span><br><span class=\"line\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br></pre></td></tr></table></figure>\n<p>在html中我们引入了一个css和popupjs文件，同时定义了一个按钮。其中popupjs代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Initialize butotn with users&#x27;s prefered color</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> changeColor = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;changeColor&quot;</span>);</span><br><span class=\"line\">chrome.<span class=\"property\">storage</span>.<span class=\"property\">sync</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;color&quot;</span>, <span class=\"function\">(<span class=\"params\">&#123; color &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  changeColor.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// When the button is clicked, inject setPageBackgroundColor into current page</span></span><br><span class=\"line\">changeColor.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [tab] = <span class=\"keyword\">await</span> chrome.<span class=\"property\">tabs</span>.<span class=\"title function_\">query</span>(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">  chrome.<span class=\"property\">scripting</span>.<span class=\"title function_\">executeScript</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">target</span>: &#123; <span class=\"attr\">tabId</span>: tab.<span class=\"property\">id</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">function</span>: setPageBackgroundColor,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The body of this function will be execuetd as a content script inside the</span></span><br><span class=\"line\"><span class=\"comment\">// current page</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setPageBackgroundColor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  chrome.<span class=\"property\">storage</span>.<span class=\"property\">sync</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;color&quot;</span>, <span class=\"function\">(<span class=\"params\">&#123; color &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该文件我们都做了啥？</p>\n<ul>\n<li>先是从chrome.storage中拿到color这个变量，然后改变了按钮的样式。这个很类似ipc，目的在于渲染进程和主进程的通信。此处就可以理解为渲染进程从主进程中拿到了一个叫做color的变量。</li>\n<li>监听按钮的点击事件，一旦点击，执行脚本<strong>executeScript</strong>。此处的事件回调就是改了下body的背景色。<br><strong>到目前为止，我们已经可以把当前文件夹作为插件文件夹导入chrome浏览器中。首先在地址栏中输入chrome:&#x2F;&#x2F;extensions&#x2F;打开扩展程序页面，点击页面顶部第一个选项“加载已解压的扩展程序”导入文件夹，然后就能看到如下所示的插件卡片：</strong><img src=\"/img/chrome1.png\" alt=\"图片描述\" width=\"500\"></li>\n</ul>\n<p>点击插件小图标：<br><img src=\"/img/chrome2.png\" alt=\"图片描述\" width=\"500\"></p>\n<p>点击按钮：<br><img src=\"/img/chrome3.png\" alt=\"图片描述\" width=\"500\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cll0atcui000094vt4xzs2pm4","category_id":"cll0atcup000294vtg1154qur","_id":"cll0atcus000994vt1c870qg1"},{"post_id":"cll0atcur000794vtf8oqfx9l","category_id":"cll0atcur000694vt2bt1g268","_id":"cll0atcuv000d94vtb4nzapm7"},{"post_id":"cll0atcun000194vt45si5eh4","category_id":"cll0atcur000694vt2bt1g268","_id":"cll0atcux000g94vtch4wfj3z"},{"post_id":"cll0atcuq000394vt57fuarzg","category_id":"cll0atcup000294vtg1154qur","_id":"cll0atcuz000j94vt3jvq41z5"},{"post_id":"cll0atcuq000494vt10qm0yj0","category_id":"cll0atcur000694vt2bt1g268","_id":"cll0atcv0000m94vt6frs46ry"},{"post_id":"cll0atcux000h94vtb2cv3ecj","category_id":"cll0atcur000694vt2bt1g268","_id":"cll0atcv1000p94vt16my7hoa"},{"post_id":"cll0atcuz000k94vt4p7289nd","category_id":"cll0atcup000294vtg1154qur","_id":"cll0atcv1000r94vthly8bj54"},{"post_id":"cll0atcur000594vta7b31mg4","category_id":"cll0atcuy000i94vt87t2gg9e","_id":"cll0atcv2000u94vtce2lawif"},{"post_id":"cll0atcv0000o94vtdmzkhp4y","category_id":"cll0atcur000694vt2bt1g268","_id":"cll0atcv3000w94vtfna7hdd1"},{"post_id":"cll0atcus000894vte57786xo","category_id":"cll0atcv0000n94vtcp6hcfkf","_id":"cll0atcv3000z94vtgpf97ec1"},{"post_id":"cll0atcut000b94vt680c31op","category_id":"cll0atcv0000n94vtcp6hcfkf","_id":"cll0atcv4001294vta4bghdwd"},{"post_id":"cll0atcuu000c94vt0nh6blxv","category_id":"cll0atcv0000n94vtcp6hcfkf","_id":"cll0atcv5001694vtgbz8gm1o"},{"post_id":"cll0atcuw000f94vt8w7thbc2","category_id":"cll0atcv0000n94vtcp6hcfkf","_id":"cll0atcv6001894vtdylc8pnd"},{"post_id":"cll0atcv5001494vtdanw7k6j","category_id":"cll0atcup000294vtg1154qur","_id":"cll0atcv6001a94vtbs590g39"},{"post_id":"cll0atcuz000l94vt2t5hh2g5","category_id":"cll0atcv5001594vt0gtxeme0","_id":"cll0atcv6001c94vt434o8q2l"},{"post_id":"cll0atcv1000q94vt5cksaxej","category_id":"cll0atcv5001594vt0gtxeme0","_id":"cll0atcv6001d94vtalrk4lzr"},{"post_id":"cll0atcv1000t94vt47o63bcy","category_id":"cll0atcv6001b94vt05cc7tqt","_id":"cll0atcv7001f94vtfwhra1tj"},{"post_id":"cll0atcv2000v94vtgmdibi2u","category_id":"cll0atcv6001e94vtbdvcfywi","_id":"cll0atcv7001i94vtaxc06ykk"},{"post_id":"cll0atcv3000y94vtfh0l6mwt","category_id":"cll0atcv6001e94vtbdvcfywi","_id":"cll0atcv7001k94vt65qd137x"},{"post_id":"cll0atcv3001094vtbd5zcjx1","category_id":"cll0atcv6001e94vtbdvcfywi","_id":"cll0atcv8001m94vt8q5f612u"},{"post_id":"cll0atcv4001394vt2wxeflfd","category_id":"cll0atcv6001e94vtbdvcfywi","_id":"cll0atcv8001n94vt34kmh37b"},{"post_id":"cll0atcv5001794vth5a1euwa","category_id":"cll0atcv8001l94vt50l52mdy","_id":"cll0atcv8001o94vt4gkzdwqz"}],"PostTag":[],"Tag":[]}}