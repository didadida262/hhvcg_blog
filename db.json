{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/air.png","path":"img/air.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/debugger.png","path":"img/debugger.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/f.jpg","path":"img/f.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/layout.jpeg","path":"img/layout.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/ladder.webp","path":"img/ladder.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/rrick.jpg","path":"img/rrick.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/img/你知道的太多了.jpg","path":"img/你知道的太多了.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Webkit系列：第一回.md","hash":"896b71d467c0168ebb77c8298f78d30327d27f11","modified":1691031520509},{"_id":"source/_posts/Webpack系列：第三回.md","hash":"598dafb28e844ef715761ff5b34e3117a99b9fc4","modified":1691030652869},{"_id":"source/_posts/Webpack系列：第一回.md","hash":"65c591a02518acd1b679a173cfb47a61a8883f61","modified":1690943028495},{"_id":"source/_posts/Webpack系列：第二回.md","hash":"e56bc1f289e47e616ab6dd2668399810914e0e35","modified":1690943028495},{"_id":"source/_posts/Webpack系列：第四回.md","hash":"2749775a6d536340f7f274a0ba1c806efadf6b28","modified":1690943028496},{"_id":"source/_posts/down视频资源时的偶然发现.md","hash":"7e3e6004e60396f7bdcaad8fe50f602c72a09012","modified":1691031268821},{"_id":"source/_posts/《万神殿》-上载智能.md","hash":"91b3cbae0a0009faf973bb8b8b8d5f56daf4680b","modified":1690943028496},{"_id":"source/_posts/做好预备动作.md","hash":"a95f137e7c645331d29a2a3615ac3c62b9e87a9e","modified":1690943028496},{"_id":"source/_posts/关于所谓的“梯子”的实现逻辑.md","hash":"aec148d80dc6d4219639e01e6ddbeff8843d51bf","modified":1691031058600},{"_id":"source/_posts/四轴无人机研究：第一回.md","hash":"3abbb70e9d0ccece4d0f0bb5ee3bf15eb32aeed5","modified":1691031143854},{"_id":"themes/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/README.md","hash":"df8de03d6695a73beaf54f35491fcd16c3cce3e9","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/package.json","hash":"1646604798f745ef068852772eb22239985ba731","modified":1690943028532},{"_id":"themes/hexo-theme-butterfly/plugins.yml","hash":"52cd80df42f07dd1c611651d706a6b1317dd33ae","modified":1690943028532},{"_id":"themes/hexo-theme-butterfly/README_CN.md","hash":"f35e3841643ffa641895e2dfeaa8f5dd4b178b9f","modified":1690943028500},{"_id":"themes/hexo-theme-butterfly/languages/default.yml","hash":"a194caf032fa2c9a73e2fcbc3b0e9b8217176034","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/_config.yml","hash":"3547e29cb1a4c207f276dc3c6c6562ee6d38a3dd","modified":1691032263632},{"_id":"themes/hexo-theme-butterfly/languages/en.yml","hash":"a8c7e4ad260d345adf3917af4aeabe972a1d8c15","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/languages/zh-CN.yml","hash":"9f886e3c91bac473a7ca36290622a2cfac9fccfd","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/languages/zh-TW.yml","hash":"2db89dd2899841d6d02b36a2cb042942e4aa7172","modified":1690943028501},{"_id":"themes/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1690943028502},{"_id":"themes/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1690943028502},{"_id":"themes/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1690943028531},{"_id":"themes/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1690943028531},{"_id":"themes/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1690943028531},{"_id":"themes/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1690943028532},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1690943028498},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1690943028498},{"_id":"themes/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1690943028498},{"_id":"themes/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1690943028499},{"_id":"themes/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1690943028502},{"_id":"themes/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1690943028507},{"_id":"themes/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1690943028511},{"_id":"themes/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1690943028511},{"_id":"themes/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1690943028533},{"_id":"themes/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1690943028533},{"_id":"themes/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1690943028534},{"_id":"themes/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1690943028535},{"_id":"themes/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1690943028535},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1690943028536},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1690943028537},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1690943028537},{"_id":"themes/hexo-theme-butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1690943028537},{"_id":"themes/hexo-theme-butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"6e0a80231f42a4d8e40e8360639e8a8f121721cb","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1690943028538},{"_id":"themes/hexo-theme-butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1690943028540},{"_id":"themes/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1690943028539},{"_id":"themes/hexo-theme-butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1690943028540},{"_id":"themes/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"ddd750a83e9eeb29ea691fea68a21cc6b04c2ea4","modified":1690943028540},{"_id":"themes/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1690943028541},{"_id":"themes/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1690943028554},{"_id":"themes/hexo-theme-butterfly/source/css/var.styl","hash":"7c475adc7b8487f565bc5014d71b28021c7911d2","modified":1690943028554},{"_id":"themes/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690943028554},{"_id":"themes/hexo-theme-butterfly/source/img/debugger.png","hash":"d31afdf7697916bf0829d662d3a325ea477873ff","modified":1691029809946},{"_id":"themes/hexo-theme-butterfly/source/img/f.jpg","hash":"63e6faf361c4544360213f43418ca8993c25f4c4","modified":1690943028558},{"_id":"themes/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690943028559},{"_id":"themes/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690943028560},{"_id":"themes/hexo-theme-butterfly/source/img/layout.jpeg","hash":"9f02179d493555d4b00a8e8c5738d51c1be1b7dd","modified":1691031478149},{"_id":"themes/hexo-theme-butterfly/source/img/ladder.webp","hash":"f90b7e15e28dd74927d11d0c4b4a7c0784409fc4","modified":1658889822408},{"_id":"themes/hexo-theme-butterfly/source/img/你知道的太多了.jpg","hash":"91ef0614c9f7890cab00160562a67ac2d3be6c87","modified":1691029791478},{"_id":"themes/hexo-theme-butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690943028561},{"_id":"themes/hexo-theme-butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690943028562},{"_id":"themes/hexo-theme-butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690943028563},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1690943028503},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1690943028504},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1690943028505},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1690943028506},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1690943028506},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1690943028506},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1690943028507},{"_id":"themes/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1690943028507},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1690943028508},{"_id":"themes/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"f0ccaa441efe0bff3365c6dec7f7a237f9a4e0d1","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1690943028509},{"_id":"themes/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1690943028510},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1690943028512},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1690943028527},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1690943028527},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1690943028527},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1690943028528},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"3ec354778f6a4ac97fb64d5629c83b293ccceb5e","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1690943028529},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1690943028530},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1690943028530},{"_id":"themes/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1690943028530},{"_id":"themes/hexo-theme-butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1690943028541},{"_id":"themes/hexo-theme-butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1690943028542},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1690943028542},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1690943028545},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1690943028546},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1690943028547},{"_id":"themes/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1690943028548},{"_id":"themes/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1690943028549},{"_id":"themes/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1690943028549},{"_id":"themes/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1690943028550},{"_id":"themes/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1690943028551},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1690943028551},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1690943028551},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1690943028552},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"1afd4ccb231294fc19a51cddc2e62e7c4d06de8e","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1690943028553},{"_id":"themes/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690943028562},{"_id":"themes/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690943028562},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1690943028511},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1690943028512},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1690943028512},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1690943028513},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1690943028514},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1690943028514},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1690943028514},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1690943028515},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1690943028516},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1690943028516},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1690943028516},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1690943028517},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1690943028517},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1690943028517},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1690943028518},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1690943028518},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1690943028518},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1690943028519},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1690943028520},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1690943028521},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1690943028522},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1690943028522},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1690943028522},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1690943028523},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1690943028524},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1690943028525},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1690943028526},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1690943028542},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1690943028543},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1690943028543},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1690943028543},{"_id":"themes/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1690943028544},{"_id":"themes/hexo-theme-butterfly/source/img/air.png","hash":"4e2268189e42f21c1b4960a5a3208cc90ec13e63","modified":1690943028556},{"_id":"themes/hexo-theme-butterfly/source/img/rrick.jpg","hash":"955c42b436a99bd289eca219916a112128904de6","modified":1690943028561},{"_id":"themes/hexo-theme-butterfly/source/img/avatar.jpg","hash":"c49270e383f2d7deffea82222e8a8455ff356b02","modified":1690943028558},{"_id":"public/2023/07/25/Webpack系列：第四回/index.html","hash":"2d94f668c9154f1e15c5cb3b2da5f4f40164446d","modified":1691032694017},{"_id":"public/2023/08/03/关于所谓的“梯子”的实现逻辑/index.html","hash":"06041a142485f82772ebf83fb0d1b592433da676","modified":1691032694017},{"_id":"public/2023/08/03/down视频资源时的偶然发现/index.html","hash":"98fac706ba001fe9146383d7edfcc71e3092d98c","modified":1691032694017},{"_id":"public/2023/07/28/Webkit系列：第一回/index.html","hash":"3126ac3d044a0d41b945ca2ef4687027d08c0dfc","modified":1691032694017},{"_id":"public/2023/07/31/四轴无人机研究：第一回/index.html","hash":"bf98f1bb07721e0db6553ef09c964a66e947d016","modified":1691032694017},{"_id":"public/2023/07/24/Webpack系列：第三回/index.html","hash":"4b10c7fb1faec2c099f60a06bd7c90803c930aa6","modified":1691032694017},{"_id":"public/archives/2023/08/index.html","hash":"8df5d99ec060d9dec905a4c6d8f84744e8e0688f","modified":1691032694017},{"_id":"public/categories/网络杂谈/index.html","hash":"798fc4b350d5710a99211cd6be13371d894d9c25","modified":1691032694017},{"_id":"public/categories/杂谈/index.html","hash":"6ef78f5b37f5b237df5e24db0790bd3ccca2d005","modified":1691032694017},{"_id":"public/categories/Webkit系列/index.html","hash":"4068526c08656ff084b25c5701b4f1a1c5e20753","modified":1691032694017},{"_id":"public/categories/无人机系列/index.html","hash":"13d317935539dc703a9de9125af87ca7f1160edf","modified":1691032694017},{"_id":"public/2023/07/24/Webpack系列：第二回/index.html","hash":"23f46432a5baefc9c0e72bc1ca8ee0852fa4e84d","modified":1691032694017},{"_id":"public/2023/07/24/《万神殿》-上载智能/index.html","hash":"fe163f63e7499c74ce22acb8af3c0266a986a355","modified":1691032694017},{"_id":"public/2023/07/24/Webpack系列：第一回/index.html","hash":"53007aa0b75b40fffa1e6a5cc99af2fa06700271","modified":1691032694017},{"_id":"public/2023/07/24/做好预备动作/index.html","hash":"ba906acede9b393a79231788f126d0252837adaf","modified":1691032694017},{"_id":"public/archives/2023/index.html","hash":"ccef0a63b673298e50aa20ba4f96247d0bdca4c2","modified":1691032694017},{"_id":"public/archives/index.html","hash":"f2b6ff5adc1ffb2e4f22e742502cb842b363c5d5","modified":1691032694017},{"_id":"public/categories/Webpack/index.html","hash":"1b65685d7ce9d86337b2303dfac4a264e5806958","modified":1691032694017},{"_id":"public/archives/2023/07/index.html","hash":"22c11395216556e469f95222a957516429962b22","modified":1691032694017},{"_id":"public/index.html","hash":"bbb2da432c864ddd959b7e2d1c3dbe1684adddb6","modified":1691032694017},{"_id":"public/img/debugger.png","hash":"d31afdf7697916bf0829d662d3a325ea477873ff","modified":1691032694017},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1691032694017},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1691032694017},{"_id":"public/img/layout.jpeg","hash":"9f02179d493555d4b00a8e8c5738d51c1be1b7dd","modified":1691032694017},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1691032694017},{"_id":"public/img/ladder.webp","hash":"f90b7e15e28dd74927d11d0c4b4a7c0784409fc4","modified":1691032694017},{"_id":"public/img/你知道的太多了.jpg","hash":"91ef0614c9f7890cab00160562a67ac2d3be6c87","modified":1691032694017},{"_id":"public/img/f.jpg","hash":"63e6faf361c4544360213f43418ca8993c25f4c4","modified":1691032694017},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1691032694017},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1691032694017},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1691032694017},{"_id":"public/css/index.css","hash":"7596612856f01a372d7149a67435d9cb83b1255d","modified":1691032694017},{"_id":"public/img/air.png","hash":"4e2268189e42f21c1b4960a5a3208cc90ec13e63","modified":1691032694017},{"_id":"public/img/rrick.jpg","hash":"955c42b436a99bd289eca219916a112128904de6","modified":1691032694017},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1691032694017},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1691032694017},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1691032694017},{"_id":"public/img/avatar.jpg","hash":"c49270e383f2d7deffea82222e8a8455ff356b02","modified":1691032694017}],"Category":[{"name":"Webpack","_id":"clkul7dvg0002lcvt2bxx29pa"},{"name":"网络杂谈","_id":"clkul7dvj0006lcvt45kg58od"},{"name":"杂谈","_id":"clkul7dvn000flcvt847ddox4"},{"name":"Webkit系列","_id":"clkul7dvo000jlcvtafgue3a9"},{"name":"无人机系列","_id":"clkul7dvp000nlcvt18fi88ci"}],"Data":[],"Page":[],"Post":[{"title":"Webpack系列：第三回","date":"2023-07-24T14:39:47.000Z","_content":"继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。\n\n### Webpack打包总体流程\n#### 最最精简的webpack打包文件\n```js\n(function(modules) { // webpackBootstrap\n     // The module cache已经加载过的模块\n    var installedModules = {};\n    // The require function模块加载函数， 核心\n    function __webpack_require__(moduleId) {\n        // Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块\n        if(installedModules[moduleId]) {\n             return installedModules[moduleId].exports;\n        }\n         // Create a new module (and put it into the cache)\n         var module = installedModules[moduleId] = {\n             i: moduleId,\n             l: false,\n            exports: {}\n         };\n\n         // Execute the module function执行加载函数\n         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n         // Flag the module as loaded标记该模块已经加载\n        module.l = true;\n\n        // Return the exports of the module\n         return module.exports;\n     }\n     return __webpack_require__(0) //入口文件\n\n })([\n    // 依赖数组\n/* 0 */\n (function(module, exports) {\n    module.exports = \"Hello World\";\n }\n ...\n ...\n )]);\n```\n#### 1. 从入口文件开始，分析文件的所有依赖\n#### 2. 将每一个依赖模块包装起来，放进一个数组中等待调用\n- 此处的数组，就是IIFE的入参依赖数组\n#### 3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\n#### 4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\n- 需要注意__webpack_require__是一个递归\n\n\n\n","source":"_posts/Webpack系列：第三回.md","raw":"---\ntitle: Webpack系列：第三回\ndate: 2023-07-24 22:39:47\ntags:\ncategory: Webpack\n---\n继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。\n\n### Webpack打包总体流程\n#### 最最精简的webpack打包文件\n```js\n(function(modules) { // webpackBootstrap\n     // The module cache已经加载过的模块\n    var installedModules = {};\n    // The require function模块加载函数， 核心\n    function __webpack_require__(moduleId) {\n        // Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块\n        if(installedModules[moduleId]) {\n             return installedModules[moduleId].exports;\n        }\n         // Create a new module (and put it into the cache)\n         var module = installedModules[moduleId] = {\n             i: moduleId,\n             l: false,\n            exports: {}\n         };\n\n         // Execute the module function执行加载函数\n         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n         // Flag the module as loaded标记该模块已经加载\n        module.l = true;\n\n        // Return the exports of the module\n         return module.exports;\n     }\n     return __webpack_require__(0) //入口文件\n\n })([\n    // 依赖数组\n/* 0 */\n (function(module, exports) {\n    module.exports = \"Hello World\";\n }\n ...\n ...\n )]);\n```\n#### 1. 从入口文件开始，分析文件的所有依赖\n#### 2. 将每一个依赖模块包装起来，放进一个数组中等待调用\n- 此处的数组，就是IIFE的入参依赖数组\n#### 3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\n#### 4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\n- 需要注意__webpack_require__是一个递归\n\n\n\n","slug":"Webpack系列：第三回","published":1,"updated":"2023-08-03T02:44:12.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvb0000lcvt01dj7f4e","content":"<p>继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。</p>\n<h3 id=\"Webpack打包总体流程\"><a href=\"#Webpack打包总体流程\" class=\"headerlink\" title=\"Webpack打包总体流程\"></a>Webpack打包总体流程</h3><h4 id=\"最最精简的webpack打包文件\"><a href=\"#最最精简的webpack打包文件\" class=\"headerlink\" title=\"最最精简的webpack打包文件\"></a>最最精简的webpack打包文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\">     <span class=\"comment\">// The module cache已经加载过的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// The require function模块加载函数， 核心</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">             <span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\">             <span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Execute the module function执行加载函数</span></span><br><span class=\"line\">         modules[moduleId].<span class=\"title function_\">call</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Flag the module as loaded标记该模块已经加载</span></span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>) <span class=\"comment\">//入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)([</span><br><span class=\"line\">    <span class=\"comment\">// 依赖数组</span></span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"> (<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> )]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-从入口文件开始，分析文件的所有依赖\"><a href=\"#1-从入口文件开始，分析文件的所有依赖\" class=\"headerlink\" title=\"1. 从入口文件开始，分析文件的所有依赖\"></a>1. 从入口文件开始，分析文件的所有依赖</h4><h4 id=\"2-将每一个依赖模块包装起来，放进一个数组中等待调用\"><a href=\"#2-将每一个依赖模块包装起来，放进一个数组中等待调用\" class=\"headerlink\" title=\"2. 将每一个依赖模块包装起来，放进一个数组中等待调用\"></a>2. 将每一个依赖模块包装起来，放进一个数组中等待调用</h4><ul>\n<li>此处的数组，就是IIFE的入参依赖数组</li>\n</ul>\n<h4 id=\"3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"><a href=\"#3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\" class=\"headerlink\" title=\"3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"></a>3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用</h4><h4 id=\"4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"><a href=\"#4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\" class=\"headerlink\" title=\"4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"></a>4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数</h4><ul>\n<li>需要注意__webpack_require__是一个递归</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>继前文简单介绍了下前端模块发展史，以此作为铺垫，本文将会简单梳理下webpack的基本打包思路。</p>\n<h3 id=\"Webpack打包总体流程\"><a href=\"#Webpack打包总体流程\" class=\"headerlink\" title=\"Webpack打包总体流程\"></a>Webpack打包总体流程</h3><h4 id=\"最最精简的webpack打包文件\"><a href=\"#最最精简的webpack打包文件\" class=\"headerlink\" title=\"最最精简的webpack打包文件\"></a>最最精简的webpack打包文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\">     <span class=\"comment\">// The module cache已经加载过的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// The require function模块加载函数， 核心</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check if module is in cache判断模块是否已经加载过，若加载过直接返回加载的模块</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">             <span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\">             <span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Execute the module function执行加载函数</span></span><br><span class=\"line\">         modules[moduleId].<span class=\"title function_\">call</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Flag the module as loaded标记该模块已经加载</span></span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>) <span class=\"comment\">//入口文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)([</span><br><span class=\"line\">    <span class=\"comment\">// 依赖数组</span></span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"> (<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> )]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-从入口文件开始，分析文件的所有依赖\"><a href=\"#1-从入口文件开始，分析文件的所有依赖\" class=\"headerlink\" title=\"1. 从入口文件开始，分析文件的所有依赖\"></a>1. 从入口文件开始，分析文件的所有依赖</h4><h4 id=\"2-将每一个依赖模块包装起来，放进一个数组中等待调用\"><a href=\"#2-将每一个依赖模块包装起来，放进一个数组中等待调用\" class=\"headerlink\" title=\"2. 将每一个依赖模块包装起来，放进一个数组中等待调用\"></a>2. 将每一个依赖模块包装起来，放进一个数组中等待调用</h4><ul>\n<li>此处的数组，就是IIFE的入参依赖数组</li>\n</ul>\n<h4 id=\"3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"><a href=\"#3-实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\" class=\"headerlink\" title=\"3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用\"></a>3. 实现模块加载的方法，并将其放入模块执行的环境中，确保可调用</h4><h4 id=\"4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"><a href=\"#4-将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\" class=\"headerlink\" title=\"4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数\"></a>4. 将执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数</h4><ul>\n<li>需要注意__webpack_require__是一个递归</li>\n</ul>\n"},{"title":"down视频资源时的偶然发现","date":"2023-08-03T02:28:44.000Z","_content":"\n鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？\n\n关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。\n\n但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？\n\n**当我打开控制台懵逼了。**\n- 快捷键打开控制台：弹框“你知道的太多了”,直接无法打开...\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 页面一直死循环debugger!!!。\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\">\n\n手段真骚。仔细看下代码（图片有点模糊）：\n\n```javascript\n<script type=\"text/javascript\">\n    document.onkeydown = function() {\n        var e = window.event || arguments[0];\n        if (e.keyCode == 123) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.shiftKey) && (e.keyCode == 73)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 85)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 83)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n    }\n    ;\n    var threshold = 160;\n    window.setInterval(function() {\n        if (window.outerWidth - window.innerWidth > threshold || window.outerHeight - window.innerHeight > threshold) {\n            function disableDebugger() {\n                debugger ;\n            }\n            $(document).ready(function() {\n                disableDebugger();\n            });\n        }\n    }, 1e3);\n</script>\n```\n\n**针对第一点：**\n设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。\n\n**针对第二点：**\n除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。\n页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。\n这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。所以怎么破呢？","source":"_posts/down视频资源时的偶然发现.md","raw":"---\ntitle: down视频资源时的偶然发现\ncategory: 网络杂谈\ndate: 2023-08-03 10:28:44\ntags:\n---\n\n鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？\n\n关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。\n\n但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？\n\n**当我打开控制台懵逼了。**\n- 快捷键打开控制台：弹框“你知道的太多了”,直接无法打开...\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n\n- 页面一直死循环debugger!!!。\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\">\n\n手段真骚。仔细看下代码（图片有点模糊）：\n\n```javascript\n<script type=\"text/javascript\">\n    document.onkeydown = function() {\n        var e = window.event || arguments[0];\n        if (e.keyCode == 123) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.shiftKey) && (e.keyCode == 73)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 85)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n        if ((e.ctrlKey) && (e.keyCode == 83)) {\n            alert('你知道的太多了！');\n            return false;\n        }\n    }\n    ;\n    var threshold = 160;\n    window.setInterval(function() {\n        if (window.outerWidth - window.innerWidth > threshold || window.outerHeight - window.innerHeight > threshold) {\n            function disableDebugger() {\n                debugger ;\n            }\n            $(document).ready(function() {\n                disableDebugger();\n            });\n        }\n    }, 1e3);\n</script>\n```\n\n**针对第一点：**\n设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。\n\n**针对第二点：**\n除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。\n页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。\n这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。所以怎么破呢？","slug":"down视频资源时的偶然发现","published":1,"updated":"2023-08-03T02:54:28.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvf0001lcvt5l167juk","content":"<p>鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？</p>\n<p>关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。</p>\n<p>但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？</p>\n<p><strong>当我打开控制台懵逼了。</strong></p>\n<ul>\n<li><p>快捷键打开控制台：弹框“你知道的太多了”,直接无法打开…</p>\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>页面一直死循环debugger!!!。</p>\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\"></li>\n</ul>\n<p>手段真骚。仔细看下代码（图片有点模糊）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onkeydown</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"variable language_\">window</span>.<span class=\"property\">event</span> || <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.<span class=\"property\">keyCode</span> == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">shiftKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">73</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">85</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">83</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> threshold = <span class=\"number\">160</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">outerWidth</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> &gt; threshold || <span class=\"variable language_\">window</span>.<span class=\"property\">outerHeight</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> &gt; threshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">function</span> <span class=\"title function_\">disableDebugger</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">debugger</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">disableDebugger</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>针对第一点：</strong><br>设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。</p>\n<p><strong>针对第二点：</strong><br>除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。<br>页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。<br>这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。所以怎么破呢？</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>鄙人关于互联网上的资源，向来的主张都是：但凡挂到了网上的资源，都应该免费共享。这也是伯纳斯李那些前辈们的初衷。但是目下很多站点尤其视频站点以版权为由，在制造各种障碍阻挠我们去获取到，自认为很有价值的东西。我觉得吧，版权固然要保护，对于那些利用有版权的东西获利的人必须严厉打击但是，向我们这种纯粹想down下来收藏的人，是不是太过不友好？</p>\n<p>关于视频资源的处理，各有千秋。有直接暴露src的，也有通过blob伪加密的，也有片段加载的，总体来讲，手段低劣，都不用自己去写工具，稍微懂点搜索常识的小白，也可以很容易的找到对应的工具达到目的。比如b站的you-get，油管的seg等。</p>\n<p>但是，最近碰到个手段风骚的站点。起因出于自己想借重温一遍《Big Bang》联系听力，但是翻了半天几乎没有可用的，即使可用但是字幕糟糕。索性就找了个在线的站点。看着看着老毛病又犯了，这么好的资源down下来岂不美哉？</p>\n<p><strong>当我打开控制台懵逼了。</strong></p>\n<ul>\n<li><p>快捷键打开控制台：弹框“你知道的太多了”,直接无法打开…</p>\n<img src=\"/img/你知道的太多了.jpg\" alt=\"图片描述\" width=\"500\">\n</li>\n<li><p>页面一直死循环debugger!!!。</p>\n<img src=\"/img/debugger.png\" alt=\"图片描述\" width=\"800\"></li>\n</ul>\n<p>手段真骚。仔细看下代码（图片有点模糊）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">onkeydown</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"variable language_\">window</span>.<span class=\"property\">event</span> || <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.<span class=\"property\">keyCode</span> == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">shiftKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">73</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">85</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e.<span class=\"property\">ctrlKey</span>) &amp;&amp; (e.<span class=\"property\">keyCode</span> == <span class=\"number\">83</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;你知道的太多了！&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> threshold = <span class=\"number\">160</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">outerWidth</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span> &gt; threshold || <span class=\"variable language_\">window</span>.<span class=\"property\">outerHeight</span> - <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> &gt; threshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">function</span> <span class=\"title function_\">disableDebugger</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">debugger</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">disableDebugger</span>();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>针对第一点：</strong><br>设置按键监听函数，纯按键操作连控制台都打不开，还给了个温馨的提示“你知道的太多了！”。真是谢谢他全家。这种方式很low，我大不了就不用快捷键打开，直接右击检查，完美破防。</p>\n<p><strong>针对第二点：</strong><br>除了video标签直接暴露视频地址的方式，针对其他情况，我们一般的操作时勾选media资源刷新页面查看数据传输的方式，再根据具体方式具体处理。那么这骚操作骚就骚在那个dubugger。<br>页面设置了一个定时器，一直处于运行状态。作用执行disableDebugger函数，就是触发debugger。判断的条件很清晰，当window.innerWidth 与window.outerWidth 的差值大于一定阈值的时候，这边设置的160，就会触发。pc我看了下貌似最小273。因此默认打开控制台就会debugger。<br>这一番骚操作，直接导致我们只要打开了控制台，直接进入debugger模式，等同于没打开。所以怎么破呢？</p>\n"},{"title":"Webpack系列：第二回","date":"2023-07-24T14:23:35.000Z","_content":"\n### 前端模块化的演进历程\n模块化是webpack的基石，本文就尝试着缕一缕。\n\n####  阶段一：文件划分\n最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。\n\n``` js\n//  文件内部结构：\nvar x = 100\n\nfunction A() {\n    ...\n}\n\nfunction B() {\n    ...\n}\n```\n然后通过script标签引入：\n```js\n    <script src=\"./moduaA.js\"></script>\n    <script src=\"./moduaB.js\"></script>\n    <script src=\"./moduaC.js\"></script>\n```\n该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制\n\n#### 阶段二：命名空间\n同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。\n```js\nvar modulA = {\n    x = 100,\n    methodA: function A() {\n        ...\n    },\n    methodB: function B() {\n        ...\n    }\n}\n```\n相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。\n\n#### 阶段三： IIFE:立即函数表达\n通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。\n```js\nconst obj = (function () {\n    let name = 'hhvcg'\n    let old = 11\n    return {\n        tell: function() {\n            console.log('i am--->:', name)\n        }\n    }\n})()\nobj.tell()\nconsole.log(obj.name)\n\n// 标准早期写法\n(function (window) {\n    let name = 'hhvcg'\n    let old = 11\n    function tell() {\n        console.log('i am--->:', name)\n    }\n    window.modulA = { tell }\n})(window)\n```\n\n##### 上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\n\n#### 阶段四：ES6 Module终极方案\n大家应该都很熟悉了，就不举例了\n\n那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，**尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。**\n","source":"_posts/Webpack系列：第二回.md","raw":"---\ntitle: Webpack系列：第二回\ncategory: Webpack\ndate: 2023-07-24 22:23:35\ntags:\n---\n\n### 前端模块化的演进历程\n模块化是webpack的基石，本文就尝试着缕一缕。\n\n####  阶段一：文件划分\n最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。\n\n``` js\n//  文件内部结构：\nvar x = 100\n\nfunction A() {\n    ...\n}\n\nfunction B() {\n    ...\n}\n```\n然后通过script标签引入：\n```js\n    <script src=\"./moduaA.js\"></script>\n    <script src=\"./moduaB.js\"></script>\n    <script src=\"./moduaC.js\"></script>\n```\n该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制\n\n#### 阶段二：命名空间\n同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。\n```js\nvar modulA = {\n    x = 100,\n    methodA: function A() {\n        ...\n    },\n    methodB: function B() {\n        ...\n    }\n}\n```\n相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。\n\n#### 阶段三： IIFE:立即函数表达\n通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。\n```js\nconst obj = (function () {\n    let name = 'hhvcg'\n    let old = 11\n    return {\n        tell: function() {\n            console.log('i am--->:', name)\n        }\n    }\n})()\nobj.tell()\nconsole.log(obj.name)\n\n// 标准早期写法\n(function (window) {\n    let name = 'hhvcg'\n    let old = 11\n    function tell() {\n        console.log('i am--->:', name)\n    }\n    window.modulA = { tell }\n})(window)\n```\n\n##### 上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\n\n#### 阶段四：ES6 Module终极方案\n大家应该都很熟悉了，就不举例了\n\n那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，**尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。**\n","slug":"Webpack系列：第二回","published":1,"updated":"2023-08-02T02:23:48.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvh0003lcvt188z3395","content":"<h3 id=\"前端模块化的演进历程\"><a href=\"#前端模块化的演进历程\" class=\"headerlink\" title=\"前端模块化的演进历程\"></a>前端模块化的演进历程</h3><p>模块化是webpack的基石，本文就尝试着缕一缕。</p>\n<h4 id=\"阶段一：文件划分\"><a href=\"#阶段一：文件划分\" class=\"headerlink\" title=\"阶段一：文件划分\"></a>阶段一：文件划分</h4><p>最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  文件内部结构：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过script标签引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;./moduaA.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaB.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaC.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制</p>\n<h4 id=\"阶段二：命名空间\"><a href=\"#阶段二：命名空间\" class=\"headerlink\" title=\"阶段二：命名空间\"></a>阶段二：命名空间</h4><p>同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> modulA = &#123;</span><br><span class=\"line\">    x = <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">methodA</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methodB</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。</p>\n<h4 id=\"阶段三：-IIFE-立即函数表达\"><a href=\"#阶段三：-IIFE-立即函数表达\" class=\"headerlink\" title=\"阶段三： IIFE:立即函数表达\"></a>阶段三： IIFE:立即函数表达</h4><p>通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">tell</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">obj.<span class=\"title function_\">tell</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 标准早期写法</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">window</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">tell</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">modulA</span> = &#123; tell &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"><a href=\"#上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\" class=\"headerlink\" title=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"></a>上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。</h5><h4 id=\"阶段四：ES6-Module终极方案\"><a href=\"#阶段四：ES6-Module终极方案\" class=\"headerlink\" title=\"阶段四：ES6 Module终极方案\"></a>阶段四：ES6 Module终极方案</h4><p>大家应该都很熟悉了，就不举例了</p>\n<p>那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，<strong>尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。</strong></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"前端模块化的演进历程\"><a href=\"#前端模块化的演进历程\" class=\"headerlink\" title=\"前端模块化的演进历程\"></a>前端模块化的演进历程</h3><p>模块化是webpack的基石，本文就尝试着缕一缕。</p>\n<h4 id=\"阶段一：文件划分\"><a href=\"#阶段一：文件划分\" class=\"headerlink\" title=\"阶段一：文件划分\"></a>阶段一：文件划分</h4><p>最原始的方法就是文件划分。其具体操作就是第一回中我们举的a、b、c三个js文件的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  文件内部结构：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过script标签引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;./moduaA.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaB.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./moduaC.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>该方法的弊端显而易见，所有模块共用全局作用域，命名冲突在所难免。变量全局污染，且模块之间的依赖关系很难控制</p>\n<h4 id=\"阶段二：命名空间\"><a href=\"#阶段二：命名空间\" class=\"headerlink\" title=\"阶段二：命名空间\"></a>阶段二：命名空间</h4><p>同样还是三个文件，只是文件内部的所有内容，都是用一个对象包裹，对外使用时则通过这个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> modulA = &#123;</span><br><span class=\"line\">    x = <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">methodA</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methodB</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比较第一种，极大避免了变量的全局污染，但是，外部依然可以随意改变模块内部的值。</p>\n<h4 id=\"阶段三：-IIFE-立即函数表达\"><a href=\"#阶段三：-IIFE-立即函数表达\" class=\"headerlink\" title=\"阶段三： IIFE:立即函数表达\"></a>阶段三： IIFE:立即函数表达</h4><p>通过闭包，实现模块内部的变量方法的私有化。隐藏该隐藏的，暴露该暴露的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">tell</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">obj.<span class=\"title function_\">tell</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 标准早期写法</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">window</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;hhvcg&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> old = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">tell</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i am---&gt;:&#x27;</span>, name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">modulA</span> = &#123; tell &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"><a href=\"#上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\" class=\"headerlink\" title=\"上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。\"></a>上述的三种方案基本被淘汰。目前的实际开发中，前端基本是遵循es6标准，后端如果是nodejs的话，使用的就是commonjs。</h5><h4 id=\"阶段四：ES6-Module终极方案\"><a href=\"#阶段四：ES6-Module终极方案\" class=\"headerlink\" title=\"阶段四：ES6 Module终极方案\"></a>阶段四：ES6 Module终极方案</h4><p>大家应该都很熟悉了，就不举例了</p>\n<p>那么为什么webpack系列文章，要提一提前端模块的发展史呢？原因在于，注意阶段三的IIFE实现的模块机制。大家可以留意一下webpack打包出来的bundle.js代码，<strong>尽管很乱但是，重点在于，webpack的打包js产物，实质就是一个IIFE。</strong></p>\n"},{"title":"Webpack系列：第一回","date":"2023-07-24T13:34:31.000Z","_content":"本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：**能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用**。\n### Webpack干啥的\n打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？**我就喜欢零散的，咋了？**\n#### 理由有二。\n- **其一**： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。\n- **其二**： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。\n\n因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。\n\n#### 那么webpack具体的能力都包括了啥？\n\n- **合并文件**。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。\n- **翻译-loader**。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等\n- **做点其他小动作-plugin**。例如打包过程的进度条等。\n- 最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。\n\n","source":"_posts/Webpack系列：第一回.md","raw":"---\ntitle: Webpack系列：第一回\ncategory: Webpack\ndate: 2023-07-24 21:34:31\ntags:\n---\n本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：**能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用**。\n### Webpack干啥的\n打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？**我就喜欢零散的，咋了？**\n#### 理由有二。\n- **其一**： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。\n- **其二**： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。\n\n因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。\n\n#### 那么webpack具体的能力都包括了啥？\n\n- **合并文件**。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。\n- **翻译-loader**。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等\n- **做点其他小动作-plugin**。例如打包过程的进度条等。\n- 最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。\n\n","slug":"Webpack系列：第一回","published":1,"updated":"2023-08-02T02:23:48.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvi0004lcvt7i9j1ycq","content":"<p>本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：<strong>能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用</strong>。</p>\n<h3 id=\"Webpack干啥的\"><a href=\"#Webpack干啥的\" class=\"headerlink\" title=\"Webpack干啥的\"></a>Webpack干啥的</h3><p>打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？<strong>我就喜欢零散的，咋了？</strong></p>\n<h4 id=\"理由有二。\"><a href=\"#理由有二。\" class=\"headerlink\" title=\"理由有二。\"></a>理由有二。</h4><ul>\n<li><strong>其一</strong>： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。</li>\n<li><strong>其二</strong>： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。</li>\n</ul>\n<p>因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。</p>\n<h4 id=\"那么webpack具体的能力都包括了啥？\"><a href=\"#那么webpack具体的能力都包括了啥？\" class=\"headerlink\" title=\"那么webpack具体的能力都包括了啥？\"></a>那么webpack具体的能力都包括了啥？</h4><ul>\n<li><strong>合并文件</strong>。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。</li>\n<li><strong>翻译-loader</strong>。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等</li>\n<li><strong>做点其他小动作-plugin</strong>。例如打包过程的进度条等。</li>\n<li>最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>本文开始， 我们尝试深入理解一下前端神器webpack。最终的目标：<strong>能够理解前端模块化，理解webpack打包的核心思路，理解webpack中的“关键人物”。解锁这三点，最终彻底掌握从而灵活运用</strong>。</p>\n<h3 id=\"Webpack干啥的\"><a href=\"#Webpack干啥的\" class=\"headerlink\" title=\"Webpack干啥的\"></a>Webpack干啥的</h3><p>打包用的，简单说就是将项目的各种零散的文件揉成一个完整的js。比如我们的项目一共用到了a.js,b.js,c.js共三个文件，打包后就成了一个bundle.js。那问题来了，为什么要打包？<strong>我就喜欢零散的，咋了？</strong></p>\n<h4 id=\"理由有二。\"><a href=\"#理由有二。\" class=\"headerlink\" title=\"理由有二。\"></a>理由有二。</h4><ul>\n<li><strong>其一</strong>： 零散文件使用，个文件之间的依赖关系顺序，需要人为的梳理清。比如在a文件里用到了b文件的某个属性，那么，b文件就应该先于a文件加载，否则error。可想而知此等操作，项目的复杂度一上来，开发人员直接崩溃。</li>\n<li><strong>其二</strong>： 零散文件意味着请求的数目无限放大。那么遵循不发请求或者少发请求的终极性能准则，此方法依旧鸡肋。</li>\n</ul>\n<p>因此，我们的神器webpack应运而生。当然啦，除了他还有很多其他的如gulp等的工具，非独此一款。</p>\n<h4 id=\"那么webpack具体的能力都包括了啥？\"><a href=\"#那么webpack具体的能力都包括了啥？\" class=\"headerlink\" title=\"那么webpack具体的能力都包括了啥？\"></a>那么webpack具体的能力都包括了啥？</h4><ul>\n<li><strong>合并文件</strong>。在项目中，我们可能会到处import各种依赖，这些以来又分布在各个文件中。webpack做的事情，说白了就是把所有的依赖代码，合并到一个js文件中。</li>\n<li><strong>翻译-loader</strong>。首先大前提，浏览器只认识js代码，而一些老版本的比如ie，他连es6的js都不认识，此时，我们就需要对自己写的ts代码或者es6代码做转换翻译处理，以使得浏览器能看得懂。例如处理样式文件的style-loader,处理es6之后的js代码的babel-loader等</li>\n<li><strong>做点其他小动作-plugin</strong>。例如打包过程的进度条等。</li>\n<li>最后指明一点：loader和plugin都是可插拔的，意味着不是强制使用，根据需求灵活搭配。</li>\n</ul>\n"},{"title":"《万神殿》--上载智能","date":"2023-07-24T08:42:29.000Z","_content":"\n最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：UI，上载智能。Upload Intelligence。\n\n所谓上载智能，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，“脑机接口、义体”等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：人工智能极度的危险。\n\n《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。\n\n通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头...换到最后，就会发现，这是哲学问题。你是谁？你在哪？何为生？何为死？不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。\n\n尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：人类会突破生死的界限：实现永生。但是，这可能是人类灭亡开端。从人类的大历史观角度看：死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。","source":"_posts/《万神殿》-上载智能.md","raw":"---\ntitle: 《万神殿》--上载智能\ndate: 2023-07-24 16:42:29\ntags:\ncategories: '杂谈'\n---\n\n最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：UI，上载智能。Upload Intelligence。\n\n所谓上载智能，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，“脑机接口、义体”等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：人工智能极度的危险。\n\n《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。\n\n通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头...换到最后，就会发现，这是哲学问题。你是谁？你在哪？何为生？何为死？不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。\n\n尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：人类会突破生死的界限：实现永生。但是，这可能是人类灭亡开端。从人类的大历史观角度看：死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。","slug":"《万神殿》-上载智能","published":1,"updated":"2023-08-02T02:23:48.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvi0005lcvt9201hmht","content":"<p>最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：UI，上载智能。Upload Intelligence。</p>\n<p>所谓上载智能，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，“脑机接口、义体”等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：人工智能极度的危险。</p>\n<p>《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。</p>\n<p>通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头…换到最后，就会发现，这是哲学问题。你是谁？你在哪？何为生？何为死？不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。</p>\n<p>尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：人类会突破生死的界限：实现永生。但是，这可能是人类灭亡开端。从人类的大历史观角度看：死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>最近闲来无事，追了一部amc美剧《万神殿》。可能是应付俗事过久，导致自己仰望星空得兴趣日益萎靡，但是这部剧，瞬间把我又拉了回去。同时还get到了一个新的名词儿：UI，上载智能。Upload Intelligence。</p>\n<p>所谓上载智能，就是将实体的人脑数据完全电子化，转变为“在云端”的状态，可复制可粘贴，是实现人类永生的基础。这个概念自打计算机诞生之日，便已经出现。相关的书籍、影视作品更是层出不穷。九十年代的《The Shell》攻壳机动队可谓是开山鼻祖，是该领域内的基石，“脑机接口、义体”等概念，均出自于此。后面的《黑客帝国》也是借鉴之。这些先驱们当年的天马行空的想象，而今，大有实现的可能。但是，也正如马斯克所言：人工智能极度的危险。</p>\n<p>《未来简史》的作者提出了一个观念：人类目下，正从经历从智人到神人的转变。何出此言？很简单，当下人类社会中的每一个个体的能力，都是曾经的人类所不能比的。这倒并不是说二十一世纪的人们相比较古人而言，多长了对翅膀或是多了个脑袋。而是说，当今的人类个体，在搭配各种现代设备之后，从古人的角度出发，那就是神的存在。借助飞行器，他们能上天，借助地下挖掘设备，他们能遁地，借助航海设备，他们还能入海。卫星就是千里眼，各种手机终端就是顺风耳。当年孙悟空一个跟头能翻十万八千里，如今人类最快的飞行器TR-3B反重力飞行器，速度据说能达到惊人的9马赫，即一小时为11016公里。虽然还有些差距，但是达到猴子那纯属意淫的速度水平，应该也只是时间的问题。</p>\n<p>通过在人体内植入芯片，就能够控制家中的所有智能设备。胳膊坏了就换一个胳膊，大腿坏了就换一个大腿，甚至脑袋坏了直接换个头…换到最后，就会发现，这是哲学问题。你是谁？你在哪？何为生？何为死？不管是攻壳中的少佐，还是《万神殿》中的主人公他爹，都会面临这个问题。他们到底是啥？他们是活着呢，还是挂了？说他们活着吧，但是原本的物质存在已经消失。你说他们死了吧，却可以轻易借助其他躯壳重返你的身边。这种状态下的他们，某种层面上讲，就是神。</p>\n<p>尽管有些人不想承认，但我们依旧不得不去面对未来的一个现实：人类会突破生死的界限：实现永生。但是，这可能是人类灭亡开端。从人类的大历史观角度看：死亡的宿命规则，决定了哪怕不公平的体系中的人们，在生死面前都是平等的。但倘若有那么一天人们发现，死亡可以避免，宿命并不存在的时候。那会是一番怎样的景象？对此，我很兴奋。</p>\n"},{"title":"Webpack系列：第四回","date":"2023-07-24T17:12:55.000Z","_content":"在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。\n\n","source":"_posts/Webpack系列：第四回.md","raw":"---\ntitle: Webpack系列：第四回\ncategory: Webpack\ndate: 2023-07-25 01:12:55\ntags:\n---\n在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。\n\n","slug":"Webpack系列：第四回","published":1,"updated":"2023-08-02T02:23:48.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvk0007lcvt1fpsh27m","content":"<p>在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>在第三回中，我们将webpack的核心流程捋了一边，但是感觉理解有些不到位。那么为了解决自己的这个“不到位”的感觉，本文尝试去写一个自己的webpack。</p>\n"},{"title":"Webkit系列：第一回","date":"2023-07-27T17:13:25.000Z","_content":"本系列的目标：**尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》**\n\n现代浏览器的渲染逻辑，就是下图的流程。\n<img src=\"/img/layout.jpeg\" alt=\"图片描述\" width=\"500\">\n\n\n一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？\n坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。\n\n总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。\n具体：\n1. 浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。\n2. 依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。\n3. html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到js引擎解释处理。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。\n4. csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的**layout阶段**。\n5. 最后的就是**Paint**和**Composite**两个阶段生成最终的页面。","source":"_posts/Webkit系列：第一回.md","raw":"---\ntitle: Webkit系列：第一回\ncategory: Webkit系列\ndate: 2023-07-28 01:13:25\ntags:\n---\n本系列的目标：**尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》**\n\n现代浏览器的渲染逻辑，就是下图的流程。\n<img src=\"/img/layout.jpeg\" alt=\"图片描述\" width=\"500\">\n\n\n一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？\n坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。\n\n总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。\n具体：\n1. 浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。\n2. 依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。\n3. html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到js引擎解释处理。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。\n4. csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的**layout阶段**。\n5. 最后的就是**Paint**和**Composite**两个阶段生成最终的页面。","slug":"Webkit系列：第一回","published":1,"updated":"2023-08-03T02:58:40.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvk0008lcvtaric8gz8","content":"<p>本系列的目标：<strong>尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》</strong></p>\n<p>现代浏览器的渲染逻辑，就是下图的流程。<br><img src=\"/img/layout.jpeg\" alt=\"图片描述\" width=\"500\"></p>\n<p>一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？<br>坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。</p>\n<p>总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。<br>具体：</p>\n<ol>\n<li>浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。</li>\n<li>依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。</li>\n<li>html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到js引擎解释处理。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。</li>\n<li>csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的<strong>layout阶段</strong>。</li>\n<li>最后的就是<strong>Paint</strong>和<strong>Composite</strong>两个阶段生成最终的页面。</li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>本系列的目标：<strong>尝试深入理解当前浏览器（谷歌）的大体逻辑。内容严重参考《Webkit技术内幕》</strong></p>\n<p>现代浏览器的渲染逻辑，就是下图的流程。<br><img src=\"/img/layout.jpeg\" alt=\"图片描述\" width=\"500\"></p>\n<p>一个经典的面试题：从输入url到最终页面的呈现，这其中都经历了些啥？<br>坦白讲这个问题很有深度也很有价值，因为完全可以根据你的描述，看出你对现代浏览器执行机制的整体把握和理解。</p>\n<p>总体可分为网页加载过程（DOMContent事件）和渲染过程（onload事件）。<br>具体：</p>\n<ol>\n<li>浏览器根据输入的内容做识别，如果输入的是网址，调用DNS解析目标IP，建立连接。如果是关键词，调用搜索引擎去搜索。</li>\n<li>依赖网络模块，三次握手建立连接后获取到各种资源，包括js、html、css等等。</li>\n<li>html文件被交给HTML解释器转变成一系列词语，然后构建节点生成DOM树（树形结构的对象），css文件被交给css解释器生成样式树。在这过程中，碰到js代码，终端dom树的构建，权限会给到js引擎解释处理。此处涉及到进程切换。执行完js后权限交回给html解释器。当然碰到的js代码也会根据如async或者defer同步异步操作。</li>\n<li>csss解释器完成工作后，会在dom树上附加解释后的样式信息，生成RenderObject树，然后转变成RenderLayer树。此时已得到绘制页面所需的绘图上下文信息，也就是图中的<strong>layout阶段</strong>。</li>\n<li>最后的就是<strong>Paint</strong>和<strong>Composite</strong>两个阶段生成最终的页面。</li>\n</ol>\n"},{"title":"做好预备动作","date":"2023-07-24T08:16:52.000Z","_content":"<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n**新时代农名工**，官方定义的从事软件开发工作的人，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。\n\n抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？.......\n\n内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生--誓言要看完图书馆里头的所有的书--->毫无可能性的事情）\n\n最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1=2“，他就知道了。别人问的时候，他回答1+1=2，说明他掌握了这项技能。技术的学习，不过如此。\n\n”计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果“。这是事实。\n\n每个人的生命，撑死不过三万六千天，大部分人，终其一生，可能都是被他人推着走完的。埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。\n\n我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。\n\n在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的生活方式，可以用一部当年的美剧的剧名来形容-----\"The walking dead\"。我始终坚信，”今天流的泪，都是tm当年脑子进的水“。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。\n\n**文毕**。","source":"_posts/做好预备动作.md","raw":"---\ntitle: 做好预备动作\ndate: 2023-07-24 16:16:52\ntags:\ncategories: '杂谈'\n---\n<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n**新时代农名工**，官方定义的从事软件开发工作的人，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。\n\n抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？.......\n\n内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生--誓言要看完图书馆里头的所有的书--->毫无可能性的事情）\n\n最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1=2“，他就知道了。别人问的时候，他回答1+1=2，说明他掌握了这项技能。技术的学习，不过如此。\n\n”计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果“。这是事实。\n\n每个人的生命，撑死不过三万六千天，大部分人，终其一生，可能都是被他人推着走完的。埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。\n\n我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。\n\n在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的生活方式，可以用一部当年的美剧的剧名来形容-----\"The walking dead\"。我始终坚信，”今天流的泪，都是tm当年脑子进的水“。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。\n\n**文毕**。","slug":"做好预备动作","published":1,"updated":"2023-08-02T02:23:48.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvm000blcvtal6o6mba","content":"<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n<p><strong>新时代农名工</strong>，官方定义的从事软件开发工作的人，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。</p>\n<p>抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？…….</p>\n<p>内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生–誓言要看完图书馆里头的所有的书—&gt;毫无可能性的事情）</p>\n<p>最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1&#x3D;2“，他就知道了。别人问的时候，他回答1+1&#x3D;2，说明他掌握了这项技能。技术的学习，不过如此。</p>\n<p>”计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果“。这是事实。</p>\n<p>每个人的生命，撑死不过三万六千天，大部分人，终其一生，可能都是被他人推着走完的。埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。</p>\n<p>我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。</p>\n<p>在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的生活方式，可以用一部当年的美剧的剧名来形容—–”The walking dead”。我始终坚信，”今天流的泪，都是tm当年脑子进的水“。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。</p>\n<p><strong>文毕</strong>。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<!-- <img src=\"/img/rrick.jpg\" alt=\"图片描述\" width=\"500\" height=\"300\"> -->\n\n<p><strong>新时代农名工</strong>，官方定义的从事软件开发工作的人，目下主要分成了前端和后端。两者分工明确，但偶有全栈大佬，前后通吃，应对各种疑难杂症，不在话下（累成狗）。</p>\n<p>抛开后端的java全家桶技术栈不谈，单单一个前端，就有学不完的知识点。三大框架angular、vue、react不说精通底层实现，怎么用是不是得学一学？状态管理vuex、redux了解一下？什么，你说你精通vue2了，vue3新鲜出炉，对了还有号称更加轻量的vite要不也了解一下？react的JSX经常用吧？都几年工作经验了，性能优化做过吧，来具体讲讲？“小x啊，这页面卡成狗你处理一下？”“轮询太low了，改成websockt？”为了减少前端主线程计算压力worker怎么用的？为了得到最优的性能体验，浏览器是怎么渲染的？他底层逻辑是怎样的？http的发展历程能说出个大概吧？直到出http3了吧，来简单讲讲？node应该有了解吧，express、koa介绍一下？…….</p>\n<p>内容超级多，且，上述说的各个点，随着时间的推移，还在不断地更新变化着。这些都可称之为技术，不知道有多少人跟当初的我一样，放出豪言要碾碎上述的一切，成为“全能的专家”？（模仿当年爱迪生–誓言要看完图书馆里头的所有的书—&gt;毫无可能性的事情）</p>\n<p>最近，也就是毕业刚满一年的这个时间节点，我突然明白一件事情，知识，是学不完的。就像浩如烟海的书本一般，你能看完这世上所有的书吗？不可能，同时也没必要。技术也是如此。技术的本质，就是一系列规则。小孩子不知道1+1等于几。进入学校后，打开数学课本的第一页，白纸黑字写的清清楚楚，”1+1&#x3D;2“，他就知道了。别人问的时候，他回答1+1&#x3D;2，说明他掌握了这项技能。技术的学习，不过如此。</p>\n<p>”计算机技术的广度和深度，犹如书海般的浩瀚，你是绝对学不完的，因为毕竟这是多少代人不断努力的结果“。这是事实。</p>\n<p>每个人的生命，撑死不过三万六千天，大部分人，终其一生，可能都是被他人推着走完的。埋头赶路固然很重要，但偶尔仰望仰望星空，可能会有不一样的感受。</p>\n<p>我觉得吧，放开手脚去大干一场的前提条件，是需要先搞搞清楚，你最珍视的、最在乎的东西，是什么。其他的，都可以不去care。这是底线准则。生活应该是多姿多彩的，闲暇时遛遛狗、捣鼓捣鼓机器等个人爱好，而不仅仅只是为了那些虚无缥缈的东西。这是应该有的生活态度。</p>\n<p>在当今这个时代，尤其是在笔者目前所处的这片土地上，我见识了太多的悲剧、喜剧。有些人的生活方式，可以用一部当年的美剧的剧名来形容—–”The walking dead”。我始终坚信，”今天流的泪，都是tm当年脑子进的水“。人各有命。对于技术，我只想脚踏实地，对于生活，我只想简简单单，尽可能的做个，明白人。</p>\n<p><strong>文毕</strong>。</p>\n"},{"title":"关于所谓的“梯子”的实现逻辑","date":"2023-08-03T02:38:19.000Z","_content":"\n不知道从什么时候开始，\"挂个梯子\"，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。\n\n说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。\n\n那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。\n<img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'>\n\n有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp/ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器--->目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。\n\n这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。\n\n那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。\n\n文毕。","source":"_posts/关于所谓的“梯子”的实现逻辑.md","raw":"---\ntitle: 关于所谓的“梯子”的实现逻辑\ncategory: 网络杂谈\ndate: 2023-08-03 10:38:19\ntags:\n---\n\n不知道从什么时候开始，\"挂个梯子\"，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。\n\n说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。\n\n那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。\n<img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'>\n\n有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp/ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器--->目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。\n\n这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。\n\n那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。\n\n文毕。","slug":"关于所谓的“梯子”的实现逻辑","published":1,"updated":"2023-08-03T02:50:58.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvm000dlcvt1aqb244r","content":"<p>不知道从什么时候开始，”挂个梯子”，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。</p>\n<p>说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。</p>\n<p>那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。<br><img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'></p>\n<p>有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp&#x2F;ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器—&gt;目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。</p>\n<p>这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。</p>\n<p>那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。</p>\n<p>文毕。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>不知道从什么时候开始，”挂个梯子”，成了很多大陆网友常挂嘴边的词。对于我而言，不仅仅是常挂嘴边，也曾一度想要实现一个自己的专属“梯子”。但是经过自己的一番研究之后，果断放弃了，因为不具备实现的条件。欲知详情，且听我缓缓道来。</p>\n<p>说到梯子，就不得不提一下GFW，即：大名鼎鼎的长城防火墙。类似进击的巨人中，那三层巨大的高墙，将墙内的人们与世界割裂。区别在于，前者是虚拟不可见的，而后者，则是正儿八经的看得见摸得着石头墙。GFW的实现原理，其实很简单，针对特定的站点，进行访问限制。可以简单理解为，大陆的所有的对外访问，都会经由一个统一的出口，如果访问的是受限制的站点，则会失败。</p>\n<p>那么“梯子”是如何突破这种限制的呢？本质在于“映射”，专业词汇“代理”。当我们挂上梯子访问外站的时候，机器首先访问的并不是我们输入的地址，而是中间层的机器。类似于“存储转发”的概念。<br><img src=\"/img/ladder.webp\" alt=\"图片描述\" width='500px'></p>\n<p>有网络知识基础的人都晓得，当我们在浏览器的地址栏中输入网址，会通过tcp&#x2F;ip协议族，跟目标主机建立通信链路，然后发送资源请求，只涉及双方：我的机器—&gt;目标服务器，等同于现代的通话。那么“梯子”做的事情，相当于在双方之间加了一层。就是我的机器发出的请求，目标服务器并没有直接接收到，而是被中间层的服务器接收了，然后由中间层服务器将请求发送给目标服务器，获取到对应的资源之后，再返还给我的机器。</p>\n<p>这，就是“梯子”的实现原理。“利用梯子”，代理我们的请求，即：代替我们向目标服务器发送资源请求。</p>\n<p>那么此时回到文章开头，为什么我会果断放弃实现自己“梯子”的想法了呢？很显然，就是这个中间层服务器的搭建。是个大坑。</p>\n<p>文毕。</p>\n"},{"title":"四轴无人机研究：第一回","date":"2023-07-31T02:27:23.000Z","_content":"\n无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其**尸骨**，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，**借尸还魂**。\n\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n#### 四旋翼无人机的大体构成\n- **飞控系统**。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。\n- **遥控系统**。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。\n- **动力系统**。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。\n- **图传**。搜集飞控返回的图像和其他飞行参数的各项信息。","source":"_posts/四轴无人机研究：第一回.md","raw":"---\ntitle: 四轴无人机研究：第一回\ncategory: 无人机系列\ndate: 2023-07-31 10:27:23\ntags:\n---\n\n无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其**尸骨**，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，**借尸还魂**。\n\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n#### 四旋翼无人机的大体构成\n- **飞控系统**。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。\n- **遥控系统**。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。\n- **动力系统**。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。\n- **图传**。搜集飞控返回的图像和其他飞行参数的各项信息。","slug":"四轴无人机研究：第一回","published":1,"updated":"2023-08-03T02:52:23.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkul7dvo000glcvt09si2w0j","content":"<p>无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其<strong>尸骨</strong>，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，<strong>借尸还魂</strong>。</p>\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n<h4 id=\"四旋翼无人机的大体构成\"><a href=\"#四旋翼无人机的大体构成\" class=\"headerlink\" title=\"四旋翼无人机的大体构成\"></a>四旋翼无人机的大体构成</h4><ul>\n<li><strong>飞控系统</strong>。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。</li>\n<li><strong>遥控系统</strong>。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。</li>\n<li><strong>动力系统</strong>。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。</li>\n<li><strong>图传</strong>。搜集飞控返回的图像和其他飞行参数的各项信息。</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>无人机在现今社会的各个角落，都扮演着极其重要的作用。那么对于我们普通人而言，其最大的价值角色，就是航拍。鄙人的第一台机器，就是大疆的mini一代。带着他去了无数的地方，给我留下了很多珍贵的镜头。但是很不幸，两年的时间，已经飞不起来了。本着充分利用资源的原则，我想借其<strong>尸骨</strong>，来稍微深入的研究一下四旋翼无人机的飞行原理，然后尝试能否，<strong>借尸还魂</strong>。</p>\n<img src=\"/img/air.png\" alt=\"图片描述\" width=\"500\">\n\n\n<h4 id=\"四旋翼无人机的大体构成\"><a href=\"#四旋翼无人机的大体构成\" class=\"headerlink\" title=\"四旋翼无人机的大体构成\"></a>四旋翼无人机的大体构成</h4><ul>\n<li><strong>飞控系统</strong>。一般包括GPS记录经纬度的,气压计记录气压的、IMU惯性测量单元，计算三维空间中飞机姿态的各个参数的，指南针等。。。。</li>\n<li><strong>遥控系统</strong>。就是手柄遥控器。遥控器发出信号，飞控的信号接收模块接收信号后，执行相应的指令。</li>\n<li><strong>动力系统</strong>。一般包括：电调（电子调速器，将电池提供的直流电转换为能够驱动电机的三相交流电）， 电机（驱动浆叶），桨叶（提供升力），电池。</li>\n<li><strong>图传</strong>。搜集飞控返回的图像和其他飞行参数的各项信息。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clkul7dvi0004lcvt7i9j1ycq","category_id":"clkul7dvg0002lcvt2bxx29pa","_id":"clkul7dvl0009lcvt56uk4b1k"},{"post_id":"clkul7dvb0000lcvt01dj7f4e","category_id":"clkul7dvg0002lcvt2bxx29pa","_id":"clkul7dvm000clcvt04cbf87o"},{"post_id":"clkul7dvk0007lcvt1fpsh27m","category_id":"clkul7dvg0002lcvt2bxx29pa","_id":"clkul7dvn000elcvta9yxc1i0"},{"post_id":"clkul7dvf0001lcvt5l167juk","category_id":"clkul7dvj0006lcvt45kg58od","_id":"clkul7dvo000hlcvtd8mg6wvg"},{"post_id":"clkul7dvh0003lcvt188z3395","category_id":"clkul7dvg0002lcvt2bxx29pa","_id":"clkul7dvo000ilcvt91o636w0"},{"post_id":"clkul7dvm000dlcvt1aqb244r","category_id":"clkul7dvj0006lcvt45kg58od","_id":"clkul7dvo000klcvta9u0ayzi"},{"post_id":"clkul7dvi0005lcvt9201hmht","category_id":"clkul7dvn000flcvt847ddox4","_id":"clkul7dvp000llcvt9p4n5b51"},{"post_id":"clkul7dvk0008lcvtaric8gz8","category_id":"clkul7dvo000jlcvtafgue3a9","_id":"clkul7dvp000olcvtao7v4s0b"},{"post_id":"clkul7dvm000blcvtal6o6mba","category_id":"clkul7dvn000flcvt847ddox4","_id":"clkul7dvp000plcvtdwbx9jux"},{"post_id":"clkul7dvo000glcvt09si2w0j","category_id":"clkul7dvp000nlcvt18fi88ci","_id":"clkul7dvp000qlcvt140b4vg9"}],"PostTag":[],"Tag":[]}}